<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-03-16T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Who Needs Frameworks?</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/16/who-needs-frameworks/"/>
    <id>http://blog.url.com/2017/03/16/who-needs-frameworks/</id>
    <published>2017-03-16T00:00:00+00:00</published>
    <updated>2017-04-18T22:16:48+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="sprinting" src="/images/frameworks.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;I listen to a different podcast every morning.  Last Friday it was &lt;a href="http://www.greaterthancode.com/podcast/episode-014-rashaun-stovall-snuggs/"&gt;&amp;ldquo;Greater than Code&amp;rdquo; with Raâ€™Shaun Stovall (Snuggs)&lt;/a&gt;.  It was pretty mind expanding with quotes and questions like the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;seniors often try to hold on to the complexity they love&lt;/p&gt;

&lt;p&gt;if you are presenting a problem and not suggesting a solution then you are part of the problem&lt;/p&gt;

&lt;p&gt;why is open source so closed?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Snuggs comes from a US college football background and brings huge energy and lots of analogies.  Another idea he was introducing was that maybe we didn&amp;rsquo;t need so many front end frameworks.  I posted to that effect in the GreaterThanCode Slack and got a response that was worthy of a short blog post from Snuggs.  To paraphrase his response, Snuggs thinks no one is being accountable for hand holding the huge numbers of bootcamp grads from bootcamp to junior.  I&amp;rsquo;d certainly love to see AgileVentures fulfilling that role by having teams of bootcamp grads working on open source projects for charities and non-profits around the world.  We do have graduates from a number of bootcamps involved, but there&amp;rsquo;s a way to go, to perfect that support process.  It would be great if we could collaborate more with NYC.rb and RailsLink.  &lt;/p&gt;

&lt;p&gt;Snuggs runs NYC.rb and that group have colonised the RailsLink Slack which just reached it&amp;rsquo;s 5000&amp;#39;th member.  He says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s to the point now where they are all teaching themselves and truth be told 3 juniors pairing with the proper guidance will become senior in months not years. I&amp;rsquo;ve seen it with my own eyes. And they are relentless at learning best practices. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m trying to get my head round the DevPunks and RailsLink communities that Snuggs is at the heart of.  I&amp;rsquo;ve been in the RailsLink Slack, but so far it seems like lots of Q&amp;amp;A.  I&amp;rsquo;m not quite following where to see the pairing and mentoring that Snuggs talks about, but I&amp;rsquo;m going to keep asking there.  I just watched Snuggs&amp;rsquo; video on &lt;a href="https://youtu.be/A5ad52AogJ8"&gt;&amp;ldquo;Why is Open Source so Closed?&amp;rdquo;&lt;/a&gt;.  He makes a great call out to travel and opening your mind.  Snuggs is so full of ideas and energy that I sometimes find it difficult to follow, but the way I&amp;rsquo;m hearing it is that Snuggs was surprised how there are so many cool things going on outside the Ruby world, e.g. in the JavaScript world, and is railing against the cliques that develop around individual programming languages, where for example Ruby devs might look down on JavaScript and PHP developers.  That&amp;rsquo;s a great message.&lt;/p&gt;

&lt;p&gt;And I think that&amp;rsquo;s where the idea that maybe we don&amp;rsquo;t need quite so many frontend frameworks comes from.  I couldn&amp;rsquo;t find a blog post expressing the same sentiment as Snuggs, but I posted this &lt;a href="https://hackernoon.com/you-might-not-need-react-e5fd54611111#.ywyol38o9"&gt;&amp;ldquo;You might not need React&amp;rdquo;&lt;/a&gt; post, and we had some discussion there, but I wasn&amp;rsquo;t sure that I was properly articulating Snuggs&amp;rsquo; point.  In his &amp;gt;Code post, Snuggs referred me to his repo &lt;a href="https://github.com/snuggs/snuggsi"&gt;https://github.com/snuggs/snuggsi&lt;/a&gt; which includes polyfills that mirror parts of jQuery, e.g. &lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Polyfill for Sizzle CSS selection&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// always returns a collection. Just like jQuery&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'string'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="c1"&gt;// identity function&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;rsquo;m hearing here is that modern JavaScript is evolving to the point that some parts of some frontend frameworks might be redundant.  It would be great to see some open source projects developed using that approach.  Of course there&amp;rsquo;s fear with change.  &amp;ldquo;If it&amp;rsquo;s not broken don&amp;rsquo;t fix it&amp;rdquo; can be a powerful mantra when you&amp;rsquo;ve been burnt by complex coding dependencies in the past &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/A5ad52AogJ8"&gt;Snuggs on &amp;ldquo;Why is Open Source so Closed?&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;My Podcast Playlist:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/ruby-rogues"&gt;Ruby Rogues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softskills.audio/"&gt;Soft Skills Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/js-jabber"&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://changelog.com/podcast"&gt;The Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/freelancers"&gt;Freelancer Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineeringdaily.com/"&gt;Software Engineering Daily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greaterthancode.com/"&gt;Greater than Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubybookclub.com/"&gt;Ruby Book Club&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Show me the Code</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/15/show-me-the-code/"/>
    <id>http://blog.url.com/2017/03/15/show-me-the-code/</id>
    <published>2017-03-15T00:00:00+00:00</published>
    <updated>2017-04-06T22:14:25+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="sprinting" src="/images/code.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Federico made a comment on one of my recent blogs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;code&lt;em&gt;in&lt;/em&gt;blog == good&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wish I was coding more.  I am getting to do some code in the Premium mobbing sessions.  My productive coding efforts are snatched between meetings with me throwing up spikes to give myself bugs (in my feature branches) to fix and drive myself forward.  I have got quite excited about starting to code in Elixir.  Stephen Grider very kindly made his Udemy course available to Premium Mob members, and it&amp;rsquo;s super high quality.   It&amp;rsquo;s what I would love to see more MOOCs evolving towards.  Stephen has all the code in his &lt;a href="https://github.com/StephenGrider/ElixirCode"&gt;repo on GitHub&lt;/a&gt;, where we can see code like this from his initial example Elixir app for playing Cards:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; _reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet is a little chunk that will load a deck of cards from a file.  I was struck by some parallels with a pattern in Avdi Grimm&amp;rsquo;s &amp;ldquo;Confident Ruby&amp;rdquo; that we are covering in our Ruby Mob:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;error_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:on_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;symlink_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:on_symlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symlink?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;symlink_policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;
      &lt;span class="n"&gt;error_policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;delete_files&lt;/code&gt; method about is doing something more complex than the Elixir snippet.  Here we&amp;rsquo;re seeing a method that has some default &amp;ldquo;policies&amp;rdquo;, that can be called in such a way that new policies are passed in on the fly:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;delete_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;on_error: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
             &lt;span class="ss"&gt;on_symlink: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interesting thing was that having refactored this far in his &amp;ldquo;receive policies instread of data&amp;rdquo; pattern Avdi said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At this point this example is clearly getting a little bit strained. And in general, code like this is probably a smell. There are some programming languages in which it is perfectly normal to pass lots of lambdas into methods, but in Ruby we typically try to Wnd more object-oriented approaches to composing behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now admittedly the connection I&amp;rsquo;m making between the Elixir and Ruby code is strained.  In some ways I was just picking up on what looks like a similarity in some of the symbols in the two languages.  Actually here what might seem like a similarity is in fact two different things.  Elixir&amp;rsquo;s &lt;code&gt;case&lt;/code&gt; statement is using &lt;code&gt;-&amp;gt;&lt;/code&gt; to indicate the cases, whereas Ruby is using it to specify anonymous lambdas.  That said, elements of case statements are perhaps best described as anonymous lambdas?  Confused, well, let me transcribe the Elixir code into Ruby:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt;
    &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at that side by side with the Elixir snippet again:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; _reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elixir is using some interesting techniques like &amp;ldquo;pattern matching&amp;rdquo; here.  There&amp;rsquo;s a &lt;a href="http://katafrakt.me/2016/02/13/quest-for-pattern-matching-in-ruby/"&gt;great blog on getting pattern matching in Ruby&lt;/a&gt; with &lt;a href="https://github.com/katafrakt/noaidi"&gt;noaidi&lt;/a&gt;.  The pattern matching in use here is that the case statement is checking for matches returned from &lt;code&gt;File.read(filename)&lt;/code&gt; to see if they are either in the form &lt;code&gt;{:ok, binary}&lt;/code&gt; or &lt;code&gt;{:error, _reason}&lt;/code&gt; with the bonus that if part of the pattern is an undeclared variable, then it gets assigned so that we can then refer to that variable in the body of the individual case condition, e.g. &lt;code&gt;:erlang.binary_to_term binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Part of what got me connecting all this up was that Ruby was throwing some of the same error types that Elixir returns, e.g.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2.3.1 :004 &amp;gt; f = File.read('.gitignoreasda')
Errno::ENOENT: No such file or directory @ rb_sysopen - .gitignoreasda
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we were playing with the Elixir code in the mob, I was seeing that the unused &lt;code&gt;_reason&lt;/code&gt; variable was being set to :enoent when the file didn&amp;rsquo;t exist, which gave me an idea for refactoring this snippet of Elixir code like so:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;enonet&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"The file named '#{filename}' does not exist"&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Trying to load the file we got stuck with: #{reason}"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which in Ruby would be:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ENOENT&lt;/span&gt;
    &lt;span class="s2"&gt;"The file named '&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' does not exist"&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt;
    &lt;span class="s2"&gt;"Trying to load the file we got stuck with: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$!&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, all good fun, but the thing that my brain is really grooving to is Avdi&amp;rsquo;s comment about Ruby having better OO ways to manage anonymous lambdas and the thought that Elixir has eschewed the setup of having objects associating state with methods/functions, so that what might be a code smell in Ruby, might actually be the way to go in Elixir.  The really strange mental nexus for me is the next example from Stephen&amp;rsquo;s course where he introduces Elixir structs, which are data structures of the type I am familiar from my C days - just structures of data, not associated with any methods/functions, e.g.&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image &lt;span class="k"&gt;do&lt;/span&gt;
  defstruct hex&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; pixel_map&lt;span class="p"&gt;:&lt;/span&gt; nil
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in almost the inverse fashion that Ruby modules are collections of methods divorced from any object state; although they can manipulate state when they get mixed in, but still &amp;hellip; anyhow, we get Elixir methods in a different module like so:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def build_grid&lt;span class="p"&gt;(&lt;/span&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;hex&lt;span class="p"&gt;:&lt;/span&gt; hex&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; image&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    grid &lt;span class="p"&gt;=&lt;/span&gt;
      hex
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;chunk&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;map&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;mirror_row/&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; List&lt;span class="p"&gt;.&lt;/span&gt;flatten
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;with_index

    %Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;image &lt;span class="p"&gt;|&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; grid&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Elixir method is designed to work with a particular Elixir struct; specifically the Identicon.Image defined above, but there are no instance variables in Elixir so all data comes in from the method arguments and then gets passed out the return statement.  I know there&amp;rsquo;s lots of strange new syntax here if you&amp;rsquo;re not familiar with Elixir, in which case I strongly recommend Stephen&amp;rsquo;s course, but the thing I want to focus on here is the the process of assignment from the argument struct to a local method variable:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;hex&lt;span class="p"&gt;:&lt;/span&gt; hex&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we&amp;rsquo;re using pattern matching to extract the hex part of the struct (the &lt;code&gt;image&lt;/code&gt; argument) and assign it to the &lt;code&gt;hex&lt;/code&gt; variable.  After processing and generating the &lt;code&gt;grid&lt;/code&gt; variable in the body of the method, we then combine that with a copy of the incoming image argument to return a new struct that is the incoming struct plus some additional data:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;image &lt;span class="p"&gt;|&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; grid&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What really strikes me here (apart from a possible refactoring) that I&amp;rsquo;ll go into in another blog, is that instance variables just seem completely unecessary.  I&amp;rsquo;ve known for a while that the functional programmers eschew them, and we have heuristics in OO languages to avoid allowing unecessary state manipulation (e.g. preferring instance variables set up in an initializer rather than via accessors), but the breakthrough for me here is to see that we can still do all the OO domain modelling with structs.  We can even create a set of methods and procedures that are tied to working with those structs, but we don&amp;rsquo;t seem to lose anything we really need as a result of losing instance variables.  This does seem extraordinarily powerful.  Maybe I&amp;rsquo;m drinking the Kool-Aid, but I can&amp;rsquo;t now think of a circumstance where we have to use an instance variable.&lt;/p&gt;

&lt;p&gt;Also, the fact that in Rails, active record models have this complexity, where they can get out of sync with the database due to their instance state, is tricky and hugely confusing for learning developers.  I suspect that problem completely disappears in Elixir/Phoenix.  Not that Rails isn&amp;rsquo;t great in so many ways, but I&amp;rsquo;d love someone to show me a real world coding problem that couldn&amp;rsquo;t be addressed without instance variables (assuming no memory constraints).  It also seems to be you could code the Elixir way in Ruby by just refraining from using instance variables.  I start to wonder if parts of our CS educational OO edifice are just completely unnecessary and surplus to requirement, specifically &amp;ldquo;instance variables&amp;rdquo;.  &lt;a href="https://twitter.com/tansakuu"&gt;Tweet me&lt;/a&gt; with counter examples!   Let&amp;rsquo;s get to the bottom of this! :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hangouts Filling Up</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/14/hangouts-filling-up/"/>
    <id>http://blog.url.com/2017/03/14/hangouts-filling-up/</id>
    <published>2017-03-14T00:00:00+00:00</published>
    <updated>2017-04-05T22:23:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="sprinting" src="/images/full.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Monday saw full hangouts for the &amp;ldquo;Martin Fowler&amp;rdquo; and &amp;ldquo;Kent Beck&amp;rdquo; scrums.  It was at least partly because SUNY Binghamton students were coming in to vote as part of their class assignment, but also the return of previous regulars such as Tong Wei and Raphael.  Also contributing was the running of the LocalSupport kick off in the latter scrum, which brought in three Kenyan developers.  Great to be having busy hangouts - allowing lots of new folks to see aspects of the Agile scrum process and planning poker with Arreche&amp;rsquo;s great Slack voting app. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s great to be able to support the students but it does come with a cost, and it&amp;rsquo;s pretty rare that university students who participate as part of an assignment will come back to contribute further, although perhaps I&amp;rsquo;m seeing the world without rose-tinted glasses today.  I feel a negative haze on my vision at the moment.  Nasty cough almost gone but dragging into a third week, beating myself up about subbing decisions when coaching the weekend football game, feeling like I should be able to awaken to the moment and drop the illusion on the self.  Scrabbling for grants for tiny amounts of money.  Working really hard but not earning any money.  &lt;/p&gt;

&lt;p&gt;At least I&amp;rsquo;m feeling calmer - I&amp;rsquo;m not expecting AgileVentures to generate enough funds to support my family and I think we&amp;rsquo;re doing some great work.  The under-populated &amp;ldquo;Kent Beck&amp;rdquo; scrums are filling up as I associated a different project kick-off with each.  Also affecting my mood is rejection from Pragmatic Programmers on my book draft on &amp;ldquo;Agile Methods for Open Source Projects&amp;rdquo;.  I put a fair amount of effort to get what was originally a short chapter up to 5000 words.  I know that publishing a book is no ticket to financial stability, but it&amp;rsquo;s one additional route to push out the AgileVentures methodology.  There&amp;rsquo;s a model of how a loose and flexible Agile Scrum process can help Open Source projects grow and maintain quality, and for a while I was thinking a book on the subject might be the way to get it across, but perhaps we just need to bake it in to the user experience of AgileVentures.&lt;/p&gt;

&lt;p&gt;Graghh!  I just want to code and scrum and generate systems for clients and work with them to understand if it&amp;rsquo;s really helping fix their problems, and I want to do it in an open fashion that allows everyone else in the world to see the process and join in.  I get to do that a little in AgileVentures, but increasingly my time is spent scrabbling for funding, and if we don&amp;rsquo;t land something soon I&amp;rsquo;m going to have to kick my paid job/contract search into a much higher gear.  &lt;/p&gt;

&lt;p&gt;Bringing this back round to scrums, it was interesting that some new folks had difficulty even getting into Slack to vote on the stories with us.  They were using Slack via the web.  It&amp;rsquo;s funny for me with the desktop app installed, navigating to a Slack channel is trivial, but there&amp;rsquo;s a learning curve.  Even with a direct link to the relevant Slack channel in the chat in the hangout, one person got all tangled up trying to type out that link rather than clicking it, and several folks were stymied trying to work out how to join the channel on the spur of the moment.  The voting interface was present, but they had to click the green &amp;ldquo;join channel&amp;rdquo; button that Slack adds to take you from the preview mode to really entering the channel and the voting interace coming live.  That old beginner vs expert UX divide.   We got everyone voting in the end, but being able to see other folks experience via screen share in Google hangouts is eye opening as always.&lt;/p&gt;

&lt;p&gt;Clearly voting plugged directly into the Hangout would be better - gosh I wish the hangout could embed the Slack chat itself and those joining the hangout would be automatically in that chat.  Maybe with some new YouTube live interface, or if we switch to Zoom or roll our own after April 25th.  The visions of the interfaces that would work still dance in my head, but I can&amp;rsquo;t seem to command the resources to put them together in the quality that I imagine &amp;hellip; maybe one day.&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kZ7m9abU0po"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=V8EGMGuRSFc"&gt;Marketing meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyjHlJc_rrw"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum and LocalSupport KickOff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Day by Day</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/10/day-by-day/"/>
    <id>http://blog.url.com/2017/03/10/day-by-day/</id>
    <published>2017-03-10T00:00:00+00:00</published>
    <updated>2017-04-04T22:28:52+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="sprinting" src="/images/day.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Day by day I&amp;rsquo;m getting one item off my desk.  I&amp;rsquo;m not sure why it&amp;rsquo;s so painful.  Over the last 10 days I&amp;rsquo;ve got off new passport applications for myself and my eldest son, sent off tax liability statements for the AgileVentures bank, and put various bank statements and odd pieces of papers in either the bin or my new filing cabinet.  Is it possible to enjoy the process more?  It&amp;rsquo;s a great feeling when one of these administrivia tasks is completed.  A lovely feeling of progress as the surface of my desk slowly re-appears.  Managed to get straight to the blog this morning despite tweeting and slacking a GreaterThanCode episode.  It was almost as if the volume of Slack alerts (25) kept me on the straight and narrow.  Gosh, why is so much of this stuff like pulling teeth! :-)&lt;/p&gt;

&lt;p&gt;My daily routines continue; writing out Kanji tests for my kids while eating breakfast, walking them to school, listening to podcasts on the way back, tweet/slacking them (the podcasts, not the kids), blogging ~ the day ~ getting the kids to bed, reviewing older blogs and pushing to Slack, Medium and LinkedIn.  Looking back at older blogs, I&amp;rsquo;m missing the more intense coding of last year, missing blogs with more code samples; not that I&amp;rsquo;m sure if anyone other than me derives any benefit from them.  I&amp;rsquo;m starting to get a few more likes on Medium and LinkedIn, getting a few interesting conversations on Slack, but my consciousness is changing.  I&amp;rsquo;m watching more, seeing how the experience from my senses interleaves with memories, feelings, short excerpt from movies and tv shows.  What is this extraordinary one mind that can leap from considering the scale of the universe, to the inside of an atom, to the rage at a failing relationship, to the bitter sweet joy of nostalgia, to the peace of satisfaction!&lt;/p&gt;

&lt;p&gt;We all have it (I think), the mind?  Or should we just say the experience of reality?  The ever-runnning flow of experience; attention slipping from sensations in the body, focus on something in the &amp;ldquo;outside&amp;rdquo; world.  If ever anything is truly &amp;ldquo;outside&amp;rdquo; or &amp;ldquo;inside&amp;rdquo;.  I&amp;rsquo;m starting to be able to watch as the emotions rise.  Yesterday my eldest son injured his left arm during his evening football training.  It seemed to become more painful as he got closer to bedtime, and there was fair amount of work with painkillers, ice-packs etc. I think it this morning that I was on the stairs calling up to his room to ask him which arm he had injured as I was considering whether he needed the day off school.  I asked him &amp;ldquo;right arm?&amp;rdquo; and he responded indicating that he didn&amp;rsquo;t know what I was talking about.  He was changing in his room, I was on the stairs, and irritation welled up overtaking my experience.  The irritation was a sort of disbelief that my 12 year old son couldn&amp;rsquo;t understand the question, couldn&amp;rsquo;t understand the context.  My tone changed and I said with some tension &amp;ldquo;the arm you injured last night, was it the right arm or the left arm&amp;rdquo;.  &amp;ldquo;Left arm&amp;rdquo; came the reply.  Why should I be irritated?  There, at some level, I&amp;rsquo;m sort of expecting my son to be on the same train of thought as me.  But why should he?  Why should anybody?&lt;/p&gt;

&lt;p&gt;I feel like I can go further.  I&amp;rsquo;m still not quite observing the irritation (or other emotion) just as it rises.  It&amp;rsquo;s still slightly after the fact and then it&amp;rsquo;s kind of damage repair to make myself calm again.  My kids tell me I&amp;rsquo;m less angry than I used to be.  I feel like I&amp;rsquo;m on the edge of grasping something important here.  I&amp;rsquo;d meant to blog about the components of my day; take another look at where I can find some time savings.  Maybe there&amp;rsquo;s time for a little of that.  The blogging process has simplified as a result of reviewing it last year, with me creating a branch in the github UI, navigating to the correct directory, editing in the browser, submitting a PR.  Could be simpler, but still pretty smooth.  What else was in yesterday:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;09:30 - 10:00 - accidental Slack and Email review&lt;/li&gt;
&lt;li&gt;10:00 - 10:30 - blogging&lt;/li&gt;
&lt;li&gt;10:30 - 11:30 - composing a report about AgileVentures situation&lt;/li&gt;
&lt;li&gt;11:30 - 11:45 - Scrum&lt;/li&gt;
&lt;li&gt;11:45 - 13:30 - working through todo list (pushing out WSO code to staging, phone call with potential funder, phone call with charity trustee, managing new Premiums and sponsorships)&lt;/li&gt;
&lt;li&gt;14:00 - 14:30 - lunch and reviewing &amp;ldquo;Confident Ruby&amp;rdquo; sections for mob programming session&lt;/li&gt;
&lt;li&gt;15:00 - 15:45 - Skype with potential sponsor/partner&lt;/li&gt;
&lt;li&gt;15:45 - 16:00 - Scrum and Redeemify project code review&lt;/li&gt;
&lt;li&gt;16:00 - 17:00 - Ruby Mob&lt;/li&gt;
&lt;li&gt;18:00 - 19:00 - fixing elasticmail/mailchimp settings and writing draft proposal for funder&lt;/li&gt;
&lt;li&gt;21:00 - 21:30 - reviewing old blogs, pushing to medium/linkedin - Slack catch up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not sure where I can squeeze much more efficiency out of all that.  I guess the difficult thing is that applying for funding and reaching out to sponsors takes up time.  Maybe we can get to the point where the mobs stop being review of book chapters and actually generating new code on community challenges.  We had a new Premium sign up yesterday and got two new folks sponsored.  There&amp;rsquo;s a lot of coding we could do to smooth that process up, but right now I have to switch to coding/working on things that bring in money immediately, not things that might speculatively bring more money in in the future.  I&amp;rsquo;ll still keep taking it day by day, and seeing if I can enjoy the experience, moment by moment &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=70T6fa4Tdck"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MQBHqiJE5B4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Sprinting</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/09/sprinting/"/>
    <id>http://blog.url.com/2017/03/09/sprinting/</id>
    <published>2017-03-09T00:00:00+00:00</published>
    <updated>2017-04-03T22:28:30+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="sprinting" src="/images/sprinting.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Well I totally failed to avoid Slack and Email before blogging this AM.  Again it was posting the update about the podcast that I&amp;rsquo;d listened to.  I&amp;rsquo;d had this idea to post to Twitter and then leave posting it to Slack till after the blog, but going into #techtalk on Slack I see a post by another community member, reply to that, post my podcast update and then I just don&amp;rsquo;t have the self-control not to look through the other channels.  And once I&amp;rsquo;ve done that, hell, I might as well look at my email :-) Perhaps, fortunately there was not too much going on, so I&amp;rsquo;m back at the blog pretty quickly.  I have found a Slack command line interface (&lt;a href="https://github.com/rlister/slackcat"&gt;SlackCat&lt;/a&gt;) that allows me to post an update without looking at the rest of the Slack.  Maybe I&amp;rsquo;ll use that tomorrow.&lt;/p&gt;

&lt;p&gt;Of course just firing off to #techtalk without going in there to check if there&amp;rsquo;s an ongoing conversation might be a little inconsiderate.  Could I have some mechanism that would hold the update ready to go until the previous update didn&amp;rsquo;t have a question mark on the end?  Gosh, what a convoluted train of thought! :-) The structure I&amp;rsquo;m building to try and deal with a lack of willpower &amp;hellip; Maybe I need the willpower workout, or maybe it doesn&amp;rsquo;t matter if I don&amp;rsquo;t get straight to the blog &amp;hellip; just why are Slack and Email so addictive?&lt;/p&gt;

&lt;p&gt;Anyway, I was going to try and link this all tangentially to the subject of Sprints, an important part of the Agile Scrum process whereby work is timeboxed into multi-week sprints.  I&amp;rsquo;ve been pretty lax on formal Sprints in the projects I&amp;rsquo;m managing recently.  We used to do them regularly on LocalSupport and WebSiteOne with a weekly meeting that tried to combine retrospective and planning elements.  As I&amp;rsquo;ve mentioned before, it seemed like there wasn&amp;rsquo;t much enthusiasm for the meetings, and it was quite de-motivating to go to the effort of arranging them when not many people would show up.  Or even more so if they would say they would turn up and then cancel at the last minute, or not even send word that they couldn&amp;rsquo;t make it.&lt;/p&gt;

&lt;p&gt;However, reading more about Sprint philosophy for the book I&amp;rsquo;m writing on &amp;ldquo;Agile Methods in Open Source Projects&amp;rdquo; and Pat Bolger&amp;rsquo;s effective use of Sprints in the MetPlus and WikiEduDashboard projects, AND Michael&amp;rsquo;s enthusiasm for a new kind of structure to planning meetings in WebSiteOne, has got me all gung-ho for Sprints now.  It&amp;rsquo;s interesting how different areas of Agile, Scrum and XP overlap.  Pair programming is great for keeping focused on a task.  As I&amp;rsquo;ve dialled back the amount of pairing I do, I&amp;rsquo;ve been spending less time coding.  There are lots of admin things to do, and that&amp;rsquo;s partly why I&amp;rsquo;ve gone for more solo sessions, since they can be organised more easily at the last minute.  However in absence of pairing and a sprint structure, it&amp;rsquo;s easy for things to just drift.&lt;/p&gt;

&lt;p&gt;Making a committment as part of a Sprint that a certain amount of work will get done during that Sprint is no guarantee that the work will get done.  However we&amp;rsquo;re now in our second week-long Sprint in the new WebSiteOne flow and I&amp;rsquo;m finding that committing to complete a certain number of tickets in a &amp;ldquo;formal&amp;rdquo; meeting is proving reasonably effective at keeping me on task in the absence of pairing.  It&amp;rsquo;s inspired me to start more formal Sprints for the LocalSupport, AsyncVoter and Redeemify projects.&lt;/p&gt;

&lt;p&gt;We had a AsyncVoter kick off yesterday involving Arreche and myself in which we found ourselves a little early to vote on new features, but we both made commitments to sorting out certain infrastructure issues.  It&amp;rsquo;s too early to say whether this will all have a big long-term impact, but particuarly since the afternoon (UTC) Kent Beck scrums have been relatively slow recently, I&amp;rsquo;m going for making each one a &amp;ldquo;Sprint kick-off&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monday (LocalSupport)&lt;/li&gt;
&lt;li&gt;Tuesday ?&lt;/li&gt;
&lt;li&gt;Wednesday (AsyncVoter&lt;/li&gt;
&lt;li&gt;Thursday (Redeemify)&lt;/li&gt;
&lt;li&gt;Friday (WebSiteOne)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think maybe Redeemify should be on Tuesday.  Perhaps the daily scrums should be renamed after their project focus, instead of &amp;ldquo;Kent Beck&amp;rdquo;.  What I don&amp;rsquo;t want to do is give the impression that other project business couldn&amp;rsquo;t be discussed there &amp;hellip; maybe the thing to do is set up a repeating event that takes place after the &amp;ldquo;Kent Beck&amp;rdquo; scrum of scrums?  Rather than just letting the scrum event bleed over as I&amp;rsquo;m currently doing &amp;hellip;&lt;/p&gt;

&lt;p&gt;Maybe I should be going to take Agile and Scrum certification, but I&amp;rsquo;m not inspired by what feels to me like a rubber stamping process.  I feel like true learning comes from doing things in the trenches.  Trying out one technique, tweaking it, reflecting and so forth.  Not that I couldn&amp;rsquo;t learn something from seeing the inside of the &amp;ldquo;corporate&amp;rdquo; Agile/Scrum certification, but at arond Â£1000 a pop, I&amp;rsquo;ll need to sort my financial situation first.  Then again do you need to speculate to accumulate?  Should we perhaps be using the limited AV funds to pay for Agile certification for people like myself, Pat and Lara, so that we could advertise that projects brought to AV would have a dedicated certified scrum master?&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know.  There is infinite flexibility.  I hate having to nail things down and saying we&amp;rsquo;ll do this or that.  I&amp;rsquo;d much rather let things evolve and see what happens; hear what people want then offer it, but I guess it&amp;rsquo;s exhausting for people to explain what they want.  You need to work out what they want through some other mechanism and then communicate to them that you have just what they need, so they can find it there all laid out for them &amp;hellip; maybe &amp;hellip; :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/QP1S5Tp4-TA"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bI5sC-s1-Eo"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum and AsyncVoter kick off&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Grants and Prototyping</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/08/grants-and-prototyping/"/>
    <id>http://blog.url.com/2017/03/08/grants-and-prototyping/</id>
    <published>2017-03-08T00:00:00+00:00</published>
    <updated>2017-03-30T21:46:55+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="balance" src="/images/grants.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;So my taking one thing off my desk a day is at least keeping my desk in a steady state rather than becoming completely overwhelemed with pieces of paper.  I still haven&amp;rsquo;t thrown out my old filing cabinet, and I got caught by Slack/Email before getting down to this blog &amp;hellip; urgh.  One day at a time on the ever present moment path to enlightement :-)  Anyhow, my generally despondent feelings about applying for grants were not buoyed by us failing to get the Nelson Mandela Children&amp;rsquo;s Hospital Website and Intranet project.  I think I spent about 4 or 5 hours on that last week.  A good learning experience for Pat, Lara and myself, and certainly worth going for, as landing it would have made a huge difference to our community.  Good preparation for subsequent bids, but a bit deflating coming hot on the heels of another bid failure from the previous Thursday.  I&amp;rsquo;ve now got a couple of other micro-bids on my plate, but I fear they might be distractions from the one larger project that by itself will probably sort my financial worries.&lt;/p&gt;

&lt;p&gt;I need to have a proposal for that larger project done by this coming Monday.  No one&amp;rsquo;s jumping out of Slack or Hangouts to make me work on it, so the danger is that I get distracted and fail to generate a good proposal.  I took some steps towards avoiding that last night by sorting a basic set of estimates, and also working with InVision.  I&amp;rsquo;m thinking about a &lt;a href="https://thoughtbot.com/product-design-sprint/guide"&gt;ThoughtBot style Design Sprint&lt;/a&gt; for the client, and I notice that Thoughtbot is now recommending the &lt;a href="https://www.invisionapp.com/"&gt;InVision system&lt;/a&gt; over paper prototyping for quickly preparing UI mockups to get fast feedback from stakeholders.  I spent a little time getting a version of the AV site up in InVision and got comfortable with the system.  The key thing is creating hot spots on images to allow users to click through from one screen mockup to another.  The experience can then be shared with a &lt;a href="https://invis.io/B7ARISKJV#/222386846_Home_Screen"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not necessarily a quantum leap over doing the same sort of thing with PowerPoint or KeyNote, but the ability to drag and drop hotspots makes the InVision something that one can more quickly mock things up in.  Here you can see a few hotspots in green and the fixed nav bar that I made after just taking a few screenshots of the AV site:&lt;/p&gt;

&lt;p&gt;&lt;img alt="mockup of AV site" src="https://www.dropbox.com/s/t3b3l3q0z5poqfo/Screenshot%202017-03-08%2010.18.00.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Thoughtbot&amp;rsquo;s &lt;a href="https://github.com/thoughtbot/proteus-middleman"&gt;Proteus Middleman&lt;/a&gt; also looks like fun for things that need more complex interactions.  Having satisfied myself that I&amp;rsquo;ve got some good tools to work with for a Design Sprint, I think I pretty much have my proposal for next week.  Not sure if I need to write out a load more text - what I really want to do is pull a load more information out about the stakeholders and participants and so on.  What I will be needing to do is make a decision about CSS and JavaScript frameworks, and probably in the short term that will be Bootstrap and React, since those are the ones that I&amp;rsquo;m most comfortable with at the moment.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m left with is the focus today, which I&amp;rsquo;d love to spend just kicking around more prototypes and exploring, or second best, just responding to the PRs and comments in my GitHub notifications, relating to the various AgileVentures projects.  However there&amp;rsquo;s another small bid that I could be focused on.  Apparently today is the last day I can phone to ask questions about it, and it needs to be submitted for Friday.  It&amp;rsquo;s small change, and feels a bit like a setup for more effort to be followed by a rejection, but even a single paid project now could serve as a great incentive to sign up more AgileVentures Premium members with the benefit of being eligible for such paid projects; which may be one of those things that can keep the community growing.  Okay, I&amp;rsquo;ve talked myself into it - I&amp;rsquo;ll just make a coffee and get started.  Well, &amp;hellip;, after I&amp;rsquo;ve looked at one or two pull requests :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Uqs3P_-sWfY"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zg9s5KCFlU8"&gt;Marketing Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=o-Z8uK2H-Sk"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
