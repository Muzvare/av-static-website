<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-17T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Semi Automatic Asynchronous Planning Poker Bot</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/17/semi-automatic/"/>
    <id>http://blog.url.com/2016/11/17/semi-automatic/</id>
    <published>2016-11-17T00:00:00+00:00</published>
    <updated>2016-11-17T09:42:03+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The AsyncVoter project has been humming recently.  A lot of people interested in coding in Node, putting a React front end together.  They say that JavaScript is hot.  We&amp;rsquo;ve also had new folks come in and start to understand some of the Agile development approach, self-organise to get a series of basic RESTful endpoints in place.  All great, but I was starting to worry that our little RESTful MVP was not really making enough contact with end users.  I was getting antsy that we needed to start automating some of the tedious and error-prone parts of running asynchronous votes manually in project slack channels.&lt;/p&gt;

&lt;p&gt;I felt that slack integration was key.  We had another vote on refactoring test support code so couldn&amp;rsquo;t start another vote on slack integration if I was to follow my own guidelines of no voting on multiple stories in parallel.  I settled for moving the slack integration ticket to the top of the backlog and searching for integration mechanisms.  Several of our systems ping messages to slack, but I wanted more.  Custom slash commands for slack looked like they might work, but they had custom payloads that our RESTful endpoint wasn&amp;rsquo;t set up to process.  I didn&amp;rsquo;t like the idea of customising endpoint for slack, since it would be nice to support clients other than slack.  I also wanted to be able to have a personal bot that our community members could interact with.  I went ahead and made a &lt;a href="https://api.slack.com/bot-users"&gt;custom bot integration&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="AsyncVotingBot integration" src="https://www.dropbox.com/s/wopizsow3ortdbu/Screenshot%202016-11-17%2009.17.40.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to get put off making custom commands and integration in Slack when they paste the &amp;ldquo;Your team has reached the integration limit&amp;rdquo; all over the place.  However this doesn&amp;rsquo;t mean you can&amp;rsquo;t add more configurations on the integrations you already have, including slash commands and bots.  One thing that accelerated my progress here was &lt;a href="https://howdy.ai/botkit/"&gt;botkit&lt;/a&gt;, which allowed me to avoid diving into Slack&amp;rsquo;s real time messaging API and just get up and started super fast.  Ironically, as I put the bot together Arreche found a &lt;a href="https://github.com/Sergej-Popov/hubot-planning-poker"&gt;Planning Poker Plugin&lt;/a&gt; for hubot and was getting that set up in another channel.  There are no new things under the sun!  &lt;/p&gt;

&lt;p&gt;Just writing this blog I did a search for &amp;ldquo;slack planning poker&amp;rdquo; and found a number of things that would have been good to review and check earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://tangocode.com/2015/12/scrum-planning-poker-for-slack-part-1/&lt;/li&gt;
&lt;li&gt;https://github.com/apheleia/plan-b-ot&lt;/li&gt;
&lt;li&gt;https://github.com/nateyolles/slack-pokerbot&lt;/li&gt;
&lt;li&gt;https://github.com/paulodiovani/planning-poker-slack&lt;/li&gt;
&lt;li&gt;https://www.scrumbot.co/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I think most of these are designed for synchronous operation, i.e. assuming that the team will all be assembled in the channel at the same time.  What I&amp;rsquo;m really after is something that can maintain open votes on a number of channels and provide a mechanism for people to check what they need to vote on, and have the bot proactively prompt the channel to ensure that votes don&amp;rsquo;t get left hanging.&lt;/p&gt;

&lt;p&gt;I still had fun creating a bot and running a semi-automated asynchronous vote in the #async_voter channel:&lt;/p&gt;

&lt;p&gt;&lt;img alt="async bot announces" src="https://www.dropbox.com/s/j2vu3nwh53yt1hp/Screenshot%202016-11-17%2009.28.26.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Each team member messaged the bot independently like so:&lt;/p&gt;

&lt;p&gt;&lt;img alt="me messaging the bot" src="https://www.dropbox.com/s/obn0y3xphjn85pg/Screenshot%202016-11-17%2009.29.38.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;and then I prompted the bot to display the result:&lt;/p&gt;

&lt;p&gt;&lt;img alt="async bot results" src="https://www.dropbox.com/s/4s2pjly2u2emsaf/Screenshot%202016-11-17%2009.28.58.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the complete code for the bot:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Botkit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'botkit'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Botkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slackbot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;SLACK_BOT_TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;startRTM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hears&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'start vote'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;'direct_message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'direct_mention'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;!channel&amp;gt; NEW ASYNC VOTE on "Slack Integration" https://github.com/AgileVentures/AsyncVoter/issues/12  Please DM me with: `vote 1` (Simple), `vote 2` (Medium) or `vote 3` (Hard) - Discussion in ticket or here as you prefer. :slightly_smiling_face:'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hears&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vote'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;'direct_message'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;vote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'I received your vote: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="s1"&gt;' &amp;lt;@'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hears&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;'direct_message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'direct_mention'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'votes so far: \n\n'&lt;/span&gt;
  &lt;span class="nx"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;@'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;vote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt; voted: '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;vote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I hard coded the ticket I wanted the vote on, I ran locally without any persistence, so if my code or computer crashed then state would be lost, and the bot needed to be prompted to both start and finish the vote.  We could wail and gnash our teeth and say that we need all those features before we could push the bot live, but by eschewing them I was able to run a proof of concept of a successful vote in a channel, and I actually saved myself having to update things based on the DMs I would receive during manual asynchronous votes.  You can say, oh, it&amp;rsquo;s obvious that it would all work, but I don&amp;rsquo;t trust computers to do what I think they&amp;rsquo;ll do.  My mental model of them is so often faulty.&lt;/p&gt;

&lt;p&gt;I also spiked this without tests.  I did manually test the code in a private channel before unleashing on #async_voter, but I think this is a situation to spike, to get a tracer bullet in to see the round trip.  The danger of course would be to get drunk with power here and keep building on top of this untested code until it really is a total mess and impossible to change without breaking something.  We&amp;rsquo;ve got a nice tested RESTful core ready to start storing the data persistently.  I can run a few more test votes on other channels, and gradually refine the look and feel of the bot, ensuring along the way that it is having the positive effect on the projects and community that I am hoping for.&lt;/p&gt;

&lt;p&gt;I think this is the core of the Agile process.  Apart from remembering to reflect on your process frequently, it&amp;rsquo;s getting some sort of working code in front of the end users as often as possible.  I&amp;rsquo;m also a big fan of this semi-automated approach.  I still had to intervene to stop and start the vote, but it saved me some time compared to a full manual run.  What I really need to add next is to have the bot update the channel where the vote started when someone makes a vote.  Let&amp;rsquo;s see if I can add a little of that today &amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Automating What To Do Next</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/16/automating-what-to-do-next/"/>
    <id>http://blog.url.com/2016/11/16/automating-what-to-do-next/</id>
    <published>2016-11-16T00:00:00+00:00</published>
    <updated>2016-11-17T10:22:01+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;After the &amp;ldquo;Martin Fowler&amp;rdquo; scrum I caught up with Raphael to talk about the dynamic of the AsyncVoter project.  Raphael had been suggesting a team meeting.  Team meetings can be great.  I think if a team wants to move forward fast it&amp;rsquo;s great to get everyone in a room, and ideally match that with a shared working space that everyone can come to.  However that usually takes a lot of money to set up :-)  Although, having the team all distributed around the world might have advantages in terms of pulling in more influences and perspectives.  Of course you don&amp;rsquo;t need a shared space for a team meeting.  We&amp;rsquo;ve run them regularly on different projects at different times.  The ability to have them is a function of team members&amp;rsquo; availability.  Sometimes teams will form or dissipate based on whether there is sufficient overlap in their schedules. &lt;/p&gt;

&lt;p&gt;Part of the idea behind the AsyncVoter project is to reduce the need for team meetings.  Not that a team shouldn&amp;rsquo;t get together if they want to, but in WSO at least I&amp;rsquo;d got the sense that people weren&amp;rsquo;t enjoying the meetings, which usually involved voting on tickets in the backlog.  In LocalSupport people were just not on at the same time, or couldn&amp;rsquo;t use hangouts.  I wondered if part of desire for a team meeting was related to the issue was understanding what to do next.  In a session with Raphael off the back of the &amp;ldquo;Martin Fowler&amp;rdquo; scrum I wrote up the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Using Waffle and GitHub to work out what to do next
---------------------------------------

0) if there are any [open PRs](https://github.com/AgileVentures/AsyncVoter/pulls) then review them and if possible give feedback

1) are there any tickets "in progress" on [waffle](https://waffle.io/AgileVentures/AsyncVoter)? If you'd like to help reach out to the assigned team member to see if you can help

1) is there an estimated ticket in the ready column on waffle that I am interested in working on?
1a) yes --&amp;gt; then start work on it, pairing or not

1b) no --&amp;gt; find a ticket from the backlog (on waffle) that I'm interested in and start a vote (in a scrum, or async)

2) throughout process rather than adding new features, new elements or major refactoring to the existing ticket, freely make new tickets to go on to the backlog (on waffle)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully that was some help.  It seems transparent in my mind as a way of doing distributed Agile work, but there&amp;rsquo;s no reason why others should have that pattern in their minds.  Would be great to have one of those animated videos showing the flow.&lt;/p&gt;

&lt;p&gt;Michael and I started off following the above pattern for WSO after lunch.  We went through the open pull requests, &amp;ldquo;in progress&amp;rdquo; tickets, the &amp;ldquo;ready&amp;rdquo; column and the &amp;ldquo;estimated&amp;rdquo; column.  We have an additional column in WSO called estimated for those tickets we have voted on but yet to prioritise:&lt;/p&gt;

&lt;p&gt;&lt;img alt="WSO waffle board" src="https://www.dropbox.com/s/o2kc9kx6gimfmx0/Screenshot%202016-11-16%2009.31.25.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;As usual, I agonised about all the different things we seemed to need to get done on WSO, but ultimately followed the &amp;ldquo;drive by&amp;rdquo; or &amp;ldquo;whistle-stop&amp;rdquo; approach that says finish things that are in the rightmost columns on the board, and if there isn&amp;rsquo;t easy progress move back across the board from right to left so that columns get cleared out (assuming &amp;ldquo;done&amp;rdquo; is rightmost).  I&amp;rsquo;m a terrible person for leaving stuff lying around.  I&amp;rsquo;ve also noticed that as you clear stuff up you make more space to think about new things.  We attacked a ticket in the ready column related to AgileBot that looked simple.  Michael drove for an hour, and we got the functionality we needed, but identified &amp;ldquo;oh so many&amp;rdquo; &lt;a href="https://github.com/AgileVentures/agile-bot/issues/45"&gt;refactoring&lt;/a&gt; needs.  I&amp;rsquo;m still intimidated by the apparent brittleness of the Hubot stack we have on AgileBot.  We followed the drive-by pattern and moved on to pastures new after the &amp;ldquo;Kent Beck&amp;rdquo; scrum.&lt;/p&gt;

&lt;p&gt;Raoul had joined us in the scrum, which gave us a chance to talk about whether we were missing team meetings on WSO and whether the AsyncVoting was replacing the team meetings effectively.  Michael reflected that there were a few people who attended those meetings who weren&amp;rsquo;t around now.  Neither Michael nor Raoul seemed passionate about re-instating regular long meetings voting on tickets, and I reflected that what I really wanted was the AsyncVoter bot to kick in and keep us regularly voting on tickets.  We&amp;rsquo;ve built a little RESTful core, and I&amp;rsquo;m worried that we have to hook up fast to something that actually benefits the community.  I&amp;rsquo;ve got to get a slack bot shell working even if it&amp;rsquo;s only semi-automated!&lt;/p&gt;

&lt;p&gt;After the scrum I drove on a ticket addressing missing video links on the main WSO site.  That was fairly straightforward, and although there&amp;rsquo;s still lots of technical debt to pay down on both WSO and AgileBot, we managed to get a feature out and a bug fix in place while not making the code any worse.  In fact I think we improved the test config for AgileBot and reduced the numbers of line in the app code for both projects.   In the ideal world we&amp;rsquo;d have a bigger team of folks helping us knock off these additional refactoring tickets we keep generating.  In slack Mikael was making some great suggestions about AgileVentures letting people know what they could do to help, given the amount of time they have to spare, e.g. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;15 minutes to spare?  Review a pull request, vote on a ticket, or even start a new vote&lt;/li&gt;
&lt;li&gt;&amp;lt;30 minutes to spare? join a scrum and say hi, give us an update on what you&amp;rsquo;re doing, read a project&amp;rsquo;s documentation; observe a pairing session&lt;/li&gt;
&lt;li&gt;&amp;lt;60 minutes to spare? Start getting set up with a code base for a new project&lt;/li&gt;
&lt;li&gt;&amp;lt;90 minutes to spare? Start working on a ticket, join a pairing session&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I&amp;rsquo;d really love is a performant version of WSO that could give every user a feed of things to do with associated time commitments.  Almost like the feed of unanswered questions from StackOverflow, but a feed of chunks of work to be done on tickets, voting on things, reviewing code:&lt;/p&gt;

&lt;p&gt;&lt;img alt="StackOverflows unanswered question feed" src="https://www.dropbox.com/s/pvp2i3q3d3xkpmm/Screenshot%202016-11-16%2009.48.54.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Maybe that will be easier to achieve than the wall of pairing/meeting live stream video feeds I keep imagining.&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=aYCGCegwjvY"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qRCeF-IECaU"&gt;Pairing on AgileBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1gMF_0oALyY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tKqG-pSQcfU"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Multiple Pull Request Learning</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/15/multiple-pull-request-learning/"/>
    <id>http://blog.url.com/2016/11/15/multiple-pull-request-learning/</id>
    <published>2016-11-15T00:00:00+00:00</published>
    <updated>2016-11-16T10:12:18+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I didn&amp;rsquo;t get much solo or pair time coding today. It was a day of helping Premium member&amp;rsquo;s with bug fixes and reviewing pull requests.  The &amp;ldquo;Martin Fowler&amp;rdquo; scrum was crowded and brought up various requests for help, support and review.  I started by creating a hangout to look at Sasha&amp;rsquo;s WSO pull request to check whether YouTube videos were valid before tweeting them.  Sasha was concerned whether he&amp;rsquo;d sandboxed correctly, and I explained the &lt;code&gt;@vcr&lt;/code&gt; tag we had that meant individual VCR cassettes weren&amp;rsquo;t necessary.  More interestingly we were seeing that the tweets going out were slightly out of sync with their messages.  Sasha was investigating the issue of invalid YouTube links going into the tweets:&lt;/p&gt;

&lt;p&gt;&lt;img alt="AV tweets" src="https://www.dropbox.com/s/845stvx878zuumo/Screenshot%202016-11-15%2009.23.27.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;What we were seeing was that the tweets to post the hangout link and the finished video were both going out as soon as the hangout started.  Sometimes the person starting the hangout wouldn&amp;rsquo;t press &amp;ldquo;Start Broadcast&amp;rdquo; so the YouTube video link would lead nowhere. There was no feature test covering this twitter functionality, and so I wrote one out:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Tweeting Live Events
  As a site admin
  In order to increase participation in events
  I would like live events to generate twitter notifications

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; an event &lt;span class="s"&gt;"Scrum"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Event going live causes tweet of hangout link to be sent
    &lt;span class="nf"&gt;Given&lt;/span&gt; that the HangoutConnection has pinged to indicate the event start
    &lt;span class="nf"&gt;Then&lt;/span&gt; an appropriate tweet has been sent  

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Event stream going live causes tweet of the youtube stream to be sent
    &lt;span class="nf"&gt;Given&lt;/span&gt; that the HangoutConnection has pinged to indicate the event start
    &lt;span class="nf"&gt;And&lt;/span&gt; youtube stream has gone live
    &lt;span class="nf"&gt;Then&lt;/span&gt; an appropriate tweet has been sent &lt;span class="c"&gt;# e.g. see live stream&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Broadcast termination causes tweet of the youtube URL to be sent
    &lt;span class="nf"&gt;Given&lt;/span&gt; that the HangoutConnection has pinged to indicate the event start
    &lt;span class="nf"&gt;And&lt;/span&gt; youtube stream has gone live
    &lt;span class="nf"&gt;And&lt;/span&gt; that recording has finished
    &lt;span class="nf"&gt;Then&lt;/span&gt; an appropriate tweet has been sent &lt;span class="c"&gt;# e.g. see recording&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sasha asked the important question of did we really want to be posting all this stuff to Twitter.  I guess the motivation is that by posting hangouts, live streams and videos to Twitter then we increase the chances that people will watch out videos and join our hangouts.  Looking at my YouTube traffic report for the last year I see that 5.3% of watch time on my video account comes from Twitter:&lt;/p&gt;

&lt;p&gt;&lt;img alt="pie chart" src="https://www.dropbox.com/s/z66n3h4046zp3oi/Screenshot%202016-11-15%2009.32.54.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="pie chart legend" src="https://www.dropbox.com/s/hjdtgfld0lph838/Screenshot%202016-11-15%2009.33.30.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;compared to 60% from edX, 8.3% from Google search and 6.6% from the AV site itself.  While social media traffic to our AV site (over the last year) was dominated by Google+, Meetup, StackOverflow, Facebook and LinkedIn.  Twitter came in 8th with only 3.46%.  Now maybe this is because of broken video links, or because the feed is almost entirely automated. Either way, what we were putting out there was inconsistent, and the simplest fix was to only tweet the video link once the broadcast went live, and Sasha and I saw there was an easy check we could make for that through the YT gem.   Sasha had to run off to do a tech test; which made me think it would be awesome if tech companies would take AV participation as a tech test equivalent!&lt;/p&gt;

&lt;p&gt;After lunch I merged an &lt;a href="https://github.com/AgileVentures/LocalSupport/pull/396"&gt;exquisitely small and updated PR on LocalSupport&lt;/a&gt; from new contributor Kostas and then jumped on an AsyncVoter performance testing issue, running a profile of the AsyncVoter app running on drie and heroku.  &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;→ ab -n 50 https://async-voter-production.herokuapp.com/stories

Time per request:       381.987 [ms] (mean)

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:      257  280   7.4    284     288
Processing:    92  102   7.3    100     130
Waiting:       92  102   7.3    100     129
Total:        353  382  11.8    384     414

Percentage of the requests served within a certain time (ms)
  50%    384
  66%    385
  75%    387
  80%    389
  90%    399
  95%    401
  98%    414
  99%    414
 100%    414 (longest request)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;drie&amp;rsquo;s average was slightly faster, but the variance was much larger:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;→ ab -n 50 http://master.async_voter_production.app.push.drieapp.co/stories

Time per request:       355.193 [ms] (mean, across all concurrent requests)

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:       88   91   2.2     93      94
Processing:    92  264 474.9    100    3093
Waiting:       92  264 474.9    100    3093
Total:        180  355 475.1    193    3186

Percentage of the requests served within a certain time (ms)
  50%    193
  66%    196
  75%    220
  80%    486
  90%    881
  95%   1102
  98%   3186
  99%   3186
 100%   3186 (longest request)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was a very rough test and not really fair on drie since we&amp;rsquo;d just used both the apps, so Heroku was awake and didn&amp;rsquo;t suffer a start up cost.  But drie currently sleeps their &amp;ldquo;push&amp;rdquo; apps every 30 seconds, which explains the variance and means we would suffer the slow start up costs much more frequently.  I was able to take that data to discuss with the drie folks in our regular catch up meeting.  No sooner was that done that I was on a bug hunt with new Premium member Rose, identifying issues with seed files and cucumber tests.  After we got the BURideShare cukes green, I took a quick pass through an &lt;a href="https://github.com/strawberrycanyon/redeemify/pull/43"&gt;updated Redeemify pull request&lt;/a&gt; which had been updated really nicely.  &lt;/p&gt;

&lt;p&gt;I was trying to get a handle also on the new SHF-project, reviewing the new &lt;a href="https://github.com/AgileVentures/shf-project/blob/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; from Ashley and then joining a hangout with Ashley and Susanna who were discussing a &lt;a href="https://github.com/AgileVentures/shf-project/pull/22"&gt;pull request&lt;/a&gt;.  Susanna was keen to get it pulled in after having followed one set of advice from one mentor, but Ashley was concerned that things were getting too complex, and I was inclined to agree with her.  I offered what advice I could and then had to go to supper.  Bottom line is that it&amp;rsquo;s okay to accrue technical debt from things like using non-RESTful controller methods, but it&amp;rsquo;s good to be aware that you&amp;rsquo;re doing that and that you&amp;rsquo;ll pay a price later on.  If you&amp;rsquo;ve got to move fast right now then guidelines can be ignored, but short term speed has to be balanced against long term progress.&lt;/p&gt;

&lt;p&gt;In summary a productive day I think, although I didn&amp;rsquo;t spend much time focused on one thing.  Great to see so many active projects on AgileVentures, and so much learning arising from all the pull requests coming in.  We just need lots more of this and lots of processes in place to ensure my head doesn&amp;rsquo;t spin off trying to keep track of it all :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=kkm2KdUDuC8"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=k4UrtG6Q0vw"&gt;WebSiteOne Code Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rwc4luv4_6c"&gt;AsyncVoter Performance Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eNfi_j6BT0k"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qjfV2_DFG18"&gt;Bug Hunt on BURideShare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Banking Disruption</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/14/banking-disruption/"/>
    <id>http://blog.url.com/2016/11/14/banking-disruption/</id>
    <published>2016-11-14T00:00:00+00:00</published>
    <updated>2016-11-15T09:58:02+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My main achievement on Friday was opening a bank account for the AgileVentures charity.  This has been a long time coming.  I originally started with Lloyds bank and spent an hour or so on the phone explaining the whole concept of &amp;ldquo;in context learning on charity IT projects&amp;rdquo; to them, before receiving a lot of self-contradictory paperwork that they didn&amp;rsquo;t respond to my email queries about.  The need for a bank account has become more pressing as we start to have a non-trivial Premium payments coming through Stripe.  It&amp;rsquo;s still a small trickle, but with our new sponsor drie, we&amp;rsquo;re on the road to becoming sustainable early next year if we can keep up our current rate of growth.  That might make it sound like we can just wait for that growth to happen, but every little bit of growth requires a lot of hard graft on my part, as well as lots of generous donations of time and effort from our AV mentors.  I also have to make sure that in the process of bringing in new sponsors and premium members that we keep supporting our existing sponsors and premium members.  Simplify, Eliminate, Delegate, Automate!&lt;/p&gt;

&lt;p&gt;Having given up on making progress with Lloyds, I heard that the new UK bank &amp;ldquo;Metro&amp;rdquo; had a reasonable charity account, and that some other local charities had got set up with them before official UK charity status approval (which we are still waiting for - no updates since July &amp;hellip;), and seeing their neat, open-plan branch in my local town centre, and their modern looking website I thought I&amp;rsquo;d give them a try.  I&amp;rsquo;ve also received advice that the Coop bank and Triodos were good options.  Metro had an email link for charities and I emailed them and got an email back within a day.  Responsivity by email is a big plus. Looking back I probably should have mailed all three possible banks to see how fast a response came. I did notice that with Metro I was emailing a specific person at rather than a &lt;code&gt;charities@metrobank.co.uk&lt;/code&gt;, but I pressed on.  We needed to provide the charity constitution, signed minutes of a trustees meeting agreeing to open the bank account, various ID for the bank account signatories, and fill out an application form.  &lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/8f0kxo94ckkaz3d/Screenshot%202016-11-14%2009.25.52.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Over the course of several weeks we assembled all the different components and sent them off to my contact at the head office.  We had a good back and forth in email with my contact checking electronic copies of the documents before I mailed in signed versions.  It seemed to be going well.  I got the last package of documents together and sent them of, paying extra for a verified delivery.  Then nothing.  No communication.  My emails unanswered.  My contact also had a cellphone number on their email signature.  I texted, I left messages, nothing.  After a few days I started calling the head office and trying to get them to contact me.  It turned out that my contact was on annual leave.  Fair enough, although it would have been nice to be getting annual leave notification messages against the emails I was sending.  I was starting to get frustrated.&lt;/p&gt;

&lt;p&gt;It turns out that another person was trying to contact me via email, but they had my email address mis-spelt from the operators I&amp;rsquo;d been speaking to when I was calling the bank.  Eventually we got that figured out, but I didn&amp;rsquo;t manage to make a connection with this person.  They kept on asking me to send in additional paperwork that I believed I had already sent.  I held off as presumably my original contact would soon be back from annual leave and could sort it out.  It stretched out and it seemed that annual leave had become leaving.  I finally managed to speak to the new contact in real time on the phone and established that we had sent in all the paperwork, but that we would have to go into the bank to confirm our identities.&lt;/p&gt;

&lt;p&gt;My plan to save time by doing this all online had backfired.  I&amp;rsquo;d been trying to prefer email but that had caused delays.  Finally on Friday Rachel and I went into the bank and got our identities confirmed, and started working through the other paperwork.  Ultimately it took over 2 hours, first because the bank was saying the accounts they provided couldn&amp;rsquo;t support the detailed finance policy we&amp;rsquo;d put in the minutes.  I was fuming.  I called up the other trustees and on speaker phone allowed the bank manager to hear their approval for an account without detailed support for the finance policy which we would be implementing ourselves rather than relying on bank restrictions.&lt;/p&gt;

&lt;p&gt;That done the bank manager had to re-type the entire PDF application form that I had filled out and sent in.  I was hoping that a recently setup modern bank would be just the sort to avoid this sort of ridiculousness.  Rachel and I caught up and I supported the AV slack channels in the background as we ground through the process.  We were just about to give up and leave when it was all done.  We got bank cards, and I got the online banking hooked up, and the all important sort code and account number that would allow me to issue new invoices and sort out the AgileVentures finances.&lt;/p&gt;

&lt;p&gt;I still like what MetroBank is trying to do.  I think the UK banking industry is ripe for disruption.  Maybe it being difficult to open an account is in some sense a feature.  Convoluted and unnecessary steps discourage all those but the truly serious.  Maybe one day the decentralised cryptocurrencies will replace all this, but I&amp;rsquo;m not holding my breath &amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Naming and Cucumber</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/11/naming-and-cucumber/"/>
    <id>http://blog.url.com/2016/11/11/naming-and-cucumber/</id>
    <published>2016-11-11T00:00:00+00:00</published>
    <updated>2016-11-17T09:42:37+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In a series of disjointed solo sessions I managed to fix the bug whereby manual hangout edits were making subsequent events live.  Michael and I had wrapped this bug in a cucumber scenario the day previously.  The manual hangout edit interface looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="manual hangout edit interface" src="https://www.dropbox.com/s/4xbad7ddniesyo7/Screenshot%202016-10-18%2017.00.20.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Originally the manual edit had not worked at all on repeating events with lots of history; which had been a big problem when the automatic updates failed for two weeks while the Google Hangout API was in flux.  We&amp;rsquo;d got manual updates working on recurring events by adjusting the way that an event searched for recent hangouts, replacing a sort and filter on &lt;code&gt;created_at&lt;/code&gt; with one on &lt;code&gt;updated_at&lt;/code&gt;.  The problem had been that with a long series of event instances, manual updates were clobbering old ones started by the same user, and so the &lt;code&gt;created_at&lt;/code&gt; date would lag very far behind the &lt;code&gt;updated_at&lt;/code&gt; date.  The recent_hangouts method became:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recent_hangouts&lt;/span&gt;
    &lt;span class="n"&gt;event_instances&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated_at BETWEEN ? AND ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginning_of_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_of_day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;updated_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;d also added a flag on the EventInstance model to indicate whether an EventInstance had been manually set.  This manual setting meant that subsequent Events would also report themselves live, as they were all sharing a single EventInstance.  I considered briefly switching the boolean flag to a datetime, but demurred and adjusted the way we create the unique id for manually edited hangout EventInstances.  I wanted to ensure that every manual edit was recorded as a separate EventInstance instance!  I added a SecureRandom unique id to the EventInstancesHelper method that gets used during a manual update:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'securerandom'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;EventInstancesHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_event_instance_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'00'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uuid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By itself this didn&amp;rsquo;t fix the problem, so I also adjusted the &lt;code&gt;recent_hangouts&lt;/code&gt; method further such that it only looked in a time window starting from the same time on the previous day, plus the duration of the event:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recent_hangouts&lt;/span&gt;
    &lt;span class="n"&gt;event_instances&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated_at BETWEEN ? AND ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_of_day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;updated_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cukes went green and I had to fix up a few specs for the EventInstanceHelper and the Event class.  I wasn&amp;rsquo;t sure if the fully unique id was actually necessary, but when I saw the specs for EventInstanceHelper that were saying a unique id should be returned, I felt I really wanted to stick with the change.  Arguably it could be the subject of a completely separate pull request, driven by a different cucumber scenario.  I&amp;rsquo;ve been being harsh with the AsyncVoter folks to keep out any functionality not related to the feature being worked on.  It&amp;rsquo;s easy to give myself slack when I&amp;rsquo;m on the other side of the barrier; but in my defence this is a bug fix, and I&amp;rsquo;m trying to make sure we aren&amp;rsquo;t losing valuable data about user activity.  I did try to get the feature to wrap this with limited success.  In the process I did do major refactoring of the cukes, which relates to a &lt;a href="https://github.com/AgileVentures/LocalSupport/pull/391"&gt;PR from John on LocalSupport&lt;/a&gt; where he&amp;rsquo;s using a lot of nested steps, which I&amp;rsquo;m not such a big fan of.&lt;/p&gt;

&lt;p&gt;On WSO the editing a hangout url on a repeating event cuke scenario had gotten really long:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL on repeating event and ensure event stays live
    &lt;span class="err"&gt;Given the date is "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="c"&gt;# manually setting the hangout link&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I open the Edit URL controls
    &lt;span class="err"&gt;And I fill in "hangout_url" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click on the Save button
    &lt;span class="c"&gt;# checking that event shows live and that link&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="err"&gt;Then I should see link "Join now" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="c"&gt;# checking that the event stays live for the specified duration (as no pings coming from hangout plugin)&lt;/span&gt;
    &lt;span class="err"&gt;And I jump to one minute before the end of the event at "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="err"&gt;Then I should see link "Join now" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="c"&gt;# Check that the event the following day is not automatically taken live&lt;/span&gt;
    &lt;span class="err"&gt;And I jump to one minute before the end of the event at "2014-02-07 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt; &lt;span class="c"&gt;# actually a week later&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"This event is now live!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The previous day with Michael I&amp;rsquo;d inserted comments about what each section was doing.  I resolved to turn those into steps.  The quick and dirty path would be to take each set of steps and turn them into nested steps, but the approach I prefer is to make new steps that are collections of ruby statements to avoid multiple levels of redirection.  The steps I generated yesterday were:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I manually set a hangout link for event "([^"]*)"$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vi"&gt;@hangout_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0'&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="sx"&gt;%q{$('li[role="edit_hoa_link"] &amp;gt; a').trigger('click')}&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s1"&gt;'hangout_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sx"&gt;%q{input[id="hoa_link_save"]}&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" is not live the following day$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;have_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This event is now live!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which allowed that long convoluted scenario above to be boiled down to the following:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL on repeating event and ensure event stays live
    &lt;span class="err"&gt;Given the date is "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I manually set a hangout link for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt; shows live for that hangout link for the event duration
    &lt;span class="nf"&gt;And&lt;/span&gt; &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt; is not live the following day
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe I&amp;rsquo;m crazy, not re-using the steps, but my goal is to make it transparent for me in the future (and other developers), to get from the English description straight to the description at the Ruby/RSpec/Capybara level.  What I find again and again in WSO and LS, where the steps are deeply nested, is that I get tripped up because the English descriptions can be slightly misleading.  This is actually a facet of a more general problem for coding, in that wherever an abstraction (e.g. cuke step, or method name, or API interface) fails to accurately reflect what&amp;rsquo;s going on under the hood, you can easily be misled.  Of course it all comes back to humans.  What&amp;rsquo;s transparently clear for one person might not be for another.  But take a look at this background step from the same Cuke file:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="err"&gt;And the following event instances exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;dat&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;d created this to replace the original setup step that referred to hangouts (for which there was no corresponding domain model). The original setup step had also scarily used RSpec factories that were shared with the specs and did a fair amount of data massaging in the process.  Having made the change we realised that to keep things working we would also need a chunk of complex participant data.  It was trivial to adjust our new background step to add that data, but now that was hidden from someone working at the level of the feature file, so we adjusted our step name as follows:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="err"&gt;And the following event instances (with default participants) exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;dat&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Too much perhaps?  But the intention is to give someone else who wants to use that step (or method) a heads up about what&amp;rsquo;s going on under the hood.  The ruby contents of the cuke steps above are a bit long and need some DRYing out, but I think I&amp;rsquo;d rather have them DRYed out into other ruby methods that are well named.  There&amp;rsquo;s perhaps almost too much room for nuance with the English descriptions of pure Cucumber steps.  So for example the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;might become&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="n"&gt;check_event_live&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;check_event_live&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_event_live&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps that&amp;rsquo;s no different to:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Then(/^"([^"]*)" shows live for that hangout link for the event duration$/) do |event_name|
  @event = Event.find_by_name(event_name)
  time = Time.parse(@jump_date) + event.duration.minutes - 1.minute
  step 'I check event is live '
  Delorean.time_travel_to(time)
  check_live(event)
end

Then(/^I check event is live$/) do
  visit event_path(@event)
  expect(page).to have_link('Join now', href: @hangout_url)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which allows that nested step to be re-used in other cucumber scenarios, but the debugging support for nested steps is not as good in my experience.  Maybe this is just bike-shedding (i.e. focusing on trivialities).  The big-picture critical thing seems likely to be a constant general refining to a consistent domain model and methods/steps that are not too long and not too short and do a best effort to have a description that doesn&amp;rsquo;t leave too many surprises under the hood.&lt;/p&gt;

&lt;p&gt;I made sure that the refactored cukes did actually break (when the app functionality was removed), which took a combination of adjusting the Event#recent&lt;em&gt;hangouts method back to use `created&lt;/em&gt;at&lt;code&gt;AND removing the secure random id from the EventsInstanceHelper, indicating that both were needed to get the desired behaviour at the user level; so I didn&amp;#39;t need to feel a total hypocrite for pushing on the AsyncVoter folks to remove all extraneous code :-)  That didn&amp;#39;t stop me waking up in the middle of the night thinking, &amp;quot;we don&amp;#39;t even need to search for recent_hangouts!&amp;quot; - we just grab the latest one, reverse sorted by updated_at, and check if it&amp;#39;s live, can&amp;#39;t we?  That&lt;/code&gt;recent_hangouts` method is used nowhere else in the code base.  The method name makes no sense in terms of what we want really.  What we want to know is whether the most recently updated event instance is still live, isn&amp;rsquo;t it?  More refactoring awaits!&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QMvJADMRpo0"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ntvRINA66UM"&gt;Solo on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xM-QeSOiHqA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Mixing and Matching Guidelines</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/10/mix-and-match/"/>
    <id>http://blog.url.com/2016/11/10/mix-and-match/</id>
    <published>2016-11-10T00:00:00+00:00</published>
    <updated>2016-11-11T10:17:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was another mix of the AsyncVoter and WebSiteOne projects today.  Overnight Arreche had come up with a &lt;a href="https://github.com/AgileVentures/AsyncVoter/compare/master...arreche:7_cast_vote_feature_mvp"&gt;slimmed down version&lt;/a&gt; of Raphael&amp;rsquo;s &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/50"&gt;pull request&lt;/a&gt; on vote casting, so I focused on João&amp;rsquo;s &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/45"&gt;pull request&lt;/a&gt; for listing currently voting stories.   I really wanted to get something merged in as we&amp;rsquo;d had these two pull requests open for five days or so, and I also wanted to practice deploying a new feature onto the drie servers.&lt;/p&gt;

&lt;p&gt;The async_voter slack channel was active and I was conflicted about posting comments in Github and in slack.  João showed up and said he had some time for programming and what should he change.  I suggested he take out the sorting functionality that wasn&amp;rsquo;t covered by the acceptance test and he got right to it.  My original plan was that there might have been some AsyncVoter folks in the &amp;ldquo;Martin Fowler&amp;rdquo; scrum, but they weren&amp;rsquo;t and I ended up helping out some Premiums fix up issues on the LocalSupport and WebSiteOne projects.&lt;/p&gt;

&lt;p&gt;In the meantime João had pushed changes and we had a slimmed down pull request.  I still wasn&amp;rsquo;t entirely sure about the mapping we had set up from &lt;code&gt;GET /stories?state=active&lt;/code&gt; to search for &lt;code&gt;size=0&lt;/code&gt; stories.  João was very keen on the state=active flag and seemed to be mollifying me by saying that &lt;code&gt;GET /stories?size=0&lt;/code&gt; would also work.  I investigated and found that it didn&amp;rsquo;t quite and that &lt;code&gt;GET /stories?state=voting&lt;/code&gt; or indeed any other state would return all the size 0 stories.&lt;/p&gt;

&lt;p&gt;I pointed that out to João not sure if he was in a position to fix it up.  I started adjusting the code locally and made my own &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/57"&gt;pull request&lt;/a&gt;.  In parallel João made further updates.  Perhaps we should have been pairing, but he was commuting.  Maybe I should have just gone to lunch, but I was pleasantly surprised to make some good progress on my own branch.  In particular discovering a &lt;a href="http://jaketrent.com/post/run-single-mocha-test/"&gt;method to specify running a single test in a mocha suite&lt;/a&gt;, where you insert a &lt;code&gt;.only&lt;/code&gt; into the test you want to focus on:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"found one active"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"found one active"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you actually don&amp;rsquo;t have to make any changes to the command line argument.  Making the above change, I can run &lt;code&gt;npm test&lt;/code&gt; and I get precisely the focus I want.  Eat your heart out RSpec and Cucumber where I have to construct commands like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;be cucumber features/hangouts/edit_hangout_url.feature:31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which get derailed when the line numbers change.  So anyhow, on reflection I&amp;rsquo;m glad I did spend some time tinkering with my own PR.  Contrary to previous experiences, node seemed stable and I was able to jump from Cucumber acceptance tests to Mocha Unit tests and make good progress.  The mocking error messages were not as precise as I would have liked, but I think that may be something we can improve.&lt;/p&gt;

&lt;p&gt;Of course I then had the quandary of whether to go with my PR or with João&amp;rsquo;s new one.  He had now filled out the filtering functionality and added checks that only &lt;code&gt;state=active&lt;/code&gt; would return size 0 stories.  I was now in a hangout with Michael who was asking good questions about what all this would do.  I started the server and used POSTman to hit the new endpoints.  The &lt;code&gt;state=active&lt;/code&gt; filtering was working, but not the general filtering.  I think there were key conversion issues or something.  The key point here was the the general filtering functionality wasn&amp;rsquo;t being hit by any tests.&lt;/p&gt;

&lt;p&gt;Different guidelines were as usual wrestling in my head.  My concerns were as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;was locking to size=0 to represent currently voted stories going to bite us when we decided we needed size=0 stories in the future?&lt;/li&gt;
&lt;li&gt;Wasn&amp;rsquo;t it bad to have functionality not covered by tests, and particularly functionality unrelated to the feature the PR was addressing?&lt;/li&gt;
&lt;li&gt;Should we be adjusting the story model to have a state that could be active, to reflect the domain language that João was keen to use?&lt;/li&gt;
&lt;li&gt;Shouldn&amp;rsquo;t we be going with my simplifying assumption that there is only ever a single story to vote on (for the time being)?&lt;/li&gt;
&lt;li&gt;Shouldn&amp;rsquo;t we be sanitising inputs coming over the wire? although this is search rather than edit so &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted to do the right thing for the project, and also not offend João who had been putting in lots of great work.  All credit to him and the others who&amp;rsquo;ve got the Cucumber and Mocha set up all working so smoothly, along with a clean core of app code.  &lt;/p&gt;

&lt;p&gt;I resolved to go with João&amp;rsquo;s PR but I made some tweaks.  I stuck with João&amp;rsquo;s preferred &lt;code&gt;state=active&lt;/code&gt; but pulled out the generic filtering code because it didn&amp;rsquo;t work, and wasn&amp;rsquo;t covered by the tests.  So the core logic in the model class is:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;filterObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'state'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'state'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;filterObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'size'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Story'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filterObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My two biggest concerns remaining were that now the &lt;code&gt;findBy&lt;/code&gt; method was named incorrectly and that we had quite a lot of mockup setup replication in the mocha test suite for the story model.  I created refactoring tickets for these two and got the PR merged in.  From a day&amp;rsquo;s distance I think it was a reasonable compromise.  Let&amp;rsquo;s see how we feel in a week and a month and a year!&lt;/p&gt;

&lt;p&gt;This also allowed me to try pushing a new feature to the drie server.  This failed with a 502 and super fast feedback from the drie team allowed us to identify that as a node versioning issue which we can hopefully fix today.  It also highlighted the need for a staging server as I had broken production in the process.  Although that&amp;rsquo;s no disaster here as we only have a single test deploy that no one&amp;rsquo;s using yet so it&amp;rsquo;s not really &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Michael and I snapped in some progress on WebSiteOne at the end of the session, finally wrapping in a cucumber test the bug we had been hunting the previous day.  Lots of refactoring imperative Cucumber steps to declarative needed there.  It&amp;rsquo;s an interesting perspective; maintaining and evolving a Rails project, while shepherding the creation of a new Node micro service.  Stay tuned for more hair raising tails :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rVfDq6YB9D4"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dfmTQuYbwVU"&gt;WebsiteOne and LocalSupport Triage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W1GPjCwBzNc"&gt;Pairing on AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DlS0zvtKqhU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=My04-8l_INc"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zb29w0BwtEw"&gt;More Pairing on WebSiteOne &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
