<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-10-28T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Opportunity in Disguise</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/28/opportunity-in-disguise/"/>
    <id>http://blog.url.com/2016/10/28/opportunity-in-disguise/</id>
    <published>2016-10-28T01:00:00+01:00</published>
    <updated>2016-10-28T21:31:37+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The new plan payment end points are winding their way to production, and I stepped back to the AsyncVoter code (which was now green) following a mob session with Michael, Raphael and Alex yesterday.  I wasn&amp;rsquo;t there so apologies if I left anyone out.  I know Joao, Junior and Chaiwa are following things closely.  The clear difference for me between a Node/Express app and a Ruby/Sinatra app is that I can pretty much fix any problem very fast in the latter.  I&amp;rsquo;ve done Node/Express here and there over the years, but nothing like the volume I have in Ruby.  Raphael also talked about things being slow going in their session, but they&amp;rsquo;d got everything green.  I think ultimately it had come down to making sure the correct database setup was going on in the &lt;code&gt;server.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mongoose'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mongodb://localhost/asyncvoter'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'connection error:'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// we're connected!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Connected correctly to server"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/2f42dee39c727cd5b6e849ac955a818bc0faa6ae/bin/server.js"&gt;https://github.com/AgileVentures/AsyncVoter/blob/master/bin/server.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the kind of thing where I would benefit from some &lt;a href="http://philipmjohnson.org/essays/athletic-software-engineering.html"&gt;athletic&lt;/a&gt; coding repetitions (reps).  I used to do those a lot with the students at Makers Academy, following from Philip Johnson&amp;rsquo;s Athletic Software Engineering concept, where you repeat the same exercise over and over, building in muscle memory and getting your task completion time down.  So for example I&amp;rsquo;ve repped generating a Sinatra app many many times, and a PORO domain model with RSpec hundreds of times.  We can also refer to these things as coding kata.  Often kata are just in the plain programming domain, but I think there&amp;rsquo;s a lot to be said for &amp;ldquo;infrastructure&amp;rdquo; kata that involve repeatedly building a Sinatra or Express app from scratch.  You encounter all the setup errors outside the context of trying to get something else done, which makes them less stressful.&lt;/p&gt;

&lt;p&gt;Anyway, it has been a year or so since I was repping on node/express so it was great the others had sorted the database issues in a mob session while I was kicking out the premium plan payment endpoints for our Rails app in a solo session.  In the review session I pulled the code onto my machine and everything pretty much worked except a Rails app I still had running on port 3000 blocked the tests, leading to a new &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/15"&gt;issue&lt;/a&gt; for the project.  So we got the PR patched up and our first feature completed for AsyncVoter.  While we were waiting for the CI to pass we got a couple of general discussion points out of the way.&lt;/p&gt;

&lt;p&gt;One was the domain model terminology, where we were thinking to rename &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/16"&gt;&amp;ldquo;Stories&amp;rdquo; to &amp;ldquo;Ballots&amp;rdquo;&lt;/a&gt;.  I dashed off a quick domain model:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users cast individual Votes, on Ballots that concern Stories. Stories are uniquely identified by a URL, and will often have a Name, which is also the Name of the Ballot. The result of a Ballot will be when all the Users&amp;rsquo; votes are the same, e.g. all 1s, all 2s, or all 3s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I proposed that we didn&amp;rsquo;t need explicit User or Story domain entities at this point, and that going simplicity first, we could probably get away with a single Ballot having a set of associated Votes.  We&amp;rsquo;ll see if that gets adopted.  The other question was the cool Uncle Bob architecture that Joao had put in the spike where all the code was organised by domain entities.  It had the downside that some folks had been confused by the lack of a &amp;ldquo;standard&amp;rdquo; Express structure, with separate folders for models, controllers etc.  We opened a &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/17"&gt;ticket&lt;/a&gt; for that.  It seemed like people didn&amp;rsquo;t care too much either way and we agreed that if anyone felt strongly enough they could do a PR to adjust the structure, but do it before the project got too big.&lt;/p&gt;

&lt;p&gt;So, lovely green shoots in the AsyncVoter project, although it may still be a little time before the logistical overhead of running asynchronous votes for other projects will actually be reduced.  Still, no crazy rush now that we&amp;rsquo;re rotating who&amp;rsquo;s running the asynchronous votes in LocalSupport and WebSiteOne.  In the process we&amp;rsquo;re familiarising everyone with the process of asynchronous voting.  Avoiding the synchronous meetings that no one seems to enjoy; providing a lightweight mechanism for people to get involved in projects; leaving a visible trail of discussion in the Slack channels so the project activity is clearly visible.  All good really.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s in stark contrast to the ongoing absence of the Google Hangouts API.  The switch to YouTube Live does not prevent us from starting Hangouts on Air, which we can still do, we just can&amp;rsquo;t seem to do it programmatically.   There has been no response from Google in the three days since I posted my &lt;a href="http://stackoverflow.com/questions/40233393/start-a-hangout-on-air-button-for-youtube-livestreaming-api"&gt;SO question&lt;/a&gt; and reading the YouTube live documentation it seems like it&amp;rsquo;s focused on supporting those who want to start a video stream from their desktop, not start a Hangout where multiple people can congregate to collaborate.&lt;/p&gt;

&lt;p&gt;We started to brainstorm the alternatives: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.twitch.tv/"&gt;twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://agileventures.slack.com/apps/A0F827L3S-room"&gt;room (for slack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(other slack meeting tools - &lt;a href="https://agileventures.slack.com/apps/search?q=video"&gt;I see 20+&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zoom.us"&gt;zoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gotomeeting.co.uk/"&gt;gotomeeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.livecoding.tv/developer/applications/webrt"&gt;live coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build our own - &lt;a href="https://webrtc.org/"&gt;WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to evaluate each of these in terms of what we need for AgileVentures, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;telemetry (plugins)&lt;/li&gt;
&lt;li&gt;stability&lt;/li&gt;
&lt;li&gt;recordable&lt;/li&gt;
&lt;li&gt;access via URL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our AgileVentures Karma system is based on giving people credit for attending events, so we need telemetry.  The whole thing has to be stable, as it is difficult enough to get people together in a hangout.  When the technology is dodgy it&amp;rsquo;s a huge barrier, and we&amp;rsquo;re also committed to recording as part of our open development philosophy.  Also having a URL that will take you to the video conference makes it hugely easy to share with others to get them into the conference.  &lt;/p&gt;

&lt;p&gt;Maybe we will have to end up compromising on one or all of these in order to continue.  At the moment we are limping along manually creating hangouts via the live events interface.  We are bleeding in terms of MOOC students not having support to easily creating pairing hangouts, and people finding it harder to join scrums.  The problems can be itemised as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;manual work for scrum masters (posting links to slack etc.)&lt;/li&gt;
&lt;li&gt;no telemetry from hangouts (within Google button API our plugin no longer communicates to server)&lt;/li&gt;
&lt;li&gt;descriptions of how to start pairing sessions now incorrect - MOOC folks and many projects folks confused - unable to connect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We came up with the following short term solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adjust WSO functionality to better support manual adding of link to hangout (?) (URL) &amp;ndash;&amp;gt; ping slack (reduces some manual work)&lt;/li&gt;
&lt;li&gt;adjust WSO functionality to stay alive without telemetry&lt;/li&gt;
&lt;li&gt;add instructions for copying across URL&lt;/li&gt;
&lt;li&gt;hangout plugin - add ability to specific data to send telemetry back (will only work for people who previously ran hangout with plugin) &amp;ndash;&amp;gt; no way to now inject hangout plugins?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and also had a few out of the box ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on asynchronous stuff? e.g. scrums in text chat in slack? or something&lt;/li&gt;
&lt;li&gt;revenue stream from ads on youtube&lt;/li&gt;
&lt;li&gt;can we use the live event interface to start a hangout with selenium or something?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It felt good to be able to review all the issues in a group.  The sensible thing seemed to be to focus on the first three items in the short term solutions above.  Good support for manual URL addition would not tie us to Hangouts, which of course might completely disappear.  If only they were open source!  The key fundamental is really to be able to share a URL to the video conference through the various media that people are connected with.   I&amp;rsquo;ll try and get to the manual URL hangout fixes today, and then next week we can keep evaluating all the alternatives.  It might also be time to focus on allowing people to start hangouts from Slack where the activity is watchable, repeatable and copyable.  It offers a much more lightweight learning mechanism than a web interface.  Real time text chat really has the huge advantage over the web that you can immediately ask folks how they did anything, whether that&amp;rsquo;s starting or voting in an Asynchronous vote, how they started a hangout etc &amp;hellip;  &lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s been so great to see this week is the AgileVentures members working hard to get round the problems, helping each other, brainstorming solutions.  Maybe this truly is an opportunity in disguise &amp;hellip; Okay, time to code! &lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyLL5_QxLkU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zmt8FjqMTLE"&gt;AsyncVoter Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyLL5_QxLkU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Red Green Refactor (Against the Clock)</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/27/red-green-refactor/"/>
    <id>http://blog.url.com/2016/10/27/red-green-refactor/</id>
    <published>2016-10-27T01:00:00+01:00</published>
    <updated>2016-10-28T21:25:41+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;While the AsynVoter folks got down to mobbing on the first feature I got on with some solo-coding on payment end points for the new intermediate level Premium payment plans.  I did want to try out &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock"&gt;ruby-stripe-mock&lt;/a&gt; because while I do like the absolutist cover and re-recordability of the vcr/puffing-billy sandbox, the number of additional files that need to be checked in make associated pull requests hard to decipher.  Case in point, the &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1366"&gt;pull request&lt;/a&gt; generated from the day&amp;rsquo;s solo-coding consists of 132 files, of which only about 10 are files that I edited.  It would be great if branch comparisons on GitHub and RubyMine could filter out auto-generated files.&lt;/p&gt;

&lt;p&gt;Under the circumstances of having only a little time and wanting to move at speed, I stuck with our sandboxes.  I just needed these endpoints up to see if anyone would actually sponsor us at these new price points for these new offerings.  Maybe &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock"&gt;ruby-stripe-mock&lt;/a&gt; would be a simple win, but I was still unsure about whether it would really sandbox the browser interaction.  My questions to the stripe-ruby-mock community in Gitter and and GitHub issues had not gained me much clarity.  I knew the CraftAcademy folks had had &lt;a href="https://medium.com/craft-academy/keeping-it-simple-3e7d9b186015#.cvnpccp1f"&gt;some success with the gem&lt;/a&gt;, but still I had less than an hour.&lt;/p&gt;

&lt;p&gt;I went straight for new feature tests which were almost clones of existing ones:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Sign up for premium mob membership
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"/charges/new?plan=premiummob"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Sign Me Up For Premium!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Sign Me Up For Premium Mob!"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium mob
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium MOB Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; The user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium MOB"&lt;/span&gt; email
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I now had four like this - ripe for a &amp;ldquo;Scenario Outline&amp;rdquo; to DRY things out, but it was not time to refactor yet.  Throughout this session I think I identified a critical point about when to refactor.  Don&amp;rsquo;t refactor when you&amp;rsquo;re in the process of creating new tests or new code.  Refactor when you have new tests and code in place and when the tests are green.  Old advice but is blazed bright on my cortex.  Also every time you DRY things out you introduce a dependency, you reduce an axis of freedom that might be needed by the next incoming feature.  Cautious with that DRYing and refactoring.&lt;/p&gt;

&lt;p&gt;I commented out the feature for the f2f plan and focused on getting this single mob payment end point.  First stop was the incorrectly named &lt;code&gt;charges_controller&lt;/code&gt; (who named it? me).  I knew now that really this should be the subscription (or possibly plan?) controller.  Refactor that later.  I adjusted the new method to support a premiummob template:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s1"&gt;'premiummob'&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;premiummob?&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;premiumplus?&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and added a private method:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;premiummob?&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiummob'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I noticed that our private &lt;code&gt;update_user_to_premium&lt;/code&gt; was now out of date, and actually had an unidentified bug that meant new PremiumPlus users would not be represented properly.  I could fix that by creating a &lt;code&gt;plan_class&lt;/code&gt; method that would correctly identify the plan type.  &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plan_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plan_class&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;PremiumMob&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumob'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;PremiumPlus&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt;
    &lt;span class="no"&gt;Premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Really I wanted my feature tests to include some mechanism to check that the correct plan type was being stored in the database, but that would require bleeding into another feature which would be displaying the plan types correctly for users.  Actually we did have that, but it only works for logged in members, and we still aren&amp;rsquo;t requiring login for these payment end points.  I didn&amp;rsquo;t want problems with account sign up preventing people from sign up, although now we have 20+ people signed up that starts to look a bit paranoid.  I can probably add that restriction in and get feature tests that are not too tied to the database, but I chose not to get side-tracked by that right there and then.&lt;/p&gt;

&lt;p&gt;I updated the various view templates and ran the feature test. It was failing on the email step.  I needed to support more acknowledgement email templates.  I let the code expand again:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plan_name&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'premium_mob'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiummob'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'premium_plus'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt;
    &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_acknowledgement_email&lt;/span&gt;
    &lt;span class="no"&gt;Mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acknowledgement_email_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;deliver_now&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;acknowledgement_email_template&lt;/span&gt;
    &lt;span class="s2"&gt;"send_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;plan_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_payment_complete"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There were certainly opportunities for refactoring, but I ignored them and pushed on to get the acceptance green.  I was a little disturbed that my creation of a new class &lt;code&gt;PremiumMob&lt;/code&gt; was not throwing an error.  I turned aside to create specs for that:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe PremiumMob, type: :model do
  let(:type) { 'PremiumMob' }
  it_behaves_like 'a subscription'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And knowing that implementing the next end point would highlight the places for refactoring I did the same as above for the PremiumF2F plan.  I now had the two key endpoints that I wanted, and I could refactor with some security.  I actually started the refactoring in the cucumber steps (see the PR for details) and held off against using the Scenario Outline as the RubyMine automated refactoring was failing and I had 20 minutes left.  The cucumber steps were cleaner and I focused my attention on the charges controller.  I was feeling uncomfortable about these &lt;code&gt;plan_name&lt;/code&gt; and &lt;code&gt;plan_class&lt;/code&gt; methods that were effectively case statements.  I needed to keep &lt;code&gt;plan_name&lt;/code&gt; as it was doing a not easily automatable mapping from the ids of the plans in the Stripe side to the snake_case versions in use on the Rails side:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plan_name&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'premium_mob'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiummob'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'premium_f2f'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumf2f'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'premium_plus'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt;
    &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at this now I see I can refactor this further by replacing it with a hash data structure, but yesterday I used it to DRY out the &lt;code&gt;new&lt;/code&gt; action:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="n"&gt;plan_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;code&gt;plan_class&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plan_class&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;PremiumF2F&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premiumf2f'&lt;/span&gt;
    &lt;span class="n"&gt;plan_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;camelcase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there&amp;rsquo;s an exceptional case in the above to handle some Rails Inflector screwiness that comes from the number 2 in the &lt;code&gt;PremiumF2F&lt;/code&gt; class, which itself has to sit in a file named &lt;code&gt;premium_f2_f.rb&lt;/code&gt; file to be auto-loaded.  I think I need all the different subscription types (&lt;code&gt;Premium&lt;/code&gt;, &lt;code&gt;PremiumF2F&lt;/code&gt;, &lt;code&gt;PremiumPlus&lt;/code&gt;) to sit in their own module to avoid the funky file name.  Not sure if that will remove the exceptional case from &lt;code&gt;plan_class&lt;/code&gt;.  I was out of time, but the tests were green and I&amp;rsquo;d DRYed out some of the nastiest dampness from the charges controller.  Lots more to get done, but aside from code navel gazing, the key thing here is whether the new endpoints would generate any revenue.  In a quick mental calculation I worked out we would need 10 F2F sign ups, 20 Mob sign ups and another 40 premiums to make AgileVentures truly stable. Wonder if we can do that before Xmas?  That really would be an awesome Yuletide gift!  &lt;/p&gt;

&lt;p&gt;Even if we don&amp;rsquo;t, I&amp;rsquo;ve highlighted a core insight for myself about an old truth.  Red, Green and THEN refactor :-) Looking back over the years there&amp;rsquo;s so much trouble that&amp;rsquo;s come from refactoring too early.  Maybe leave the refactoring till the acceptance test is green, not every time a unit test passes.  Let the code expand first, and then contract when it&amp;rsquo;s green and try not to build in too much genericism.  Or at least I&amp;rsquo;m saying that because the PR build is green - we&amp;rsquo;ll see what happens when we deploy &amp;hellip;&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1QPgTuAkzUE"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=I8njkwFwTRc"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Pulled in Different Directions</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/26/pulled-in-different-directions/"/>
    <id>http://blog.url.com/2016/10/26/pulled-in-different-directions/</id>
    <published>2016-10-26T01:00:00+01:00</published>
    <updated>2016-10-28T21:25:41+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The PremiumPlus upgrade deploy appeared to go completely smoothly.  The test migration ran fine locally (with a copy of the production data).  Given we can&amp;rsquo;t afford to completely replicate the production data on staging I took a risk and ran the migration directly on production.  It all went fine, and I created tickets for &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1360"&gt;removing the migration and old columns&lt;/a&gt;, &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1362"&gt;updating the legacy Premium start dates&lt;/a&gt; and &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1361"&gt;making the upgrade button look nicer&lt;/a&gt;.  The real test will be when a user tries to upgrade, or we get a new sign up, or someone tries to change their credit card.  All those cases are covered by feature tests that are green, but I won&amp;rsquo;t rest easy till a few transactions have gone through on the live servers.&lt;/p&gt;

&lt;p&gt;We also managed to deploy a fix to manual updates of event hangout URLs.  This is particularly important given that the &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1359"&gt;Hangout API is no longer working&lt;/a&gt;, and so our hangouts cannot connect back to our server to provide an easily discoverable link into the hangouts.  Unfortunately the manual updates &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1358"&gt;only stay live for a couple of minutes&lt;/a&gt; at a time before resetting the event status.  This feels like the resurgence of an earlier bug, and I&amp;rsquo;m torn between working on this and on rolling out payment functionality for some new premium plans.  &lt;/p&gt;

&lt;p&gt;At least yesterday, rather than burning time trying to take apart the Google Hangout API, I got the PremiumUpgrade feature out, and helped kick start the AsyncVoter project.  I already had the sense that the Google Hangout API issue was something on the Google side and might not have a quick fix.  This was clear from a &lt;a href="https://productforums.google.com/forum/#!topic/youtube/bww-BpJGAMQ"&gt;YouTube product forum thread&lt;/a&gt; that Michael had found. The YouTube Live API support pages say that support is through StackOverflow, so I got a &lt;a href="http://stackoverflow.com/questions/40233393/start-a-hangout-on-air-button-for-youtube-livestreaming-api"&gt;question&lt;/a&gt; posted, describing the precise details of our problem and linked in all the relevant resources.  Over night I see new posts in the forum with one user having digged deeper into the APIs and coming up against walls it seems only Google engineers will be able to fix.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a strange situation.  Google might fix this tomorrow and we&amp;rsquo;ll be back to a stable setup, or that might just be it.  It&amp;rsquo;s a bleed for us, because it means that for the most part all the repeating events that countdown on our homepage will not have the correct hangout links, &lt;em&gt;unless&lt;/em&gt; I can fix the manual link update to work correctly, &lt;em&gt;and&lt;/em&gt; educate all the scrum masters to use it.  At the moment we are all pasting our links manually into Slack.   What we don&amp;rsquo;t have is numbers on how many people come in to hangouts through links posted to Slack, the Meetup group, and those coming in through the site itself.  My sense is we do get some from all these sources.  Regular members tend to come in through Slack (I think), but we&amp;rsquo;ve definitely met great people coming in through the site or the meetup group.&lt;/p&gt;

&lt;p&gt;More frustratingly we also lose all our telemetry and Karma increments related to hangouts, because the Google Hangout plugin is not being loaded.  With all due respect to everyone who worked on the code previously, the hangout/event_instance code is a gnarly mess.  I would anticipate possibly a days work to fix the issue with the manual update, and several days work to clean things up into a state where things were maintainable. We could adapt to the new circumstances by ensuring that manually setting a hangout URL on the website would ping Slack and the meetup group, and reduce the admin load on the scrum masters.&lt;/p&gt;

&lt;p&gt;Maybe this is an opportunity in disguise?   The problem with starting hangouts from the website is that it&amp;rsquo;s not easy for others to learn how to do this.  FreeCodeCamp gets round issues like this by having well place animated gifs in their site that show people what to do.  Another alternative is operating things purely in Slack - there are various integrations with Slack that allow you to start hangouts or other video conferencing tools with commands like &lt;code&gt;/hangout&lt;/code&gt;.  Frustratingly the hangout one does not support recordable hangouts on air.  I&amp;rsquo;ve always felt that the recording of our scrums and pairing sessions is an important part of AgileVentures&amp;rsquo; commitment to &amp;ldquo;Open Development&amp;rdquo;; but the flip side is that some are intimidated by the recording.  Then again, perhaps we get our positive community vibe from people realising they are always being live streamed around the world and so should be nice to each other.  I&amp;rsquo;m not sure &amp;hellip;&lt;/p&gt;

&lt;p&gt;A serious challenge is that we have lots of legacy documentation in AgileVentures and in the &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC that talks about things in terms of the event/hangout creation flow that worked in the past.  We have lots of people who are familiar with that flow.  Even if it&amp;rsquo;s not a novice friendly flow.  We could keep approximately with the grain of that flow by having a manual update that pinged Slack/Meetup etc. and then it could even be extended to be started from Slack &amp;hellip; a fair engineering effort, for what returns?  It&amp;rsquo;s unclear.&lt;/p&gt;

&lt;p&gt;I was pleased to kick off some mob programming on the NodeJS AsyncVoter project yesterday.  The ability to run asynchronous votes on stories bugs and chores in Slack channels has something that starting hangouts through web pages does not; you can easily watch other people doing it, and learn the approximate process.  Also, people don&amp;rsquo;t all have to be available at the same time, so there&amp;rsquo;s a lower barrier to entry.  You don&amp;rsquo;t have to click a sign off on a warning saying &amp;ldquo;PEOPLE YOU DON&amp;rsquo;T KNOW WILL BE ABLE TO WATCH YOU!!!!!&amp;rdquo;   &lt;/p&gt;

&lt;p&gt;Almost immediately there are tides that try to make the AsyncVoter project more complex.  Support multiple projects, support for a generic planning poker tool.  I do feel strongly that the challenges we have with maintaining our current infrastructure arise from having tried to add too many features too fast.  Moving forward we need simple tools that have a clear logic and set of domain entities at the centre.  In order to survive money has to flow; I think I must prioritize releasing actual payment pages for the new &lt;a href="http://www.agileventures.org/premium-mob"&gt;Premium Mob&lt;/a&gt; and &lt;a href="http://www.agileventures.org/premium-f2f"&gt;Premium F2F&lt;/a&gt; offerings.  Beyond that I think we need to enable people to start voting on tickets with the minimum of effort and maximum of visibility.  This is the stepping stone to them taking on a ticket and putting in a pull request. It&amp;rsquo;s through pull requests of code that all our members learn, and also how we fundamentally deliver value as an organisation.&lt;/p&gt;

&lt;p&gt;Of course I have to go spend the morning with my accountant, but after that &amp;hellip;!&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oCcWrBHqPfk"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iUPcDHE7HUM"&gt;AsyncVoter Mob session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=feCOvYV6fN4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Solo Coding</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/25/solo-coding/"/>
    <id>http://blog.url.com/2016/10/25/solo-coding/</id>
    <published>2016-10-25T01:00:00+01:00</published>
    <updated>2016-10-28T21:25:41+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://nonprofits.agileventures.org/2016/10/21/yak-shaving/"&gt;Yak shaving&lt;/a&gt; aside I managed to make time for some solo coding.  There was work outstanding on a feature to allow users to upgrade from Premium to PremiumPlus.  Michael and I had designed some extra domain features in a previous session, but they hadn&amp;rsquo;t immediately been needed, so we cherry-picked them into this PR.  New domain entities of Subscription and PaymentSource were necessary to distinguish between users being Premium or PremiumPlus without having to contact the remote Stripe API for confirmation (see model dump from railroady gem in the image below).  If someone wants to upgrade the last thing we want to do is have the site freeze because the Stripe API isn&amp;rsquo;t responding.  That said we&amp;rsquo;re still using the Stripe API to communicate the intention to upgrade the plan, but having a coherent way of storing the members&amp;rsquo; desire to upgrade in our database seems like a good move.&lt;/p&gt;

&lt;p&gt;&lt;img alt="new domain entities" src="https://www.dropbox.com/s/lm03tpkm2xqe9kb/Screenshot%202016-10-25%2020.52.36.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;You might say why didn&amp;rsquo;t you build all this in from the start?  Because we were following the Agile process of only building what we needed for the immediate future.  Now that we&amp;rsquo;ve validated that people will sign up for Premium and Premium Plus plans, we&amp;rsquo;re moving on to gamble that some of them might be willing to upgrade.  Actually the feedback I&amp;rsquo;m getting suggests that the Premium Plus plan is too expensive, so next up we&amp;rsquo;ll be inserting some intermediate plans, but anyway, one feature at a time.  The &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1323"&gt;PR for this feature&lt;/a&gt; has been open a dangerously long time due to my knee operation and it needing fixing up (both the PR and my knee).  It had taken a fair amount of pulling out my hair to get the feature tests all green.  Standing in the way of the release were the data migration that would take existing members&amp;rsquo; Stripe IDs from the User model to the Subscription/PaymentSource models.  There was also a fair amount of gnarly code that was suffering from Demeter violations.&lt;/p&gt;

&lt;p&gt;My internal dialogue was as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We could do the migrations on the production server manually, but it would be error-prone, and we got in trouble with the Karma migrations last time.  That said, this time we are not deleting the old db column.  Even so, what we really should have done last time was a dry-run of the migration, so if we have a script of it this time, it&amp;rsquo;ll make it easier to dry-run it and/or rerun it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to get the migration code done, and also to write a cucumber test for it.  I&amp;rsquo;d be following up with a later migration to remove the db column and the migration test in a few weeks.  Exhilarating to be writing code that I plan to delete soon!&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@rake&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Migrate the stripe data
  As the admin
  So that users can get premium related functionality related to the new data schema
  I want to migrate to the new data structure

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following users exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;stripe_customer&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;alice@btinternet.co.uk&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;345rfyuh&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Migrate the stripe data to the new architecture
    &lt;span class="nf"&gt;When&lt;/span&gt; I run the rake task for migrating stripe
    &lt;span class="nf"&gt;Then&lt;/span&gt; &lt;span class="s"&gt;"alice@btinternet.co.uk"&lt;/span&gt; shoud have &lt;span class="s"&gt;"345rfyuh"&lt;/span&gt; in their subscription
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here are the relevant step definitions:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for migrating stripe$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'db:migrate_stripe'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shoud have "([^"]*)" in their subscription$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the rake hook:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@rake'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vg"&gt;$rake&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rake_require&lt;/span&gt; &lt;span class="s1"&gt;'tasks/scheduler'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rake_require&lt;/span&gt; &lt;span class="s1"&gt;'tasks/migrate_stripe_customer_ids'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vg"&gt;$rake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the rake task itself:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Migrate stripe user ids from User model to Subscription model"&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:migrate_stripe&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# Time.now not ideal but can set manually later&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
        &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" stripe customer id migrated"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"migration has been completed"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;green&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got this working, but was unhappy that I&amp;rsquo;d replicated gnarly Demeter violations from the charges controller into the migration task itself.  However I had the migration task green, and now I could refactor with more confidence.  I was tempted for a moment to pull this upgrade logic into the User class itself.  It sort of makes sense to say something like &lt;code&gt;user.upgrade_to_premium&lt;/code&gt;, but our User model is already overblown with responsibilities, and really this is a process that involves manipulating and setting up several domain entities.  I went for a service, and I test drove it in the London style with the following code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:upgrade_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;class_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;class_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'StripeID'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'creates a payment source'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'creates a subscription of the appropriate type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;payment_source: &lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sets the user subscription'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'saves the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to be honest I actually wrote out a sketch of the service in a text editor before driving the above in RubyMine, but here&amp;rsquo;s how the TDD&amp;rsquo;d version ended up:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UpgradeUserToPremium&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;payment_source: &lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know that some of my colleagues prefer the Chicago style, and some people might think that the above involves a ridiculous amount of test code for a three line class method.  The RSpec suffers from not being as comprehensible as it might be by people who aren&amp;rsquo;t comfortable with RSpec concepts like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; and so forth.  What I can say in its defence (and I am still on the fence) is that there is a coherent shape in my mind here that has some level of intrinsic beauty.  The RSpec unit test of the service is following the heuristic that each &lt;code&gt;it&lt;/code&gt; statement should test only one thing.   The &lt;code&gt;let&lt;/code&gt; statements make the set of collaborating entities completely explicit.  The &lt;code&gt;before&lt;/code&gt; block sets up to stub all the outgoing collaborators of the method, so that each of the four &lt;code&gt;it&lt;/code&gt; statements does not actually reach any other part of the system, making this a unit and not an integration test.  Then each &lt;code&gt;it&lt;/code&gt; block tests each of the four key things that happen in the method.  &lt;/p&gt;

&lt;p&gt;Here we could argue that the method is doing too much - it does four things and should have a single responsibility (according to the SOLID principles).  I could break out some smaller methods, but I think this is actually the right level of granularity.  We have a concept in the domain that is upgrading a user to premium, and these are the four things that will need to happen to set that up and persist it.  The Demeter violations of the earlier code are gone, and the tests are still green, showing that the migration is working.  Furthermore, we can use the same service in the charges controller which goes from this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and our migration cleans up like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Migrate stripe user ids from User model to Subscription model"&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:migrate_stripe&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
        &lt;span class="c1"&gt;# setting time as now not ideal but can set manually later&lt;/span&gt;
        &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" stripe customer id migrated"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"migration has been completed"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;green&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good.  We&amp;rsquo;re left with some Demeter violations in the upgrade to premium plus code in the charges controller:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PremiumPlus'&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"premiumplus"&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&amp;rsquo;t like this, and I don&amp;rsquo;t like how we&amp;rsquo;ve ended up overloading the charges controller.  The former is the Stripe API that perhaps we&amp;rsquo;re using incorrectly, but I don&amp;rsquo;t know that I can justify putting an adapter on this right now.  The charges controller needs a bigger refactoring, but I&amp;rsquo;m making the judgement call that these two things go into refactoring tickets.  In the ideal world I&amp;rsquo;d also love more sad path tests in places, but again, this PR has been open long, we need the data migration in and from a charity/business perspective we&amp;rsquo;re likely to bring in more revenue by actually releasing the individual sign up pages for the new intermediate plans, and they&amp;rsquo;ll have to be a fair amount of work going on on top of this code to handle the new sequence of upgrades that are possible, so like Sandi Metz suggests, I&amp;rsquo;m hedging my bets about avoiding too much refactoring in an area where the code is in flux.&lt;/p&gt;

&lt;p&gt;At least the Heroku automated deploy is working, so I can easily do a manual test.  I&amp;rsquo;m not thrilled about the placeholder button we have but again that can be another ticket:&lt;/p&gt;

&lt;p&gt;&lt;img alt="upgrade to premium plus button" src="https://www.dropbox.com/s/2aom85mgn7pv16p/Screenshot%202016-10-25%2010.50.14.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Of course now Google Hangouts on Air have switched to YouTube live and our automated distribution of hangouts is failing - we&amp;rsquo;ve got a manual override but it has a bug I blogged about last week which will drag me away from pushing out these other plans &amp;hellip; gah!  It&amp;rsquo;s all about the prioritization &amp;hellip; At least I quite enjoyed writing all the above code :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Qt1QmFyBdpY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Tying Up Loose Ends</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/24/tying-up-loose-ends/"/>
    <id>http://blog.url.com/2016/10/24/tying-up-loose-ends/</id>
    <published>2016-10-24T01:00:00+01:00</published>
    <updated>2016-10-28T21:25:41+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So after &lt;a href="http://nonprofits.agileventures.org/2016/10/21/yak-shaving/"&gt;Yak shaving&lt;/a&gt; with Heroku automated PR deploys, we finally got it working.  Raoul joined us in the &amp;ldquo;Martin Fowler&amp;rdquo; scrum and through a process of both disabling the PR deploys, AND deleting the GitHub webhooks that Heroku had installed, the permissions issue was resolved.  The deploys themselves were now marked on GitHub as coming from me, and suddenly all the other strange database issues evaporated.  I did also get a reply from Heroku:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The use of ruby-2.3.0 appears to be because you&amp;rsquo;re bundling it into the vendor/ directory:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls vendor/*/*

[…]

vendor/bundle/ruby:
2.3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We advise against checking vendor into source control, and relying solely on bundler&amp;rsquo;s installation of Gemfile contents instead.&lt;/p&gt;

&lt;p&gt;The Postgres error appears to be because your database.yml hard codes some connection information:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;development: &amp;amp;dev
  adapter: postgresql
  encoding: unicode
  database: websiteone_development
  pool: 20
  username: postgres
  password:

[…]

production:
  &amp;lt;&amp;lt;: *dev
  database: websiteone_production
As you can see in the error, the error is that the postgres user attempts to connect, and fails. After it fails, Rails falls back to the value located in $DATABASE_URL. You can change this to simply:

production:
  url: &amp;lt;%= ENV['DATABASE_URL'] %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which all sounded like good advice, but this was all for errors that were no longer occurring - at least if they were, they were no longer blocking the deploy.  I asked them about that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks Jason, that&amp;rsquo;s weird because we don&amp;rsquo;t have vendor/bundle/ruby in our source tree: https://github.com/AgileVentures/WebsiteOne/tree/develop/vendor/ any idea how it&amp;rsquo;s getting in there during deploy?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I got back the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regarding the vendor/bundle/ruby question I think there may have been some issue with the build cache on this occasion that was holding the 2.3.0 over from a previous deploy. If you have any trouble in future you could you try running the following commands:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku plugins:install https://github.com/heroku/heroku-repo.git
$ heroku repo:purge_cache -a appname
$ git commit --allow-empty -m "Purge cache"
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;That will ensure you start from a cold cache for that deploy. Let me know if you have any further questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that&amp;rsquo;s that, except that all these automated PR apps are costing us money, and I&amp;rsquo;m not sure they are being deployed automatically.  The LocalSupport auto-deploy appears to be stuck due to an app limit of 100, and I&amp;rsquo;m starting to suspect that&amp;rsquo;s because the local support develop server is on my personal account.  If I move it to one of our group accounts we&amp;rsquo;ll start incurring more charges, so I found a little script to &lt;a href="https://gist.github.com/naaman/1384970"&gt;delete heroku apps in batch&lt;/a&gt;, which I modified slightly to work with a hand picked list:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while read app; do heroku apps:destroy --app $app --confirm $app; done &amp;lt; delete_heroku_list 

Destroying ⬢ afternoon-stream-8326 (including all add-ons)... done
Destroying ⬢ agile-chamber-2464 (including all add-ons)... done
Destroying ⬢ agile-dawn-9072 (including all add-ons)... done
Destroying ⬢ agile-thicket-6113 (including all add-ons)... done
Destroying ⬢ ancient-bastion-6361 (including all add-ons)... done
Destroying ⬢ ancient-dusk-4608 (including all add-ons)... done

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could have burnt time doing a regex for the format of &lt;code&gt;&amp;lt;word&amp;gt;-&amp;lt;word&amp;gt;-&amp;lt;four-digits&amp;gt;&lt;/code&gt; to find and delete all my apps without custom names, but that would have burnt time for something I&amp;rsquo;m unlikely to need to do again, and it took a minute to get the file &lt;code&gt;delete_heroku_list&lt;/code&gt; to have the names of all the crufty old apps I haven&amp;rsquo;t used in years.&lt;/p&gt;

&lt;p&gt;So my hereby dashboard is looking a lot cleaner.  I&amp;rsquo;ve got my two main project pipelines in my &amp;ldquo;favourites&amp;rdquo;, and my Heroku navigation is a lot more manageable:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/iaf134csxh7ij1g/Screenshot%202016-10-24%2010.09.56.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Although that doesn&amp;rsquo;t immediately seem to have enabled automated PR deploys on LocalSupport - which still reports the 100 app limit exceeded.  I guess that will take time to flush through the system, or indeed I might need to try this new &lt;code&gt;purge_cache&lt;/code&gt; technique that&amp;rsquo;s mentioned above, but those are Yak&amp;rsquo;s to be shaved.  I only just started on the data migration script for the premium plus upgrade feature, which needs to be finished, and there&amp;rsquo;s a hell of a lot of other critical admin tasks to get to today.  At least this ties up some of the loose ends from last week, when I was worried the Yak shaving would continue indefinitely.  At least I&amp;rsquo;ve got to a reasonably satisfying task switching point &amp;hellip;&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/_hAm_6T8r18"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=feu722TBjo4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Yak Shaving</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/21/yak-shaving/"/>
    <id>http://blog.url.com/2016/10/21/yak-shaving/</id>
    <published>2016-10-21T01:00:00+01:00</published>
    <updated>2016-10-28T21:25:41+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I thought I&amp;rsquo;d try and get a little solo programming time in today, but it turned into a yak-shaving devops session.  Yak shaving?  It&amp;rsquo;s when you end up needing a ladder to paint your house, and you have to borrow a ladder from your friend, but you need to go get his keys from his neighbour who has to finish shaving his yak &amp;hellip; I know, it makes no sense - the point is about how you have one goal and then you get successively distracted by a series of activities that become more and more tangentially related to the original goal.  I was trying to get our premium plus upgrade functionality into production.  This was going to involve doing a data migration.  I wanted to get an instance of the branch with that code up in Heroku to test the migration.&lt;/p&gt;

&lt;p&gt;Heroku&amp;rsquo;s automatic deploy of pull requests to Heroku instances is nice when it works.  It came out of beta, but still seems flaky.  I started poking at it.  First up it was saying that there wasn&amp;rsquo;t permission to deploy the app.  I&amp;rsquo;d just moved websiteone-develop from my personal account to my company NeuroGrid Ltd group account since all my personal app hours had been burned up by agile-bot.  Raoul had originally set up the automated deploys for the websiteone develop server, so somehow the automatic deploy of the PR was coming from his account.  I played with moving him from a collaborator to an admin role, which moved things forward a little.  The next error was the deploy was failing due to a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1348"&gt;database error&lt;/a&gt;.  One of the frustrating things about this was the delayed feedback loop.  I&amp;rsquo;d make a change in the &lt;code&gt;app.json&lt;/code&gt; file that specifies how Heroku will auto deploy PRs, or a change in Heroku&amp;rsquo;s admin console, and it takes five minutes or so to find out if the deploy has worked or not.  I was task switching between trying to fix the automated PR deploy and cleaning up what looked like a puffing billy sandbox leak on the branch itself. Ultimately though it was the PR deploy that was taking up more and more of my brain.&lt;/p&gt;

&lt;p&gt;Was this another banana in a coconut?  Really if I wanted to get the premium upgrade feature out I should focus on pushing that to some new Heroku instance and leave fixing automated PR deploys to another time.  Of course automated PR deploys are great when they work, and they help project managers (including me) review PRs faster, and if it worked I wouldn&amp;rsquo;t have to do all the fiddly deploy to get the ENV vars set up for a new Heroku instance to test if the new feature.  The great thing about Heroku PR deploys (when they work) is that they copy all the environment vars from a specified server (in this case develop) and things are good to go.  However, running &lt;code&gt;rake db:seed&lt;/code&gt; to pre-populate the database as part of the &lt;code&gt;app.json&lt;/code&gt; post-deploy script was giving this error message:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FATAL:  permission denied for database "postgres"
DETAIL:  User does not have CONNECT privilege.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but ironically, immediately after that we had all the output from what looked like a successful run of db:create and de:seed.  Confusing.  We&amp;rsquo;d had a similar &lt;a href="https://www.pivotaltracker.com/story/show/116276111"&gt;issue on LocalSupport previously&lt;/a&gt;, which had ultimately been fixed by &amp;hellip; I&amp;rsquo;m not sure.  LocalSupport automated Heroku PR deploys had been working for a while.  They were now stuck on a separate issue of us having too many apps, even though they were set to auto-delete after 5 days of inactivity.  Actually now that I type it out, I think the problem might be that the LocalSupport develop server is on my personal account, and I have a load of junk apps there; gotta clean those out - argh, yak shaving!  Either the definite trend over the last few months appears to have been Heroku gradually introducing new limits which we are falling foul of in new and unpleasant ways.&lt;/p&gt;

&lt;p&gt;Anyway, the LocalSupport ticket (and an old Heroku ticket) included some ideas for changing app.json, e.g. including an explicit migrate step, and this from the Heroku folks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a caveat when building review apps that we have requested a new database addon, but it&amp;rsquo;s not guaranteed to be provisioned during the build phase. It sounds like something in your application is trying to access the database before your database is up and ready to receive connections.&lt;/p&gt;

&lt;p&gt;The ideal fix is to track down why the app is connecting to the database during build and try to prevent that. If that&amp;rsquo;s not an option, we also have a buildpack that you can use to wait for your database to come up: https://github.com/heroku/heroku-buildpack-addon-wait.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn&amp;rsquo;t get to trying the build pack suggestion, instead going through a series of changes to app.json; moving the develop server into a heroku pipeline (see image below); an analysis of the stack trace associated with the above database fail, which seemed to possibly implicate &lt;a href="https://github.com/airbrake/airbrake/issues/620"&gt;airbrake&lt;/a&gt; but probably not.  Ultimately I did not get it working, but did succeed in spamming Raoul and myself with failed Slack invites that get generated as part of the &lt;code&gt;rake db:setup&lt;/code&gt;.  I posted support requests to Heroku, which as of this morning have not been picked up and as of this morning I tried removing the &lt;code&gt;rake db:setup&lt;/code&gt; completely, which allowed the app to report &amp;ldquo;successful&amp;rdquo; deployment, but when I looked there was just nothing there.&lt;/p&gt;

&lt;p&gt;&lt;img alt="heroku pipeline" src="https://www.dropbox.com/s/x6bmiswu6j89q8s/Screenshot%202016-10-21%2011.27.48.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Despite being admin, Raoul reported that he couldn&amp;rsquo;t even see the develop server in the Heroku GUI, and had removed his account over night.  I re-added him, put the &lt;code&gt;rake db:setup&lt;/code&gt; back in, adjusted the config to allow us to set Slack invites to be disabled on develop, and tried another push.  I felt like I could burn a lot of time on this.  The next sequence of things to try with this nasty delayed feedback loop are:&lt;/p&gt;

&lt;p&gt;1) remove &lt;code&gt;rake db:setup&lt;/code&gt; again - maybe I can then just run from command line to a) get a working instance and b) understand the error better
2) try the suggested &lt;code&gt;heroku-buildpack-addon-wait&lt;/code&gt; from Heroku
3) re-create the Github web hook that is presumably lending Raoul&amp;rsquo;s credentials to every attempt to deploy an instance for a PR&lt;/p&gt;

&lt;p&gt;Conversely I could say that this is all yak-shaving, and yak-shaving with a time delay as to when the yak is shaved is a real pain.  If I really wanted to get back on track to deploying the feature what I could be doing is just deploying a Heroku instance from scratch and starting work on prodding at the feature, and getting my head back around the data migration we need so that I can write some manual instructions, or get a script together.  We will see.  Having blogged I guess I will now work through all the email and Slack messages that are backing up, and look through/add-to my priority list to work out what&amp;rsquo;s the most profitable way to spend the next few hours.  Yaks!&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ZZa-80c9qos"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
