<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-03-21T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Long Running PRs</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/21/long-running-pull-requests/"/>
    <id>http://blog.url.com/2017/03/21/long-running-pull-requests/</id>
    <published>2017-03-21T00:00:00+00:00</published>
    <updated>2017-04-26T21:33:57+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="security" src="/images/long_running.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;So the SSL encryption is all now working on &lt;a href="https://www.agileventures.org/"&gt;AgileVenture&amp;rsquo;s production site&lt;/a&gt;.  The slight login oddities on staging appear to have been just staging oddities.  I think maybe we could address them by re-cloning the production database to staging.  That would require upgrading the database plan there, but I guess we can afford that extra $9 a month to make sure our staging environment is closer to production.  Having staging replicate production as closely as possible is generally a good idea to increase the chances that production bugs can be solved on staging.  I took a risk yesterday pushing out to production, and it could have blown up in my face.  I followed a hunch and it seemed to work out.  I probably should pay fate back by doing that upgrade.&lt;/p&gt;

&lt;p&gt;Anyhow, so that means I completed 1 of the 4 story points that I committed to in last week&amp;rsquo;s WebSiteOne sprint.  I haven&amp;rsquo;t taken on any new points for this next sprint, and will see if I can close the others out this week.  We had the LocalSupport kick-off meeting yesterday and that&amp;rsquo;s not quite following the same format as the WebSiteOne kick-off where the stakeholders bring tickets for discussion and voting.  The big difference is that any AgileVentures community member is a client for WebSiteOne.  For LocalSupport we have a specific charity client who I&amp;rsquo;m now meeting every two weeks.  Maybe both sprints would be better off being two weeks long rather than a single week.  Although, with WebSiteOne I&amp;rsquo;m still happy voting every week, even if we don&amp;rsquo;t start on tickets.  That said, it seems like it&amp;rsquo;s important to work on tickets soon after you vote on them, otherwise the voting goes stale and it becomes wasted effort.&lt;/p&gt;

&lt;p&gt;In the LocalSupport kick-off yesterday there were both new and old PRs that needed to be dealt with.  Rather than voting on new tickets, I suggested we focus on getting them sorted.  That gives me an idea for a model for the kick-off meetings going forward&amp;ndash;that they could alternate between being voting sessions and board/PR clearing sessions.  I think the danger with fortnightly or bi-weekly meetings is that it&amp;rsquo;s confusing to remember whether the meeting is on or not, and it&amp;rsquo;s simpler and you get better attendance if the meeting is weekly.  Maybe the activity of the meeting can be determined as a function of the state of the project board.&lt;/p&gt;

&lt;p&gt;Anyhow, the state of the LocalSupport project was with five open pull-requests, three of which were long-running:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/LocalSupport/pull/427"&gt;Post our volunteer ops to Do-it via API key (Marouen)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/LocalSupport/pull/421"&gt;Incorporate reachskills volunteer opportunities (Zmago)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/LocalSupport/pull/424"&gt;Added unit test and a placeholder for integrated test (Marcelo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last was a learning activity on a refactoring ticket from Marcelo, and I got his permission to close it and that we would work on it again when he was free.  Marcelo is busy with his day job, and that&amp;rsquo;s totally fair enough.  It&amp;rsquo;s a shame as I think there is a kind of critical mass for learning from pull-requests.  If the gaps between working on something are too great you end up forgeting pieces of the things you were focusing on and the results of earlier effort are lost.  Zmago&amp;rsquo;s PR, related to ReachSkills integration, is stuck with a failure that&amp;rsquo;s only happening on CI, and Marouen had just finished a big PR for posting volunteer opportunities to the DoIt API.  Marouen needs input and I know it will take me a run up to get into it and give good feedback.  Zmago&amp;rsquo;s CI-only (JavaScript timing?) failure is one of the frustrating long debug cycle issues that&amp;rsquo;s a real pain to fix.  I spent the first part of the kick-off outlining these PRs to Mahesh, Sigu, Cess and Stella.  As relative newcomers to the project it would be difficult for these four to move us forward on the outstanding PRs, but I encouraged them to take a look over and comment if they could.  Every little helps :-)&lt;/p&gt;

&lt;p&gt;Then the second half of the meeting we focused on the CodeClimate issues that were being flagged up on Cess and Stella&amp;rsquo;s pull-requests.  They were mainly class length and method length issues.  Reducing class size on the relevant controller would involve pulling out a service; a refactoring that I judged too complicated to get into right there.  I focused on the class length issue and how we could refactor out new methods, and even use before/after actions in the Rails controller.  We wrapped up looking at Mahesh&amp;rsquo;s proposal to add binding.pry support.  I wasn&amp;rsquo;t convinced that binding.pry let us do anything we couldn&amp;rsquo;t do with byebug, but Sigu pointed out that there was no harm in having both, and letting devs choose whichever they prefer.  I agreed, but I wonder if I&amp;rsquo;d quashed Mahesh&amp;rsquo;s enthusiasm.  That&amp;rsquo;s the old Sam coming back.  I hear statements like &amp;ldquo;binding.pry let&amp;rsquo;s us step into methods and has code completion&amp;rdquo;, and I know I can do both these things in byebug, so the academic in me wants to show that.  However showing that can be considered a block.  Perhaps better to just to express unalloyed enthusiasm for binding.pry to encourage Mahesh to submit a PR?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got another cold and I wasn&amp;rsquo;t on the ball yesterday.  I don&amp;rsquo;t know what the right thing is to do.  My natural flow of mind is just to say what I think, and if something seems unnecessary I say so, but that can quash people&amp;rsquo;s enthusiasm.  Does it follow that learners need to be working on toy projects where it doesn&amp;rsquo;t matter what code they add and an explosion of complexity is a learning experience that doesn&amp;rsquo;t have any negative impact on the end-user?  At some point folks do need to graduate beyond toy projects if they want to increase the chances of building things of value to others; balancing the different needs of the different project stakeholders.  In this case I think I should have just expressed enthusiasm for the &amp;ldquo;offer&amp;rdquo;.  It wasn&amp;rsquo;t worth making the point about byebug works.  It could have been an opportunity for me to learn more about binding.pry.  Instead of demo-ing byebug features, I could have had Mahesh work me through the binding.pry install locally and I could have started the PR with him in collaboration.  Oh well, we live and learn :-)&lt;/p&gt;

&lt;p&gt;But still, the critical thing that I should have been directing my attention to was Zmago and Marouen&amp;rsquo;s pull-requests.  Zmago is a Premium Mob member and Marouen is a Premium mentor.  I&amp;rsquo;m blogging about this all partly to force myself to analyze the issues more deeply. Zmago had tried adding some time-outs to his CI failing acceptance tests, but now the CI seemed to be stuck on an unrelated install error.  Zmago had previously given me access to his forked repo, so I thought I&amp;rsquo;d try to roll back to the previous error and take a closer look.  In the process of doing that I realised I could grab the previous error from the older Travis logs.  What we were getting is this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Scenario: See a list of current reachskills volunteer opportunities with a link to organisation page                        # features/volunteer_opportunities/reachskills_volunteer_opportunities.feature:32
    Given I visit the volunteer opportunities page                                                                            # features/step_definitions/navigation_steps.rb:49
    Then the index should contain:                                                                                            # features/step_definitions/basic_steps.rb:521
      | Fundraising Volunteer | The volunteer will be required to work with the fundraising consultant research trusts and corporate grant making foundations appropriate to the ... | Chalkhill Community Centre |
      expected to find text "Fundraising Volunteer" in " ...

cucumber -p first_try features/volunteer_opportunities/reachskills_volunteer_opportunities.feature:32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Google Geocoding API error: over query limit.
  Scenario: Reachskills volunteer opportunities are opened in a new page # features/volunteer_opportunities/reachskills_volunteer_opportunities.feature:42
    Given I visit the volunteer opportunities page                       # features/step_definitions/navigation_steps.rb:49
    Then I should open "Fundraising Volunteer" in a new window           # features/step_definitions/volunteer_op_steps.rb:98
      Unable to find link "Fundraising Volunteer" (Capybara::ElementNotFound) ...

cucumber -p first_try features/volunteer_opportunities/reachskills_volunteer_opportunities.feature:42      

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I noticed a &amp;ldquo;Google Geocoding API error: over query limit.&amp;rdquo; message - I wondered what was happening with the cache.  The billy and vcr caches should be preventing the CI tests from hitting the real Google server. That lead me to notice that Piotr added the vcr and puffing billy caches to the .gitignore file last November. &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;features/vcr_cassettes
features/req_cache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Probably as part of the bootstrap upgrade.  It&amp;rsquo;s understandable - those changing caches make PRs and checking git status a pain.  I hadn&amp;rsquo;t noticed that change.  Could that be a factor here?  A red herring - even with the timeout&amp;rsquo;s removed, Zmago&amp;rsquo;s CI was still stuck on installing a gem &amp;hellip;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Installing eventmachine_httpserver 0.2.1 with native extensions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;was that some other weird timeout unrelated?  CI was passing for Stella and Cess. I decided to remove the VCR and billy fixtures from .gitignore.  That showed me loads of local files in the caches on git status, arising from my local test runs.  I deleted all caches (labelled fixtures) locally and re-checked out from git, and then kicked off a full cucumber test run to bring the local caches up to date.  The plan being to get full caches from a complete test run checked in and then pushed up to CI.  Perhaps that would allow Zmago&amp;rsquo;s PR to pass?  Actually it allowed me to replicate the error locally - now we were getting somewhere &amp;hellip; to be continued tomorrow!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/D62ZcBOnNsc"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum and LocalSupport kick off&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p.s. for Cucumber and RSpec I&amp;rsquo;d really like to adjust the output on CI so that it was progress dots for the passing tests, and full stack traces for the failure - I should investigate or open an &lt;a href="https://github.com/cucumber/cucumber-ruby/issues/new"&gt;issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;p.p.s. opened &lt;a href="https://github.com/cucumber/cucumber-ruby/issues/1094"&gt;one&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Security First</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/20/security-first/"/>
    <id>http://blog.url.com/2017/03/20/security-first/</id>
    <published>2017-03-20T00:00:00+00:00</published>
    <updated>2017-04-20T21:28:10+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="security" src="/images/security.png" /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re in the process of rolling out &amp;ldquo;https&amp;rdquo; support on the main AgileVentures site.  We&amp;rsquo;ve had &amp;ldquo;https&amp;rdquo; or &amp;ldquo;ssl&amp;rdquo; encoding set up on the LocalSupport project for a couple of years.  LocalSupport users are not a technical community so we don&amp;rsquo;t have facebook, twitter or GitHub login.  We&amp;rsquo;re storing a lot of personal address and phone number details there, and it was clear that without the right security we&amp;rsquo;d be sending user passwords and data back and forth in the clear.  During the initial launch of LocalSupport we switched from where we had been developing (Heroku) to another service provider (NineFold) who offered us SSL free.  So the initial LocalSupport launch was fully secure.&lt;/p&gt;

&lt;p&gt;NineFold eventually folded and we moved back to Heroku where we now pay for the expedited SSL package for LocalSupport.  The AgileVentures site (WebSiteOne) was, and is, targeted at a more technical crowd.  We&amp;rsquo;ve had GitHub and Google login via OAuth since close to the start.  By their nature these are secure.  We used to offer email signup, but shut that down a couple of years back, due to a proliferation of spam accounts, and haven&amp;rsquo;t re-opened it.  In principle, users can still log in insecurely via emails they signed up with at the start, but I&amp;rsquo;m not sure if anyone still does this, and new users all register via OAuth.  AgileVentures, the site, maintains all its data open for sharing, so security has seemed less of an issue, and the cost of setting up the SSL security always seemed to push its priority down the to-do list.&lt;/p&gt;

&lt;p&gt;In the last year we added payment support for Premium plans, first via Stripe and then via PayPal.  These are both secure in that user credit card details never touch our server - going instead directly to secure Stripe and PayPal servers.  So while in some ways that is sufficient security, Federico pointed out recently that the perception of a lack of security could be damaging.  We discussed in a WSO kickoff and got an &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1584"&gt;issue ticket&lt;/a&gt; and I started working on it.  Federico provided a great screen shot of what a user might see while making a Stripe payment:&lt;/p&gt;

&lt;p&gt;&lt;img alt="insecure http in backdrop of stripe payment" src="https://camo.githubusercontent.com/8a1104bf54461a478267e35477ec4cd24e8af3b6/68747470733a2f2f7777772e64726f70626f782e636f6d2f732f7034363764347773686833616276322f696e7365637572652d41562d7072656d69756d2d7369676e75702d66697265666f782e706e673f646c3d31" /&gt;&lt;/p&gt;

&lt;p&gt;Now no potential Premium member has complained about this, but then again you wouldn&amp;rsquo;t expect that kind of feedback.  Will fixing this unleash a wave of subscriptions? Probably not :-)  But it should get sorted, and while our whole community is based on openness, there are users who choose to de-activiate their accounts, and we need to respect their wishes, ensuring their data is secure when they want it to be hidden.&lt;/p&gt;

&lt;p&gt;Also, there&amp;rsquo;s now LetsEcrypt, which promises us the ability to generate SSL certs that can be used in tandem with the SSL endpoints that are now bundled with Heroku&amp;rsquo;s paid plans.  We have to have the AV site servers on Heroku paid plans for resources and also to have them part of Heroku&amp;rsquo;s group plan.  Maybe one day we can migrate to Dokku on Azure as part of a cost saving exercise &amp;hellip; we&amp;rsquo;ll see how that goes with the AsynVoter project first.  In the meantime it seems sensible to get SSL all set up, and last week I managed to get it working on both the develop and staging servers.  I was initially distracted by the &lt;a href="https://github.com/substrakt/letsencrypt-heroku"&gt;letsencrypt-heroku&lt;/a&gt; project, but that only works for certain domain hosting solutions.  However a couple of blog posts set me straight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://collectiveidea.com/blog/archives/2016/01/12/lets-encrypt-with-a-rails-app-on-heroku&lt;/li&gt;
&lt;li&gt;https://medium.com/@franxyzxyz/setting-up-free-https-with-heroku-ssl-and-lets-encrypt-80cf6eac108e#.gx52z5rvt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if I had to combine elements of both to get us sorted.  The process was to install a program called &lt;code&gt;certbot&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install certbot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I needed to generate a certificate manually:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo certbot certonly --manual
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;agree to have my IP logged and then adjust WSO so that it could respond to a security challenge.  I had to leave the certbot operation hanging while I deployed the following code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticPagesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_filter&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;except: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:letsencrypt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;letsencrypt&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;text: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.ENV['CERTBOT_SSL_CHALLENGE']"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:layout&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which then allowed the certbot challenge to be answered and various keys to be generated locally on my computer.  In the background I had also set the Rails config to force SSL:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;force_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and now I could deploy the locally generated keys via the Heroku CLI:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo heroku certs:add /etc/letsencrypt/live/develop.agileventures.org/fullchain.pem /etc/letsencrypt/live/develop.agileventures.org/privkey.pem -r develop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we had SSL working!  There was more work though, as our Google and GitHub OAuth redirect URLs had to be updated to now refer to the HTTPS versions.  Once that was done, login and signup were working again, although I am slighltly suspicious that we may still encounter some problems.  Michael and I both experienced some issues on staging trying to log in, to get redirected to a sign up page indicating that our email already existed.  I have an intuition that previously generated OAuths may get invalidated and there may be something else we need to do.  I&amp;rsquo;m not clear how seriously this will affect production &amp;hellip; I can imagine that existing users may require resets.  I think the error message is a Devise one:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/eb2b4453pjo8mpc/Screenshot%202017-03-20%2010.23.52.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the code, it&amp;rsquo;s not clear what set of circumstances causes that.  Just reviewing on staging, I see I can log in via GitHub, but if I try to log in using Google with my tansaku email then I get an &amp;ldquo;email already taken&amp;rsquo; message (with a redirect to sign up page) and if I try with my NeuroGrid email I get &amp;quot;csrf detected&amp;rdquo; first time around (nothing in the JS console), but then second time it works.  I guess I could be trying to wrap tests around this, but I doubt my ability to fully replicate the actual production instance and I&amp;rsquo;m just not sure how many others will experience this.  I held off deploying over the weekend - I guess I should ask more folks to try it out on staging &amp;hellip;&lt;/p&gt;

&lt;p&gt;Either way I didn&amp;rsquo;t actually manage to complete any of the WSO tickets I committed to in the last sprint, partly because of the SSL but also because I think I overcommitted.  I&amp;rsquo;ve not taken on any new ones this week and am committing to trying to finish the ones I&amp;rsquo;ve already started; even though there are loads of new exciting ones we have voted on.  Let&amp;rsquo;s see how this week goes.  I really hope I can get the new security setup on production.&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/edit?o=U&amp;amp;video_id=bjbdQ9L-KHw"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/edit?o=U&amp;amp;video_id=bi85l56Tcqg"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum and WSO kickoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/edit?o=U&amp;amp;video_id=Egf8LH_pRK0"&gt;&amp;ldquo;Bob Martin&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Private Pairing</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/17/private-pairing/"/>
    <id>http://blog.url.com/2017/03/17/private-pairing/</id>
    <published>2017-03-17T00:00:00+00:00</published>
    <updated>2017-04-19T22:27:25+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="privacy" src="/images/private-keep-out.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Where to start? Intense week.  Just finished a one hour private pairing session on the &lt;a href="http://codingdojo.org/kata/Tennis/"&gt;tennis kata&lt;/a&gt; with a Ruby programmer I met on the &lt;a href="http://www.rubyonrails.link/"&gt;RailsLink Slack&lt;/a&gt;.  They were suggesting Vim/Tmux, but we ended up using Hangouts and GitHub pong.  It was a good session and I wish I&amp;rsquo;d recorded it.  It was very smooth ping pong back and forth, with some good discussion.  I&amp;rsquo;d asked my pair about recording, but they&amp;rsquo;d demurred and I didn&amp;rsquo;t push it.  I beat myself up internally, because I feel like it could have been a really great video for bootcamp grads and new AV members to watch.  Unlike other meandering sessions where we&amp;rsquo;re slogging through a legacy codebase, this was more likely something folks could get their head around&amp;ndash;a video we might have been able to promote.  However I think we&amp;rsquo;ve got to respect people&amp;rsquo;s preferences.  Not everyone wants their activities vidoed and played back, and perhaps that&amp;rsquo;s part of the crux of the issue at AgileVentures.  Maybe the Google Hangout plugins going offline on April 25th will be a blessing rather than a curse, as starting manually from YouTube live actually gives the Hangout creator control over whether to make the video private, unlisted, or public on YouTube.&lt;/p&gt;

&lt;p&gt;Anyway, all the code from the session is in a &lt;a href="https://github.com/tansaku/tennis-kata"&gt;repo on github&lt;/a&gt; where you can see the nice git pong commit history:&lt;/p&gt;

&lt;p&gt;&lt;img alt="commit history" src="https://www.dropbox.com/s/ybsik7662m3dsg1/Screenshot%202017-03-17%2010.37.31.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;I picked up some good tips from the pairing, using a &lt;code&gt;let&lt;/code&gt; instead of a named subject &lt;code&gt;subject(:tennis) {described_class.new}
&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'tennis'&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Tennis&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tennis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="s2"&gt;"players are love-all when game starts"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tennis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;score&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s2"&gt;"0:0"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was pulled back from excessive self-encapsulation, being referred to a &lt;a href="https://martinfowler.com/bliki/SelfEncapsulation.html"&gt;Martin Fowler article on the subject&lt;/a&gt;.  I&amp;rsquo;d worked hard with Ruby to work out how to use private &lt;code&gt;attr_writers&lt;/code&gt; internally&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tennis&lt;/span&gt;

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:score&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0:0"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="kp"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:score&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s interesting how a pairing session can be alot about how you give ground.  I think my problem in the past has been my tendency to love joining a good debate about going either way with a particular approach; and I get the sense that a lot of people would rather have much less talk and a lot more coding going on.  Fair enough.  I tried that in this session and in the Elixir pairing session with Ryder on Thursday that we did record.  That was great fun too.  I immediately want to try out this Tennis kata in Elixir, as the really interesting thing is that the first way we reach to do the kata in Ruby is to start introducing object state.&lt;/p&gt;

&lt;p&gt;Pairing on Kata and other people&amp;rsquo;s personal projects (like Ryder&amp;rsquo;s text adventure game) is a new direction for me.  I&amp;rsquo;m usually so desparate to make every coding second count towards contributing to solving a charity or nonprofit problem.  Also, I&amp;rsquo;m running out of time and money and unless I land a contract very soon it&amp;rsquo;s going to be full time job search for me, and I won&amp;rsquo;t have the time to just do random pairing.  Gosh, I wish all this had been available before I had kids.  I could have learnt so many valuable lessons about coding and communicating with folks.&lt;/p&gt;

&lt;p&gt;At least at the end of the Tennis Kata session I got the chance to show what AgileVentures was about, and at the end of the session with Ryder I was able to explain my still unrealized vision of a massive online pair programming community.  Games like LeagueOfLegends, Splatoon and OverWatch allow anyone around the world to log in and hang out in gaming lobbies, until they&amp;rsquo;ve got enough folks together for a team game.  It just seems like it&amp;rsquo;s totally possible to do the same thing for pair programming.  You could have a video wall of all the different ongoing sessions with people browsing what they&amp;rsquo;d like to focus on (à la twitch.tv) but actually able to participate.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been wanting that for the last five years and channelled it through the MOOC, bootcamps, AgileVentures, but it still doesn&amp;rsquo;t exist in the form that I imagine.  Perhaps we have to build our own screensharing teleconferencing system.  As they say &amp;ldquo;Markets can stay irrational longer than you can stay solvent&amp;rdquo;.  I think once people get over their initial resistance to pairing with strangers online and being video&amp;rsquo;d, they&amp;rsquo;d get so much out of it.  If only we had a properly staggered system that allowed people to do some initial private pairing &amp;ldquo;free tasters&amp;rdquo; and then an escalator that introduced them to the possibilities of online pairing.&lt;/p&gt;

&lt;p&gt;I think the interface has just got to be smooth.  Like playing a video game - just click a few buttons and you&amp;rsquo;re in.  None of these off-putting warning messages from Google Hangouts.  The interface updating in realtime as other people come on and offline.  Perhaps our new AgileVentures Electron project will help - or some other kind of Slack integration.  Slack seems like the perfect lobby system to me.  We just need the ability to have recordable pairing sessions launched from Slack and archived and then be browsable by tech stack.  Actually I think the streaming/recording is most useful as an activity trace for others to see what&amp;rsquo;s happening and see that it can happen and realise that they can do it themselves &amp;hellip;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll get there, although knowing reality, someone else will do it first.  FreeCodeCamp is part way there, but they&amp;rsquo;re JavaScript only and the pairing is adhoc (I think) - the online bootcamps have it for a select rich few - if you&amp;rsquo;re inspired come help us make it a reality.  I think it should be open for everyone in the world to participate, just like an online computer game.  Maybe we need a design sprint?&lt;/p&gt;

&lt;h2&gt;Related Videos:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kYQP9sRgXRY"&gt;Elixir Pairing with Ryder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Who Needs Frameworks?</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/16/who-needs-frameworks/"/>
    <id>http://blog.url.com/2017/03/16/who-needs-frameworks/</id>
    <published>2017-03-16T00:00:00+00:00</published>
    <updated>2017-04-19T22:27:03+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="frameworks" src="/images/frameworks.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;I listen to a different podcast every morning.  Last Friday it was &lt;a href="http://www.greaterthancode.com/podcast/episode-014-rashaun-stovall-snuggs/"&gt;&amp;ldquo;Greater than Code&amp;rdquo; with Ra’Shaun Stovall (Snuggs)&lt;/a&gt;.  It was pretty mind expanding with quotes and questions like the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;seniors often try to hold on to the complexity they love&lt;/p&gt;

&lt;p&gt;if you are presenting a problem and not suggesting a solution then you are part of the problem&lt;/p&gt;

&lt;p&gt;why is open source so closed?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Snuggs comes from a US college football background and brings huge energy and lots of analogies.  Another idea he was introducing was that maybe we didn&amp;rsquo;t need so many front end frameworks.  I posted to that effect in the GreaterThanCode Slack and got a response that was worthy of a short blog post from Snuggs.  To paraphrase his response, Snuggs thinks no one is being accountable for hand holding the huge numbers of bootcamp grads from bootcamp to junior.  I&amp;rsquo;d certainly love to see AgileVentures fulfilling that role by having teams of bootcamp grads working on open source projects for charities and non-profits around the world.  We do have graduates from a number of bootcamps involved, but there&amp;rsquo;s a way to go, to perfect that support process.  It would be great if we could collaborate more with NYC.rb and RailsLink.  &lt;/p&gt;

&lt;p&gt;Snuggs runs NYC.rb and that group have colonised the RailsLink Slack which just reached it&amp;rsquo;s 5000&amp;#39;th member.  He says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s to the point now where they are all teaching themselves and truth be told 3 juniors pairing with the proper guidance will become senior in months not years. I&amp;rsquo;ve seen it with my own eyes. And they are relentless at learning best practices. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m trying to get my head round the DevPunks and RailsLink communities that Snuggs is at the heart of.  I&amp;rsquo;ve been in the RailsLink Slack, but so far it seems like lots of Q&amp;amp;A.  I&amp;rsquo;m not quite following where to see the pairing and mentoring that Snuggs talks about, but I&amp;rsquo;m going to keep asking there.  I just watched Snuggs&amp;rsquo; video on &lt;a href="https://youtu.be/A5ad52AogJ8"&gt;&amp;ldquo;Why is Open Source so Closed?&amp;rdquo;&lt;/a&gt;.  He makes a great call out to travel and opening your mind.  Snuggs is so full of ideas and energy that I sometimes find it difficult to follow, but the way I&amp;rsquo;m hearing it is that Snuggs was surprised how there are so many cool things going on outside the Ruby world, e.g. in the JavaScript world, and is railing against the cliques that develop around individual programming languages, where for example Ruby devs might look down on JavaScript and PHP developers.  That&amp;rsquo;s a great message.&lt;/p&gt;

&lt;p&gt;And I think that&amp;rsquo;s where the idea that maybe we don&amp;rsquo;t need quite so many frontend frameworks comes from.  I couldn&amp;rsquo;t find a blog post expressing the same sentiment as Snuggs, but I posted this &lt;a href="https://hackernoon.com/you-might-not-need-react-e5fd54611111#.ywyol38o9"&gt;&amp;ldquo;You might not need React&amp;rdquo;&lt;/a&gt; post, and we had some discussion there, but I wasn&amp;rsquo;t sure that I was properly articulating Snuggs&amp;rsquo; point.  In his &amp;gt;Code post, Snuggs referred me to his repo &lt;a href="https://github.com/snuggs/snuggsi"&gt;https://github.com/snuggs/snuggsi&lt;/a&gt; which includes polyfills that mirror parts of jQuery, e.g. &lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Polyfill for Sizzle CSS selection&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// always returns a collection. Just like jQuery&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'string'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="c1"&gt;// identity function&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;rsquo;m hearing here is that modern JavaScript is evolving to the point that some parts of some frontend frameworks might be redundant.  It would be great to see some open source projects developed using that approach.  Of course there&amp;rsquo;s fear with change.  &amp;ldquo;If it&amp;rsquo;s not broken don&amp;rsquo;t fix it&amp;rdquo; can be a powerful mantra when you&amp;rsquo;ve been burnt by complex coding dependencies in the past &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/A5ad52AogJ8"&gt;Snuggs on &amp;ldquo;Why is Open Source so Closed?&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;My Podcast Playlist:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/ruby-rogues"&gt;Ruby Rogues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softskills.audio/"&gt;Soft Skills Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/js-jabber"&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://changelog.com/podcast"&gt;The Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/freelancers"&gt;Freelancer Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineeringdaily.com/"&gt;Software Engineering Daily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greaterthancode.com/"&gt;Greater than Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubybookclub.com/"&gt;Ruby Book Club&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Show me the Code</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/15/show-me-the-code/"/>
    <id>http://blog.url.com/2017/03/15/show-me-the-code/</id>
    <published>2017-03-15T00:00:00+00:00</published>
    <updated>2017-04-19T22:27:08+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="code" src="/images/code.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Federico made a comment on one of my recent blogs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;code&lt;em&gt;in&lt;/em&gt;blog == good&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wish I was coding more.  I am getting to do some code in the Premium mobbing sessions.  My productive coding efforts are snatched between meetings with me throwing up spikes to give myself bugs (in my feature branches) to fix and drive myself forward.  I have got quite excited about starting to code in Elixir.  Stephen Grider very kindly made his Udemy course available to Premium Mob members, and it&amp;rsquo;s super high quality.   It&amp;rsquo;s what I would love to see more MOOCs evolving towards.  Stephen has all the code in his &lt;a href="https://github.com/StephenGrider/ElixirCode"&gt;repo on GitHub&lt;/a&gt;, where we can see code like this from his initial example Elixir app for playing Cards:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; _reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippet is a little chunk that will load a deck of cards from a file.  I was struck by some parallels with a pattern in Avdi Grimm&amp;rsquo;s &amp;ldquo;Confident Ruby&amp;rdquo; that we are covering in our Ruby Mob:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;error_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:on_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;symlink_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:on_symlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symlink?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;symlink_policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;
      &lt;span class="n"&gt;error_policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;delete_files&lt;/code&gt; method about is doing something more complex than the Elixir snippet.  Here we&amp;rsquo;re seeing a method that has some default &amp;ldquo;policies&amp;rdquo;, that can be called in such a way that new policies are passed in on the fly:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;delete_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;on_error: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
             &lt;span class="ss"&gt;on_symlink: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interesting thing was that having refactored this far in his &amp;ldquo;receive policies instread of data&amp;rdquo; pattern Avdi said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At this point this example is clearly getting a little bit strained. And in general, code like this is probably a smell. There are some programming languages in which it is perfectly normal to pass lots of lambdas into methods, but in Ruby we typically try to Wnd more object-oriented approaches to composing behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now admittedly the connection I&amp;rsquo;m making between the Elixir and Ruby code is strained.  In some ways I was just picking up on what looks like a similarity in some of the symbols in the two languages.  Actually here what might seem like a similarity is in fact two different things.  Elixir&amp;rsquo;s &lt;code&gt;case&lt;/code&gt; statement is using &lt;code&gt;-&amp;gt;&lt;/code&gt; to indicate the cases, whereas Ruby is using it to specify anonymous lambdas.  That said, elements of case statements are perhaps best described as anonymous lambdas?  Confused, well, let me transcribe the Elixir code into Ruby:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt;
    &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at that side by side with the Elixir snippet again:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; _reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"That file does not exist"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elixir is using some interesting techniques like &amp;ldquo;pattern matching&amp;rdquo; here.  There&amp;rsquo;s a &lt;a href="http://katafrakt.me/2016/02/13/quest-for-pattern-matching-in-ruby/"&gt;great blog on getting pattern matching in Ruby&lt;/a&gt; with &lt;a href="https://github.com/katafrakt/noaidi"&gt;noaidi&lt;/a&gt;.  The pattern matching in use here is that the case statement is checking for matches returned from &lt;code&gt;File.read(filename)&lt;/code&gt; to see if they are either in the form &lt;code&gt;{:ok, binary}&lt;/code&gt; or &lt;code&gt;{:error, _reason}&lt;/code&gt; with the bonus that if part of the pattern is an undeclared variable, then it gets assigned so that we can then refer to that variable in the body of the individual case condition, e.g. &lt;code&gt;:erlang.binary_to_term binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Part of what got me connecting all this up was that Ruby was throwing some of the same error types that Elixir returns, e.g.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2.3.1 :004 &amp;gt; f = File.read('.gitignoreasda')
Errno::ENOENT: No such file or directory @ rb_sysopen - .gitignoreasda
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we were playing with the Elixir code in the mob, I was seeing that the unused &lt;code&gt;_reason&lt;/code&gt; variable was being set to :enoent when the file didn&amp;rsquo;t exist, which gave me an idea for refactoring this snippet of Elixir code like so:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def &lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    case File&lt;span class="p"&gt;.&lt;/span&gt;read&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;ok&lt;span class="p"&gt;,&lt;/span&gt; binary&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;erlang&lt;span class="p"&gt;.&lt;/span&gt;binary_to_term binary
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;enonet&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"The file named '#{filename}' does not exist"&lt;/span&gt;
      &lt;span class="p"&gt;{:&lt;/span&gt;error&lt;span class="p"&gt;,&lt;/span&gt; reason&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Trying to load the file we got stuck with: #{reason}"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which in Ruby would be:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ENOENT&lt;/span&gt;
    &lt;span class="s2"&gt;"The file named '&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' does not exist"&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt;
    &lt;span class="s2"&gt;"Trying to load the file we got stuck with: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$!&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, all good fun, but the thing that my brain is really grooving to is Avdi&amp;rsquo;s comment about Ruby having better OO ways to manage anonymous lambdas and the thought that Elixir has eschewed the setup of having objects associating state with methods/functions, so that what might be a code smell in Ruby, might actually be the way to go in Elixir.  The really strange mental nexus for me is the next example from Stephen&amp;rsquo;s course where he introduces Elixir structs, which are data structures of the type I am familiar from my C days - just structures of data, not associated with any methods/functions, e.g.&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image &lt;span class="k"&gt;do&lt;/span&gt;
  defstruct hex&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; nil&lt;span class="p"&gt;,&lt;/span&gt; pixel_map&lt;span class="p"&gt;:&lt;/span&gt; nil
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in almost the inverse fashion that Ruby modules are collections of methods divorced from any object state; although they can manipulate state when they get mixed in, but still &amp;hellip; anyhow, we get Elixir methods in a different module like so:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  def build_grid&lt;span class="p"&gt;(&lt;/span&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;hex&lt;span class="p"&gt;:&lt;/span&gt; hex&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; image&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    grid &lt;span class="p"&gt;=&lt;/span&gt;
      hex
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;chunk&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;map&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;mirror_row/&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; List&lt;span class="p"&gt;.&lt;/span&gt;flatten
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;with_index

    %Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;image &lt;span class="p"&gt;|&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; grid&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Elixir method is designed to work with a particular Elixir struct; specifically the Identicon.Image defined above, but there are no instance variables in Elixir so all data comes in from the method arguments and then gets passed out the return statement.  I know there&amp;rsquo;s lots of strange new syntax here if you&amp;rsquo;re not familiar with Elixir, in which case I strongly recommend Stephen&amp;rsquo;s course, but the thing I want to focus on here is the the process of assignment from the argument struct to a local method variable:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;hex&lt;span class="p"&gt;:&lt;/span&gt; hex&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we&amp;rsquo;re using pattern matching to extract the hex part of the struct (the &lt;code&gt;image&lt;/code&gt; argument) and assign it to the &lt;code&gt;hex&lt;/code&gt; variable.  After processing and generating the &lt;code&gt;grid&lt;/code&gt; variable in the body of the method, we then combine that with a copy of the incoming image argument to return a new struct that is the incoming struct plus some additional data:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;%Identicon&lt;span class="p"&gt;.&lt;/span&gt;Image&lt;span class="p"&gt;{&lt;/span&gt;image &lt;span class="p"&gt;|&lt;/span&gt; grid&lt;span class="p"&gt;:&lt;/span&gt; grid&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What really strikes me here (apart from a possible refactoring) that I&amp;rsquo;ll go into in another blog, is that instance variables just seem completely unecessary.  I&amp;rsquo;ve known for a while that the functional programmers eschew them, and we have heuristics in OO languages to avoid allowing unecessary state manipulation (e.g. preferring instance variables set up in an initializer rather than via accessors), but the breakthrough for me here is to see that we can still do all the OO domain modelling with structs.  We can even create a set of methods and procedures that are tied to working with those structs, but we don&amp;rsquo;t seem to lose anything we really need as a result of losing instance variables.  This does seem extraordinarily powerful.  Maybe I&amp;rsquo;m drinking the Kool-Aid, but I can&amp;rsquo;t now think of a circumstance where we have to use an instance variable.&lt;/p&gt;

&lt;p&gt;Also, the fact that in Rails, active record models have this complexity, where they can get out of sync with the database due to their instance state, is tricky and hugely confusing for learning developers.  I suspect that problem completely disappears in Elixir/Phoenix.  Not that Rails isn&amp;rsquo;t great in so many ways, but I&amp;rsquo;d love someone to show me a real world coding problem that couldn&amp;rsquo;t be addressed without instance variables (assuming no memory constraints).  It also seems to be you could code the Elixir way in Ruby by just refraining from using instance variables.  I start to wonder if parts of our CS educational OO edifice are just completely unnecessary and surplus to requirement, specifically &amp;ldquo;instance variables&amp;rdquo;.  &lt;a href="https://twitter.com/tansakuu"&gt;Tweet me&lt;/a&gt; with counter examples!   Let&amp;rsquo;s get to the bottom of this! :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hangouts Filling Up</title>
    <link rel="alternate" href="http://blog.url.com/2017/03/14/hangouts-filling-up/"/>
    <id>http://blog.url.com/2017/03/14/hangouts-filling-up/</id>
    <published>2017-03-14T00:00:00+00:00</published>
    <updated>2017-04-19T22:27:11+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="full" src="/images/full.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Monday saw full hangouts for the &amp;ldquo;Martin Fowler&amp;rdquo; and &amp;ldquo;Kent Beck&amp;rdquo; scrums.  It was at least partly because SUNY Binghamton students were coming in to vote as part of their class assignment, but also the return of previous regulars such as Tong Wei and Raphael.  Also contributing was the running of the LocalSupport kick off in the latter scrum, which brought in three Kenyan developers.  Great to be having busy hangouts - allowing lots of new folks to see aspects of the Agile scrum process and planning poker with Arreche&amp;rsquo;s great Slack voting app. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s great to be able to support the students but it does come with a cost, and it&amp;rsquo;s pretty rare that university students who participate as part of an assignment will come back to contribute further, although perhaps I&amp;rsquo;m seeing the world without rose-tinted glasses today.  I feel a negative haze on my vision at the moment.  Nasty cough almost gone but dragging into a third week, beating myself up about subbing decisions when coaching the weekend football game, feeling like I should be able to awaken to the moment and drop the illusion on the self.  Scrabbling for grants for tiny amounts of money.  Working really hard but not earning any money.  &lt;/p&gt;

&lt;p&gt;At least I&amp;rsquo;m feeling calmer - I&amp;rsquo;m not expecting AgileVentures to generate enough funds to support my family and I think we&amp;rsquo;re doing some great work.  The under-populated &amp;ldquo;Kent Beck&amp;rdquo; scrums are filling up as I associated a different project kick-off with each.  Also affecting my mood is rejection from Pragmatic Programmers on my book draft on &amp;ldquo;Agile Methods for Open Source Projects&amp;rdquo;.  I put a fair amount of effort to get what was originally a short chapter up to 5000 words.  I know that publishing a book is no ticket to financial stability, but it&amp;rsquo;s one additional route to push out the AgileVentures methodology.  There&amp;rsquo;s a model of how a loose and flexible Agile Scrum process can help Open Source projects grow and maintain quality, and for a while I was thinking a book on the subject might be the way to get it across, but perhaps we just need to bake it in to the user experience of AgileVentures.&lt;/p&gt;

&lt;p&gt;Graghh!  I just want to code and scrum and generate systems for clients and work with them to understand if it&amp;rsquo;s really helping fix their problems, and I want to do it in an open fashion that allows everyone else in the world to see the process and join in.  I get to do that a little in AgileVentures, but increasingly my time is spent scrabbling for funding, and if we don&amp;rsquo;t land something soon I&amp;rsquo;m going to have to kick my paid job/contract search into a much higher gear.  &lt;/p&gt;

&lt;p&gt;Bringing this back round to scrums, it was interesting that some new folks had difficulty even getting into Slack to vote on the stories with us.  They were using Slack via the web.  It&amp;rsquo;s funny for me with the desktop app installed, navigating to a Slack channel is trivial, but there&amp;rsquo;s a learning curve.  Even with a direct link to the relevant Slack channel in the chat in the hangout, one person got all tangled up trying to type out that link rather than clicking it, and several folks were stymied trying to work out how to join the channel on the spur of the moment.  The voting interface was present, but they had to click the green &amp;ldquo;join channel&amp;rdquo; button that Slack adds to take you from the preview mode to really entering the channel and the voting interace coming live.  That old beginner vs expert UX divide.   We got everyone voting in the end, but being able to see other folks experience via screen share in Google hangouts is eye opening as always.&lt;/p&gt;

&lt;p&gt;Clearly voting plugged directly into the Hangout would be better - gosh I wish the hangout could embed the Slack chat itself and those joining the hangout would be automatically in that chat.  Maybe with some new YouTube live interface, or if we switch to Zoom or roll our own after April 25th.  The visions of the interfaces that would work still dance in my head, but I can&amp;rsquo;t seem to command the resources to put them together in the quality that I imagine &amp;hellip; maybe one day.&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kZ7m9abU0po"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=V8EGMGuRSFc"&gt;Marketing meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyjHlJc_rrw"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum and LocalSupport KickOff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
