<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-02-02T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Negotiating and Estimating</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/02/negotiating-and-estimating/"/>
    <id>http://blog.url.com/2017/02/02/negotiating-and-estimating/</id>
    <published>2017-02-02T00:00:00+00:00</published>
    <updated>2017-02-23T20:39:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Thomas asked a great question to DHH during our chat with him on Tuesday.  The question was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the biggest challenges of running a large scale open source project over time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DHH answered in some detail, but the point that&amp;rsquo;s stuck in my mind is that he said how difficult it was to be discussing absolutely everything in the full public spotlight on open mailing lists.  He said that over time they have evolved towards having private groups where discussion can move a bit faster.  I strongly believe in transparency as being a great enabler of trust and learning, but I would have to concur that doing absolutely everything in the open raises its own challenges.  For better or worse people will express different opinions in private and 121 discussions versus what they will say in public.&lt;/p&gt;

&lt;p&gt;DHH also brought up the point that when the discussion is open to everyone, it creates the situation where anyone can bring their opinion, and that opinion might be well-informed and considered or it might be reactionary, or not so well-informed, or some combination.  I&amp;rsquo;m fascinated about the difference between people.  Some will be ultra-cautious about expressing an opinion, while others will have an opinion on everything and will express it regardless of the consequences.  Those are extremes and different people occupy different positions along the spectrum, varying over the course of their lives and sometimes even over the course of a day or a conversation.  I&amp;rsquo;m not casting judgement on others here.  I totally include my own behaviour in this reflection.&lt;/p&gt;

&lt;p&gt;Anyhow, so the thing blotting out my sun at the moment is the process of negotiating and estimating for the drie dashboard project.  I&amp;rsquo;m really excited that drie have agreed to go with an open-source project as this massively increases the learning opportunities for our community, but since they are a for-profit company I have to think carefully about how we are structuring this.  I&amp;rsquo;m currently running this as a project for my own for-profit company, NeuroGrid, and will sub-contract out components of it to individuals wanting to work on it.  What I&amp;rsquo;d also like to do is have a public channel for the project on the AgileVentures Slack so that everyone in AgileVentures can learn from the process and the experience.&lt;/p&gt;

&lt;p&gt;In the past when we&amp;rsquo;ve had paid projects from Non-Profit groups I was keen to share and make public the full estimating and negotiating process as a learning experience for all.  In this case I&amp;rsquo;ve demurred.  Perhaps I&amp;rsquo;m being too conservative, but I&amp;rsquo;m keeping the negotiating and estimating portion as a private conversation between NeuroGrid and drie.  While I&amp;rsquo;m sure there&amp;rsquo;s lots that everyone could learn from making that process transparent, it&amp;rsquo;s already a big leap for drie to agree to our open source, open development model, and I&amp;rsquo;d hate to jeopardize that by pushing for further transparency.  Hopefully once we&amp;rsquo;ve established the work model for all this we can go even further, but&amp;ndash;bottom line&amp;ndash;I&amp;rsquo;ve got to trust my intuition for what will work here.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s really exciting is the opportunity to have AgileVentures members compensated for the skills they&amp;rsquo;ve been so dilligently developing on all the volunteer non-profit projects we&amp;rsquo;ve been working on over the last few years.  I ardently hope that an injection of income will invigorate rather than corrupt our community.  More news here as soon as we make it :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6abj04BjwJc"&gt;&amp;ldquo;Martin Fowler&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JrdD1NXjLeY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Microservices vs Monolith</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/01/microservice-vs-monolith/"/>
    <id>http://blog.url.com/2017/02/01/microservice-vs-monolith/</id>
    <published>2017-02-01T00:00:00+00:00</published>
    <updated>2017-02-22T22:00:50+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Full on day yesterday with Rails creator David Heinemeier Hansson (DHH) dropping by to chat to AgileVentures and CraftAcademy, as well as other wall to wall meetings and DevOps.  Big shout-out to AgileVentures CoFounder and CraftAcademy boss, Thomas Ochman, for arranging and chairing the session.  It was great to hear from DHH in person and he was on form with his usual colorful language.  Thomas pointed us recently to a &lt;a href="http://journals.sagepub.com/doi/full/10.1177/1948550616681055"&gt;paper that indicated a positive correlation between profanity and honesty&lt;/a&gt;. DHH said things like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;everyone starts out being a shitty programmer writing shitty code, but the great thing is that you don&amp;rsquo;t have to stop there&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and went on to tell us about how he looks back disfavourably at code he wrote in the past.  I believe the point that DHH is making is that it&amp;rsquo;s okay to start slow and make mistakes and that&amp;rsquo;s just part of the process.  To his great credit he elaborated about that eloquently and effectively, and I think despairingly about my own public speaking skills.  I guess I should think that everyone starts out being a shitty public speaker giving shitty speeches, but the great thing is that you don&amp;rsquo;t have to stop there.  What worries me is how I&amp;rsquo;ve been talking too fast and cutting myself off in the middle of sentences for years :-)&lt;/p&gt;

&lt;p&gt;If we believe the academic study mentioned above, perhaps the use of profanity indicates there&amp;rsquo;s greater honesty in statements involving profanity, or by those who frequently profane, but if I&amp;rsquo;m honest I have to admit that profanity makes me uncomfortable.  I think that says more about me than it does about anything else.  I associate profanity with anger.  I swear when I&amp;rsquo;m angry, as my father did when he was angry.  I avoid it otherwise, as did he.  I find intense anger unpleasant and very sticky mentally.  If someone gets angry at me I find I am thinking about it for days.  DHH did not come across at all angry and was making a great point that I heartily agree with; even if I might have chosen slightly different words :-)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s fascinating to look at how the authors of the academic study were measuring honesty in the facebook posts they were analyzing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The honesty &amp;hellip; was assessed following the approach &amp;hellip; that liars use fewer first person pronouns (e.g., I, me), fewer third-person pronouns (e.g., she, their), fewer exclusive words (e.g., but, exclude), more motion verbs (e.g., arrive, go), and more negative words (e.g., worried, fearful). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This apparently comes from liars trying to dissociate themselves from the lie and so avoiding self-reference; preferring concrete over abstract language; using simpler language to reduce the mental load from generating the lie and using more negative terms because they are feeling uncomfortable about the lie.  Particularly interesting is that this entire analysis is entirely about expressions that people make on facebook, but enough of that rabbit hole.  Even more interesting to me was that DHH said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;only use micro services when no one person can understand the single app - don&amp;rsquo;t use micro services until you are ready to declare that &amp;ldquo;intellectual bankruptcy&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is a great point, but I wondered if that still applies when you have lots of part time, volunteer folks rather than a full time team, where everyone can devote themselves full time to understanding the entire system.  After the meeting, I posed that question to the AV community in Slack.  Long time AV contributer and software magician, Bryan Yap, responded that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;every project still has a project lead, I imagine the project lead would know a considerable amount about the app. I think it is more for when the app grows too complicated for any one person to comprehend&lt;/p&gt;

&lt;p&gt;it seems to be a common misconception that micro-services would solve a lot of the problems in an app, speaking to people more experienced than I am suggests the opposite :-) micro services only amplify the issues that already exist within an application. Micro services are good at solving the organisational issues as DHH mentioned, but technically it is much more difficult to manage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bryan went on to say that he didn&amp;rsquo;t see any benefit from moving from a clean monolith to micro services, because you just distribute your system and start to introduce consistency problems.  Of course that assumes you have a clean monolith, which can sometimes be a big ask. To me the biggest danger would be to say a priori that either a monolith or microservices is necessarily better. There are pros and cons for both, but what I was really trying to explore was DHH&amp;rsquo;s statement about not breaking the monolith until one person can&amp;rsquo;t fit it in their head. I think individuals have different capacities to fit things in their head depending on how much time they can devote to a project &amp;hellip;  As the conversation continued, Arreche chimed in with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wise people coincide that it is safer starting with monolithic and move later to microservices when and if it is needed.
But this doesn&amp;rsquo;t mean that we cannot learn and experiment with microservices building not critical things. The AV community is a great place to have this kind of experiences indeed :slightly&lt;em&gt;smiling&lt;/em&gt;face: (edited)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To which Bryan responded: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;yeah experimentation is good :slightly&lt;em&gt;smiling&lt;/em&gt;face: but from experience, moving to a micro service when you are not ready is very painful. Having them in a single database is not necessarily a bad thing, it&amp;rsquo;s much faster to manage updates across the entire system because it is all in one place. When you need to make changes that span multiple projects with different teams… thats when all the problems kick in :disappointed: so having a good domain model and setting the right domain boundaries is necessary before moving to micro services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I replied to Bryan that that was good advice, and that single databases are great in the right circumstances and getting that good domain model is key.  In my experience the difficulty is working out that domain model, since it requires a process of exploration.  In addition, if you have a project with a lot of part-time occasional folks who don&amp;rsquo;t necessarily have the time or inclination to understand the domain model, then it maybe makes sense to have a series of smaller services, each with a simpler model that they&amp;rsquo;re more likely to grasp.&lt;/p&gt;

&lt;p&gt;I think Bryan&amp;rsquo;s point that there is usually one full-time maintainer who has the whole app in their head, but even if they do, I don&amp;rsquo;t think that&amp;rsquo;s necessarily the best criteria to make the decision to start splitting out some microservices. The key distinction I was trying to draw is that the best approach for a project where you have 6 full-time programmers on staff, may not work quite so well when you have one part-time person and 30 volunteers putting in bits of code here and there.  Sometimes splitting those 30 folks up into 6 teams of 5 each working on a different microservice might actually be simpler.  Of course as Kent Beck says, it depends :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dtr_Um8J0XU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-dQWAbjr7pc"&gt;Marketing meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=I0LJTMgEomM"&gt;Chat with DHH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RZf-mhm20gk"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Related Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://journals.sagepub.com/doi/full/10.1177/1948550616681055"&gt;Frankly, We Do Give a Damn: The Relationship Between Profanity and Honesty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/MonolithFirst.html"&gt;Martin Fowler on MonolithFirst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Paid Projects</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/31/paid-projects/"/>
    <id>http://blog.url.com/2017/01/31/paid-projects/</id>
    <published>2017-01-31T00:00:00+00:00</published>
    <updated>2017-02-22T21:51:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was a busy Monday with us recording the first of our &amp;ldquo;Agile Book Club&amp;rdquo; podcasts, and other back to back meetings.  There&amp;rsquo;s lots to discuss and plan on the marketing front, now that the Google AdWords grant is driving five times the usual traffic to our site.  However the biggest news of the day was a proposed paid project from our sponsor, drie.  drie wants to move fast to get their products onto the AWS Marketplace and they need a dashboard to go with their GitHub integration to allow users to manage their deployments to the drie cloud.&lt;/p&gt;

&lt;p&gt;Paid projects have been a core concept of the AgileVentures Premium plans strategy since their inception. The idea is that signing up for a Premium plan subscription makes a member eligible for consideration for a paid project.  It&amp;rsquo;s intended as an incentive to sign up for Premium plans, and also a demonstration of commitment on the part of the member.  We&amp;rsquo;ve had a couple of small paid projects in the past, and including eligibility for those projects as part of the Premium package is motivated by the experience on some of those earlier projects.&lt;/p&gt;

&lt;p&gt;In an unpaid project it&amp;rsquo;s easy for the learning experience of the participants to be first and foremost.  They are after all putting in their time voluntarily.  In a paid project the situation changes; additional funds are being contributed by the client to ensure that some functionality is available in a particular timeframe.  There&amp;rsquo;s clearly little motivation for a client to contribute those funds if the sole objective is the learning experience for the developers.  There&amp;rsquo;s a tension here.  If the objective was simply learning and not on the product being generated, then perhaps those funds might be better contributed to a university or other institution which has learning as the sole objective?  Perhaps, but what about when the objective on the part of the learners is to become proficient at delivering products in the real world?&lt;/p&gt;

&lt;p&gt;Unpaid projects in AgileVentures still have real clients and real requirements to simulate a real paid project, but with much less pressure.  In a paid project that pressure is there.  It&amp;rsquo;s a fantastic learning opportuniry and an important resume addition; that you are a developer who has been paid to produce some code.  Maybe that shouldn&amp;rsquo;t make much difference, but it seems to be important to many employers and recruiters.&lt;/p&gt;

&lt;p&gt;drie have generated a backlog of stories for us, of which six have been given top priority:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;user&lt;/span&gt; 
&lt;span class="nf"&gt;I&lt;/span&gt; want to see which of my repos drie would build and tell drie which it should build. 
&lt;span class="err"&gt;So&lt;/span&gt; &lt;span class="err"&gt;that,&lt;/span&gt; &lt;span class="err"&gt;drie&lt;/span&gt; &lt;span class="err"&gt;builds&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;repos&lt;/span&gt; &lt;span class="nf"&gt;I&lt;/span&gt; want built and not the ones I dont want built

&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="err"&gt;someone&lt;/span&gt; &lt;span class="err"&gt;who&lt;/span&gt; &lt;span class="err"&gt;pushed&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt; change
&lt;span class="nf"&gt;I&lt;/span&gt; want to see if it built successfully and if there are changes that failed.

&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="err"&gt;someone&lt;/span&gt; &lt;span class="err"&gt;who&lt;/span&gt; &lt;span class="err"&gt;built&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt; branch 
&lt;span class="nf"&gt;I&lt;/span&gt; want to see the build logs 
&lt;span class="err"&gt;so&lt;/span&gt; &lt;span class="err"&gt;that&lt;/span&gt; &lt;span class="nf"&gt;I&lt;/span&gt; can debug why the build failed

&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt; user
&lt;span class="nf"&gt;I&lt;/span&gt; want to be able to access the URL to my running app

&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="err"&gt;someone&lt;/span&gt; &lt;span class="err"&gt;running&lt;/span&gt; &lt;span class="nf"&gt;an&lt;/span&gt; app, 
&lt;span class="nf"&gt;I&lt;/span&gt; want to see the applications logs 
&lt;span class="err"&gt;so&lt;/span&gt; &lt;span class="err"&gt;that&lt;/span&gt; &lt;span class="nf"&gt;I&lt;/span&gt; can debug why its not working

&lt;span class="err"&gt;As&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt; user 
&lt;span class="nf"&gt;I&lt;/span&gt; want to log into my dashboard using github
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our meeting yesterday we talked through these top six stories and I made additional notes in the Trello cards to do my best to capture the nuances of what the client wanted.  I also pulled in screenshots from other existing systems that have parallel with the kinds of things they want.  drie has committed to making the whole project open source, which ticks important boxes for us at AgileVentures, where one of our twin goals is learning.  We avoid working on closed-source projects because of the difficulty this presents in terms of sharing the learning experience with the rest of the community.&lt;/p&gt;

&lt;p&gt;Now we need to come up with a budget for getting this done, and getting it done within a 2 to 3 week timeframe.  We have a pool of 30 premium members who are eligible to be involved with the project.  I&amp;rsquo;ve got to perform a complex series of calculations to ensure that drie gets value for money, that we have the right number of sufficiently experienced folks on the team, and that I get compensated for my own time while simultaneously not driving myself into the ground AND keeping all the other different parts of AgileVentures ticking along.  No pressure then :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=it8sThsoI-8"&gt;&amp;ldquo;Martin Fowler Scrum&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jcqq-_DNun8"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Sponsoring Resource Challenged Developers</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/30/sponsoring-resource-challenged-developers/"/>
    <id>http://blog.url.com/2017/01/30/sponsoring-resource-challenged-developers/</id>
    <published>2017-01-30T00:00:00+00:00</published>
    <updated>2017-02-22T21:51:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was an exciting Friday as our first sponsored Premium member made their first pull request against the LocalSupport open source project.  We&amp;rsquo;d onboarded a Kenyan student before the break having received sponsorship for a single AgileVentures Premium support plan from an anonymous US based donor.  The Kenyan student had completed a coding bootcamp, but was still looking for experience on some real world projects.  They were unfortunately unwell with malaria over the break and couldn&amp;rsquo;t get started until the new year.  A couple of weeks back we&amp;rsquo;d managed to get them set up with the LocalSupport code base on their linux machine, which was a great step forward.&lt;/p&gt;

&lt;p&gt;Onboarding to our open source projects in AgileVentures is still much more complicated than we&amp;rsquo;d like.  In the ideal world, perhaps, we&amp;rsquo;d be able to drop folks directly into a working environment with all the tests passing, ready to start coding on a bug, chore or feature.  We&amp;rsquo;ve tried things like vagrant and docker to have developers start from a virtual machine with everything set up already, but while that puts all the needed components in one place, there&amp;rsquo;s then having new folks understand the vagrant/docker virtual machine concept.   Although maybe we just haven&amp;rsquo;t put enough energy and ingenuity into getting to the bottom of the problem?  &lt;/p&gt;

&lt;p&gt;The virtual machine that the MOOC used to distribute created a standard default, but lead to the code running more slowly on the developer machine and was difficult to download in one big chunk over spotty internet connections.  That said, I don&amp;rsquo;t have firm data on that.  The vagrant/docker approaches made the downloads lighter weight, but then there were wrinkles regarding being able to edit the code in editors on the host machine.  Where possible we&amp;rsquo;d love for developers to be able to stay with their preferred developing environment.  That said, C9 is an interesting alternative that some have used with success, although there are space limitations there.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;rsquo;m at fault for having a fast machine and not experiencing the pain of setup and install frequently enough.  Maybe the pain of the install experience has an important filtering effect on those with lower levels of commitment, and maybe seeing how the sets of connected libraries get installed is useful for understanding the project dependencies?  I really don&amp;rsquo;t know.  I know my kids (8, 8 and 11) would have no patience for it, and they are learning to code using CodeCombat, where all coding takes place in the browser like CodeSchool, Codecademy and CodeWars.&lt;/p&gt;

&lt;p&gt;Maybe there&amp;rsquo;s a shortcut that I&amp;rsquo;m missing, or maybe I&amp;rsquo;ve just been mis-directing my efforts over the last 3 years on LocalSupport and other projects.  I am not sure.  What we did just do was create a separate #localsuppport-install channel on Slack specifically for giving support on the install process.  There we have managed to help folks through ruby/gem versioning and postgres permission issues.  Those two seem to be common stumbling blocks.  I&amp;rsquo;m hoping we can keep improving the docs.  Has trying to migrate from GitHub wiki to docs in the repo helped or hindered? I&amp;rsquo;m not sure.&lt;/p&gt;

&lt;p&gt;So the first breakthrough was getting the sponsored Kenyan student (and a few others) through the install process.  However having got everything installed and all the tests passing, the question was what next?  I&amp;rsquo;m trying to write more and more about how we work with Pivotal Tracker to manage the work on the project.  There&amp;rsquo;s a clear flow evolving in my mind of the appropriate strategy to really engage with the project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look through all the existing pull requests (commenting if so inclined)&lt;/li&gt;
&lt;li&gt;Look through all the current tickets (reaching out to those working on them to offer help if so inclined)&lt;/li&gt;
&lt;li&gt;Look through all the backlog tickets (posting questions about any you are interested in working on)&lt;/li&gt;
&lt;li&gt;Looking through the icebox tickets (starting votes on any that you are interested in)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may not be the best process for every individual.  Perhaps some people would better start by slowly familiarizing themselves with the codebase, reading all the documentation, and maybe similarly for the technology stack and any components used.  The idea behind the pattern described above is that this is the &amp;ldquo;rinse-and-repeat&amp;rdquo; that one would use to again and again to make ongoing contributions to a project.  Reading code and documentation can be interleaved anywhere, but it seems to me that interaction with the existing project team is critical to avoid duplicated effort, and being able to benefit from the team&amp;rsquo;s existing knowledge.  In each of the above, if you don&amp;rsquo;t find a hook with an existing team member&amp;rsquo;s work, you move on to the next step, where eventually you&amp;rsquo;ll end up starting a vote and alerting the rest of the team to your interest in working on something.&lt;/p&gt;

&lt;p&gt;Of course looking through the chunks of code in pull-requests may be disorienting and confusing for the new developer, but this is a critical skill.  Maybe in aggregate, just looking at other folks submitted slivers of code and comments on them from the rest of the team will put more folks off than pull them into the process?  I&amp;rsquo;m not sure :-) I just keep following my personal maxim that the learning should replicate the actual doing as closely as possible.  Scaffolding and support, yes!  Simplification, yes!  But still as realistic as possible, and in bite sized chunks for quick feedback and the feeling of progress.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d outlined the above in various fashions (docs and Slack posts) but there wasn&amp;rsquo;t any activity for a while from our new folks.  Here&amp;rsquo;s where the Premium support made the difference.  Under other circumstances I couldn&amp;rsquo;t really justify additional outreach for those who weren&amp;rsquo;t taking the initiative.  I reached out to the sponsored member and suggested a low-complexity ticket that might be a good place to start.  That seemed to do the trick.  We had a vote in the main #localsupport channel on the ticket, which involved some refactoring of Cucumber step definitions to make their meaning more explicit.  Most of us voted 1, while the sponsored member voted 2, putting them on the spot to explain their reasoning.  That was perhaps unfortunate.  New folks will often want to remain in the background of the process, but that&amp;rsquo;s partly what the voting is about, to identify differences in assumptions which we might miss without the explicit vote.&lt;/p&gt;

&lt;p&gt;It was also highlighting failures on my part to really explain the details of the chore in the ticket.  Fortunately the Slack allowed me to explain, and I quickly updated the ticket and got us to the point where we were all agreeing on a 1 and we now had a voted chore for the sponsored member to work on.  And yes, I know that Pivotal doesn&amp;rsquo;t recommend voting on chores and bugs, but we realized a while ago that in an open source project with high churn that velocity measurements are less important than highlighting the complexity levels of chores and bugs to new team members.  Anyhow, with some help from a mentor the sponsored member got an initial pull request in, on which we were able to give feedback, and was then improved upon to get the CI green and handle merge conflicts and so on.&lt;/p&gt;

&lt;p&gt;Only time will truely tell, but from the chat in group and private channels it seemed like it was all a huge confidence boosting experience.  Just making a pull-request itself and handling things like CI and merge conflicts is more than task enough itself in the first instance; let alone trying to BDD a new feature from scratch or fix a complex bug.  By taking one of our relatively simple refactoring tickets we were able to get a new person understanding our project flow, and in relatively short order getting the satisfaction of having contributed to an open source project.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll see how it goes, but I&amp;rsquo;d love to keep rinsing and repeating this with the sponsored member, helping building their confidence up on gradually more complex tasks.  And then at the bigger scale I&amp;rsquo;d love to be doing this for more and more folks around the world.  Think you could spare £10 (~$12.50) a month to help a developer in a resource-challenged part of the world get the help and support I describe above?  See &lt;a href="http://www.agileventures.org/sponsorship"&gt;http://www.agileventures.org/sponsorship&lt;/a&gt; to find out more about how you can help us help a resource challenged developer in another country learn modern OS development skills on real projects and make a real difference in the world!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>NonInvasive Progress</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/26/non-invasive-progress/"/>
    <id>http://blog.url.com/2017/01/26/non-invasive-progress/</id>
    <published>2017-01-26T00:00:00+00:00</published>
    <updated>2017-02-22T21:51:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My cold last week meant there&amp;rsquo;s a delay between the first publication of my daily blogs and the reviews I get from the AV community (particularly Federico).  I&amp;rsquo;m still going though.  My current routine is knock out a blog in the morning, and review a blog from the week before in the evening and push it to our nonprofits site.  Also in the evening I do a second review on a blog from a couple of months previously and re-publish on medium with edits and changes.  One I just pushed out was on a concept I call &lt;a href="https://medium.com/agileventures/noninvasive-programming-9821bc3c3f45#.gfps0rbmn"&gt;NonInvasive Programming&lt;/a&gt;.  I was calling it &amp;ldquo;DriveBy&amp;rdquo; coding for a while, but I decided I didn&amp;rsquo;t like the violent connotations.&lt;/p&gt;

&lt;p&gt;Things are coming full circle here, with me working on the same area of the codebase, again in a NonInvasive fashion, and this time with tiny solo efforts in between admin tasks.  By NonInvasive I am probably just channeling Kent Beck&amp;rsquo;s:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do the simplest thing that could possibly work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe I&amp;rsquo;m not adding anything to that, but I usually associated Kent&amp;rsquo;s &lt;a href="http://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork"&gt;&amp;ldquo;Simplist first&amp;rdquo; assertion&lt;/a&gt; with test driven design and creating things from scratch.  In my mind NonInvasive Programming is all about dealing with legacy code like that in WebsiteOne.  It&amp;rsquo;s clearly a kindred spirit.  Am I adding any value by breaking out a new term?  Let&amp;rsquo;s see.  The phrase is making sense in my head: to describe the process of handling the overwhelming sets of changes it seems we need to get us to a sustainable system.&lt;/p&gt;

&lt;p&gt;My goal is to make it possible for Premium members to upgrade themselves from one Premium plan to another.  At the moment this is something I do manually through the Stripe dashboard for Premium members when they reach out to me through Slack.  That process is just fine at the moment, and really valuable as I get a little dialogue with the member about their needs and so on.  However it won&amp;rsquo;t scale up if and when the number of Premiums ramps up, and I also want the interface to help make it clear to Premiums that they can upgrade.  It&amp;rsquo;s funny, when you&amp;rsquo;re working on something really intensely and talking to several folks about it each day, and blogging about it, and streaming your sessions talking about it on YouTube, it&amp;rsquo;s easy to slip into assuming that everyone&amp;rsquo;s following along :-)&lt;/p&gt;

&lt;p&gt;Of course everyone has their own busy lives to take care of and the vast majority of them really don&amp;rsquo;t have the time to follow all your blogging and video-casting, even if you could magically get it down into really pithy bytes of marketing content (although maybe that would help).  In one recent Slack conversation with a Premium, I nervously mentioned that we were doing mob programming sessions on Avdi Grimm&amp;rsquo;s Confident Ruby.  I was nervous because I&amp;rsquo;m nervous about promoting our services to folks who might not want them.  The response was enthusiastic.  &amp;ldquo;I didn&amp;rsquo;t know about that, where do I sign up?&amp;rdquo;.  Perhaps I need to be a little more confident reaching out.&lt;/p&gt;

&lt;p&gt;Maybe I should keep things purely manual until we get into the black (financially), but my intuition is that folks will feel more comfortable if they can press the upgrade button themselves; and if the upgrade button is there, then it&amp;rsquo;s discoverable and that should help; and we also have some unsightly bugs in the system as we try to handle corner cases like some Premium members sponsoring others, and providing the ability for a sponsor to upgrade someone&amp;rsquo;s plan, versus the individual doing it themselves.  So there&amp;rsquo;s a lot to handle.  The previous NonInvasive sessions had been about just making it possible to upgrade from Premium to PremiumPlus.  The process uncovered various smells in the code, and also since then, we introduced a series of intermediate plans, and upgrading to them first makes loads more sense.&lt;/p&gt;

&lt;p&gt;This next round of NonInvasive activity has involved splitting out several tickets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1524"&gt;Support generic Premium upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1526"&gt;Refactor card update out of subscriptions controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1521"&gt;Confusion about subscription vs single monthly payment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1253"&gt;Stripe images and logos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1437"&gt;Existing Premium users can be upgraded by anyone, but that leads to failure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bigger picture here is the ongoing &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/936"&gt;Premium Epic&lt;/a&gt; which actually shows the significant progress we&amp;rsquo;ve made in the last 6 months knocking off tickets and setting up a system that is currently covering half our running costs.  Now we&amp;rsquo;ve just got to cover the other half!  I think the key ticket is this &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1524"&gt;support generic Premium upgrade&lt;/a&gt; and the other three are bugs in the same general area, and a refactoring task to pay down some technical debt that I&amp;rsquo;m guessing will make progress on the main &amp;ldquo;upgrade&amp;rdquo; task simpler in the long run.  &lt;/p&gt;

&lt;p&gt;Over the last two days I started punching out work on tiny slices of the bigger problem; little NonInvasive solo shots.  Desperately trying to avoid getting distracted by other little gremlins in the code, or at least making refactoring or bug tickets to record my ideas rather than diving in and fixing things.   I managed to adjust the upgrade so it upgrades to Mob from Premium, rather than to Plus, as a first round of improvement.  It doesn&amp;rsquo;t address much of what we want to do, but it&amp;rsquo;s a critical minor improvement as Plus is not highlighted as an available plan any more, so one user gripe is removed.  Additionally we&amp;rsquo;ve had many more Mob upgrades so having a button for this is more useful, and it serves to advertise the existence of mob a little more.  That gives me an idea &amp;ndash;&amp;gt; &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1530"&gt;tooltips ticket&lt;/a&gt;.  Am I shooting myself in the foot writing out all the tiny thoughts when I could be putting the time into programming?&lt;/p&gt;

&lt;p&gt;The blogging about the whole process over the last six months is allowing me to look back and confirm the shape of the bigger picture I think I am seeing.  Yesterday I finally pulled the credit card components out of the subscriptions controller, paying down the technical debt that I hope will make upgrading smoother, and our controllers have a more maintainable RESTful sheen.  It&amp;rsquo;s all so subjective - what&amp;rsquo;s a simple change, vs. a trivial change.  I&amp;rsquo;m going to keep slicing and kicking out tiny PRs in between admin tasks.  Let&amp;rsquo;s see if we can&amp;rsquo;t get AgileVentures into the black one PR at a time!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=20PkAsAs46I"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gh283SIP7pI"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Browser Tabs and Procrastination</title>
    <link rel="alternate" href="http://blog.url.com/2017/01/25/browser-tabs-and-procrastination/"/>
    <id>http://blog.url.com/2017/01/25/browser-tabs-and-procrastination/</id>
    <published>2017-01-25T00:00:00+00:00</published>
    <updated>2017-02-22T21:51:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;First day back in the office as the cold recedes.  Feel like I could happily stay in bed, but am worried my legs are cramping up.  Distracted trying to get to the blog. Can&amp;rsquo;t think of a title. Ended up applying for MailChimp&amp;rsquo;s nonprofit discount.  It&amp;rsquo;s that process of closing old browser tabs.   The motivation is to try and stop the tabs from getting out of control.  On a bad day I can have 10 browser windows each with 30 tabs.  You can see how this relates to the state of my desk.  Somehow it&amp;rsquo;s all tied into levels of motivation.  I&amp;rsquo;m motivated to write blogs.  It feels good.  It would almost be painful not to write a blog, but the &amp;ldquo;Garden waste collection&amp;rdquo; letter on my desk from the council that I need to process and will likely involve navigating to another website and getting my debit card out to pay for the next year&amp;rsquo;s worth of garden waste collection &amp;hellip; just looking at it made my heart sink.  There was another piece of paper on my desk relating to the guarantee on our new windows.  Somehow that was easier to cope with.  I just needed to file it and I used that as an excuse to transfer one folder from the old filing cabinet to the new.   Mission accomplished, although even just twisting around to do that wasn&amp;rsquo;t entirely pleasant.  It&amp;rsquo;s pretty chilly here at the moment (freezing fog) and I&amp;rsquo;m stiff from walking the kids to school.&lt;/p&gt;

&lt;p&gt;Where was I?  Browser tabs, right.  So just like I&amp;rsquo;m trying to stay on top of my physical desk organisation, so I am trying to manage my browser tab addiction.  Closing a few when the opportunity arises makes sense, right?  Then I find myself getting distracted by what I&amp;rsquo;m closing.  I just closed about 10, the detritus of the second half of yesterday with tabs related to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull request from Corey on the homepage event live status for WebSiteOne - getting CSS loading for &amp;ldquo;Whos me the page&amp;rdquo;&lt;/li&gt;
&lt;li&gt;MailChimp pages that I was showing the new marketing intern&lt;/li&gt;
&lt;li&gt;WebsiteOne waffle board and other issues I&amp;rsquo;d opened in a flurry yesterday&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perhaps if I were a well-adjusted non-parent I would be closing the above sets of tabs at the time of use, rather than this morning. I go to them partly to find a tab I don&amp;rsquo;t need so that I can use it to navigate to &lt;a href="https://github.com/AgileVentures/av-static-website"&gt;https://github.com/AgileVentures/av-static-website&lt;/a&gt; (rather than opening yet another new one) from where I start creating blogs.  I used to just open a text editor, but after discussing the flow with folks, I followed Arreche&amp;rsquo;s suggestion of editing directly through the GitHub web interface, which I am pretty much enjoying, but it does have the associated danger that I need to open a browser to do it.  I guess the &amp;ldquo;safer&amp;rdquo; thing to do would be to just hit command-N and not try to clean up the old tabs?  It&amp;rsquo;s funny - seeing the MailChimp pages, I just felt a spurt of motivation to apply for that discount.  It took maybe a minute or two to navigate to the right place and get a message sent off through their website form.  That slowed me from getting to the blog, and could have been done later, or perhaps even would have been better off being done by someone else.&lt;/p&gt;

&lt;p&gt;Motivation, energy, enthusiasm, energy, it&amp;rsquo;s all very strange.  I could easily spend my entire day procrastinating.  With Slack and email I could spend my entire time just reponding to folks and thoughts, and totally fail to make progress on things on my todo list.  There&amp;rsquo;s a sort of nervousness that overcomes me if I can&amp;rsquo;t get down to my allotted tasks, such as trying to get the blog done before 10:30am.  I&amp;rsquo;m very conscious of how time can get frittered away with random things if you&amp;rsquo;re not careful.  It&amp;rsquo;s interesting because in some ways what I&amp;rsquo;ve always enjoyed, and wanted, is to be able to focus on what I want in the moment.  I remember experiences from my PhD (which in the UK can be very open-ended) where I was free to read whichever research papers I wanted, and research whatever I liked.  In contrast to schoolwork with its prescribed curricular materials, I could start looking at something and decide to put it down if I wasn&amp;rsquo;t interested.  I really enjoyed the complete freedom to focus on what was interesting to me in the moment.  I love sitting at my computer and moving to the area of Slack, email or the web that happens to interest me; or working on the part of a codebase that I&amp;rsquo;m currently interested in looking at.&lt;/p&gt;

&lt;p&gt;Having to sustain an income makes this more complicated, as just completely aimless meandering doesn&amp;rsquo;t seem to magically pay the bills.  However I&amp;rsquo;m also enjoying the mental gymnastics required to work out which are the activities that are bringing in the money.  It adds spice to the mental process of task switching.  To go back to the tab closing, the items left open yesterday reflect previous fast paced task switching, and a strong desire to eke every last moment of efficiency out of the day.  I had 10 minutes left before I was picking up the kids from their evening activity last night and I immersed myself in Corey&amp;rsquo;s pull request, working to dig up factoids and thoughts that might help.  I think I got a nugget of insight, but it was then time to be taxi-driver for my kids, so it&amp;rsquo;s shut the computer fast, lots of tabs left open.  In a different context, maybe I&amp;rsquo;d be taking the time to clear up after myself, but then again maybe I&amp;rsquo;m just a vicious task-switcher.  The process of clearing up being less appealing or interesting than the digging up of info.&lt;/p&gt;

&lt;p&gt;It also occurs to me that the data I sent to Corey would be more digestible and understandable if reviewed and reworded.  I&amp;rsquo;m almost tempted to post in what I added to the PR here, but it&amp;rsquo;s longish, so here are the links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/AgileVentures/WebsiteOne/pull/1519#issuecomment-274916426&lt;/li&gt;
&lt;li&gt;https://github.com/AgileVentures/WebsiteOne/pull/1519#issuecomment-274921510&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part of what I&amp;rsquo;m doing here is also trying to show him my thought process and the tools I&amp;rsquo;m using to investigate.  I am verbose.  There, I said it.  I have a problem with verbosity.  I like writing out my thoughts in detail, I like saying my thoughts in detail.  Part of the motivation of blogging is so I don&amp;rsquo;t spend quite so much time boring folks to tears with descriptions of my thoughts.  I am also afflicted with not being as sensitive as I might to other people&amp;rsquo;s comfort (or discomfort) levels when I&amp;rsquo;m talking.  I am working on getting better at that!  Unfortunately I really do enjoy my own thought processes.  I guess this has become more a problem as I get older and more senior, and some folks start to feel compelled to hang around and listen.  Apologies to everyone getting bored or frustrated with me externalising my mental activity.  I know that people are more likely to read tightly focused blogs, than they are my daily brain-dumps &amp;hellip;&lt;/p&gt;

&lt;p&gt;I certainly wouldn&amp;rsquo;t have time to read and absorb the amount of material I generate from someone else.  I don&amp;rsquo;t expect anyone to keep up with my output.  Where I do want to get to is a process where I can generate a shorter book or manual that sums up all this stuff (that I&amp;rsquo;m thinking about Agile project management) in a more digestible form.  I guess the other option is one blog a week where I spend one day generating and four days polishing, and changing, and making it shorter.  We&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;I was going to have this blog get into how yesterday I very explcitly didn&amp;rsquo;t pair program and instead did a solo non-invasive coding on the WebsiteOne Premium upgrade work.  In parallel we got three small related tickets voted on in the WebsiteOne Slack channel, and I&amp;rsquo;m starting to feel like this is the efficient way to code at the moment, given my admin commitments.  We&amp;rsquo;ll see.  More on that soon.&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=M599bZzEAkw"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=li0wQC1LQ3Y"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
