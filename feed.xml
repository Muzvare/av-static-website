<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-12-09T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Making Progress (for the Greater Good)</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/09/making-progress/"/>
    <id>http://blog.url.com/2016/12/09/making-progress/</id>
    <published>2016-12-09T00:00:00+00:00</published>
    <updated>2016-12-13T21:47:34+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I went over time for yesterday&amp;rsquo;s blogging.  I&amp;rsquo;d tried to cap it at 20 minutes, but I got into a fair bit of detail about the options for testing/mocking the Twitter API before getting on to the meat of the matter I was trying to focus on; Agile DevOps.  I guess there are two kinds of blogs, those with a succinct focus on a particular topic and those that are a mixed bag.  The process of profiling my days in blogs recently have probably tipped me more towards the latter, with the blog being a reflection of all the things I did on the previous day.  I&amp;rsquo;m acutely aware that the length, lack of focus, lack of images and high code content probably make my blogs less readable for many.  I am writing these things partly for others to read, but also partly just to get my thoughts straight, and stop them from being lost in an ever dissappearing slack history.&lt;/p&gt;

&lt;p&gt;Maybe writing one really focused blog a week would have more impact in terms of creating content that drew people into AgileVentures, that got across key concepts about Agile Development and Software Engineering.  However I&amp;rsquo;m also testing myself.  Can I document my process every day for a year?  Are people&amp;rsquo;s diaries not meant for publication?  I committed to doing a year of this and I like to keep my commitments.  Maybe after that year I&amp;rsquo;ll switch to doing one blog a week, still writing every morning and revising the following day, but doing at least five revisions where I delete stuff and increase focus. Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;Despite running over on the previous day&amp;rsquo;s blog, I got a fair bit of admin work done, although it was clear that the Zapier automation wasn&amp;rsquo;t working as expected.  The attempt to get it to post as non-bot had failed, so I&amp;rsquo;ve set it up for a simpler bot post today, although it&amp;rsquo;s clear that it can&amp;rsquo;t easily post the link to the precise blog file - the closest it can get to that is the pull request URL.  I&amp;rsquo;m also not sure how much I&amp;rsquo;ll get charged &amp;hellip; It&amp;rsquo;s just one thing in my list of &amp;ldquo;automate to create time&amp;rdquo; that I generated from profiling my days a week or so back:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Automation

&lt;ul&gt;
&lt;li&gt;[ ] try to fix up lower 3rd thing &amp;ndash;&amp;gt; no response from github repo post &amp;hellip;&lt;/li&gt;
&lt;li&gt;[ ] automate more of blogging TRYing Zapier&lt;/li&gt;
&lt;li&gt;[ ] automate greeters&lt;/li&gt;
&lt;li&gt;[ ] automate project management (slackbot)&lt;/li&gt;
&lt;li&gt;[ ] automate twitter connections&lt;/li&gt;
&lt;li&gt;[x] automatically resize blog images for fixed width&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s a lot outstanding.  At least the css image settings in the blog meant I wasn&amp;rsquo;t having to resize images I put in the blog.  Getting my hangout lower third banner fixed seems like we&amp;rsquo;d have to create our own hangout tool box and release it as a hangout plugin, assuming we can even get some working source code.  That doesn&amp;rsquo;t seems appealing since we&amp;rsquo;re unclear about the future of Google&amp;rsquo;s support for hangout plugins.   That said, sponsors keep commenting positively on my lower third banner when I have it on the hangouts, and I kind of feel naked without it :-)&lt;/p&gt;

&lt;p&gt;The Slack is hotting up and there are lots of people to greet, so need to automate that.  At the moment I&amp;rsquo;m just doing in snatches of time between other things. Most of the day was taken up with pull request reviews and our third premium mob programming session.  We&amp;rsquo;re getting deeper into Avdi Grimm&amp;rsquo;s Confident Ruby and the Premium Mob members are starting to get more confident about typing out code in the shared C9 space, although it&amp;rsquo;s still early days.  I&amp;rsquo;ve assigned &amp;ldquo;homeworks&amp;rdquo; for each member to develop their own domain models that use techniques from the sessions.&lt;/p&gt;

&lt;p&gt;We had pull requests from several premium members on LocalSupport and WebSiteOne, as well as from some MOOC students.  Off the back of the &amp;ldquo;Martin Fowler&amp;rdquo; scrum we reviewed a pull request relating to search engine optimization (SEO).  It seemed a little convoluted and we fixed it up with the Rails &lt;code&gt;prepend_before_action&lt;/code&gt; method, and then the PR author jumped in to a later LocalSupport session that Michael and I ran to review the other PRs.  That was a great example of AgileVentures working as I imagined.  The MOOC student hadn&amp;rsquo;t been in the original scrum, but had seen our comments on the PR and I&amp;rsquo;d posted a link to the video of the scrum.  I don&amp;rsquo;t know if they had watched it, but they saw the LocalSupport pairing session link ping into the #localsupport channel when I started that, and we were able to have a nice connect up and resolve some other outstanding issues on the pull request.  If I&amp;rsquo;d just started a private session with Michael, or if our AgileBot hadn&amp;rsquo;t worked the student would not have so easily been able to drop in to chat.&lt;/p&gt;

&lt;p&gt;This makes me think we really want to get the slack channel settings on the AgileBot sorted so that every project channel gets notifications of appropriate pairing sessions.  Michael and I discussed that in an overview session on WebSiteOne, and we could automate most of the thing with calls to the slack API to get project managers to select their project channel from a dropdown when setting up a project, or just ensure that the project slugs on WSO exactly matched the channel names on Slack.  That&amp;rsquo;d be another epic and I deemed further PayPal integration to be the thing we should focus on first.  All the project support goes into the free tier, and while we want project managers and teams to have the best support possible, I&amp;rsquo;m going to be no use to them next year if I can&amp;rsquo;t get us on a stable financial footing.&lt;/p&gt;

&lt;p&gt;Before we&amp;rsquo;d got on to WSO, Michael and I had spent some time bashing out a refactoring of another PR that was addressing complexity issues flagged by Code Climate on LocalSupport.  We maybe spent too much time wrestling out the code together, but I was pretty pleased with the solution we came up with.  We worked out that the complexity was due to a combination of nested and non-nested routes in the Volunteer Opportunities controller:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:volunteer_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;on: :collection&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:organisations&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:volunteer_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This had lead to code like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_owner?&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;current_user_has_organisation?&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;friendly_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;current_user_has_organisation?&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;VolunteerOp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I know that maybe we should be using the pundit or cancan gems to manage roles and persmissions, but we staying focused on the refactoring. The proposed alternate had ended up creating overlap between two &lt;code&gt;before_action&lt;/code&gt;s, which we unravelled with a set of method names that tried to connect up with the reasons for the split:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_owner?&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;can_edit?&lt;/span&gt; &lt;span class="n"&gt;org_independent_of_route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_independent_of_route&lt;/span&gt;
  &lt;span class="n"&gt;organisation_set_for_nested_route?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;organisation_for_simple_route&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_set_for_nested_route?&lt;/span&gt;
  &lt;span class="vi"&gt;@organisation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_for_simple_route&lt;/span&gt;
  &lt;span class="no"&gt;VolunteerOp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_for_nested_route&lt;/span&gt;
  &lt;span class="no"&gt;Organisation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;friendly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_organisation&lt;/span&gt;
  &lt;span class="vi"&gt;@organisation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_organisation_for_nested_route&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least the next folks in might have a fighting chance of seeing the relation to the routes up front.  Although maybe they&amp;rsquo;ll tear their hair out in the multiple steps of redirection in the code.  Probably the better thing in the long term will be to unwind the routes.  We could remove the nesting if we insisted that all the other controller methods moved into the nesting (i.e. :edit, :show, :update, :destroy), but that would be a bigger refactoring for another time.&lt;/p&gt;

&lt;p&gt;Anar who&amp;rsquo;d been working on this PR dropped in to our planning session and was able to participate in a manual vote on the further paypal integration, and in the background I used the Async slack bot to run three other votes in sequence in LocalSupport, WebsiteOne and AsyncVoter itself.  Gotta get multi-channel parallel voting enabled!  But again that&amp;rsquo;s free tier &amp;hellip; hmm although maybe we should be offering extras like that as part of premium project support plans?&lt;/p&gt;

&lt;p&gt;In summary&amp;ndash;if there can be a summary for a mixed bag blog like this&amp;ndash;it feels like there&amp;rsquo;s progress. The whole concept of Premium members paying for priority code reviews on pull requests is that there&amp;rsquo;s huge learning value from that process, and the quicker you get the PR review the more valuable it potentially is.  Also, our mentors&amp;rsquo; time is a limited resource.  Probably the individual features and bug-fixes could be delivered faster if our most experienced mentors just worked on the code themselves rather than reviewing submissions from less experienced developers.  However the hope, or the gamble, is that the slow-down on delivery can be compensated for by the Premium payments that allow the whole enterprise to sustain itself, and that the projects move forward and deliver value through the process.  Also that once people are paying/sponsoring/donating to something, that they become more invested in it, and we can ride the win-win cyle up to a scale where more and more people are compensated for their time, and they are all working on worthwhile projects for the greater good!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PjpUk3fBBDs"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-PeG-5Egd2E"&gt;Pull Request Reviews on LocalSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=m4uOCp6ZfyE"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kpk5yNiQox8"&gt;WebsiteOne project planning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Agile Dev Ops</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/08/agile-dev-ops/"/>
    <id>http://blog.url.com/2016/12/08/agile-dev-ops/</id>
    <published>2016-12-08T00:00:00+00:00</published>
    <updated>2016-12-13T21:47:00+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So my project manager partner for WebsiteOne Raoul has got really busy recently, so we negotiated that I would take on some of the PR merging and release responsibility this week.  After the usual blogging and admin and &amp;ldquo;Martin Fowler&amp;rdquo; scrum I jumped into a hangout with Matt and Michael, and tried to use the opportunity to debug the YouTube hookup problems Matt had been having the day before.  This time Matt was getting a new error that he couldn&amp;rsquo;t even start a Hangout On Air, so we couldn&amp;rsquo;t get far.  Burned 20 minutes on that, although it&amp;rsquo;s a fairly common issue our users have, and if we could fix it then we could get more video broadcasts and streaming of other pairing sessions.  Then again I don&amp;rsquo;t know that our YouTube activity is driving much traffic to our site; it doesn&amp;rsquo;t register in Google analytics.  Although people might just be typing in searches direct for &amp;ldquo;AgileVentures&amp;rdquo;, but I&amp;rsquo;ve yet to hear anyone say &amp;ldquo;Oh, I saw your pairing video on YouTube and wanted to get involved&amp;rdquo;.  The viewing figures on our videos are spiking (the pair programming session I started with Matt and Michael has 333 views today, 5 thumbs up AND 5 thumbs down!).  However, even anecdotally the Ruby Rogues podcast has generated more traffic than all our YouTube activity combined.  Still the YouTube recordings are at least partly for the benefit of the existing community, to allow them to refer back to previous pairing sessions.&lt;/p&gt;

&lt;p&gt;Alot of the WebsiteOne infrastructure is set up around supporting Google Hangouts and YouTube streams.  Matt and Michael had got in a Work in Progress pull request that added a characterisation test to the tweeting of YouTube links that was missing an acceptance test.  This was related to trying to fix a long standing issue that our system tweets video links even when the videos are missing.  We&amp;rsquo;d previously backed off the bigger fix to ensure the current functionality was described in an acceptance test.  I needed to get on to WSO devops and needed to give Matt and Michael feedback without jumping in and trying to fix lots of things.  At least that was my strategy as I reviewed their code.  They had filtered the sensitive Twitter tokens from the VCR cache, which was great, but I had two concerns with the new acceptance test below:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@vcr&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Tweeting Live Events
  As a site admin
  In order to increase participation in events
  I would like live events to generate twitter notifications

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; an event exists

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Event going live causes tweets of hangout link and youtube link to be sent
    &lt;span class="nf"&gt;When&lt;/span&gt; the HangoutConnection has pinged to indicate the event start, appropriate tweets will be sent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One was that we had all the work being done in a single Cucumber step, which was also bound quite tightly to the underlying implementation:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^the HangoutConnection has pinged to indicate the event start, appropriate tweets will be sent$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;yt_tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Alejandro just hosted an online #scrum Missed it? Catch the recording at youtu.be/11 #CodeForGood #opensource"&lt;/span&gt;
  &lt;span class="n"&gt;hangout_tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#Scrum meeting with our #distributedteam is live on http://hangout.test Join in and learn about our #opensource #projects!"&lt;/span&gt;
   &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;TwitterService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;twitter_client&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hangout_tweet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_call_original&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;TwitterService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;twitter_client&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yt_tweet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_call_original&lt;/span&gt;

  &lt;span class="n"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"hangout2750757B_ephemeral.id.google.com^a85dcb4670"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hasMicrophone"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hasCamera"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hasAppEnabled"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"isBroadcaster"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"isInBroadcast"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"displayIndex"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"108533475599002820142"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"displayName"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Alejandro Babio"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"https://lh4.googleusercontent.com/-p4ahDFi9my0/AAAAAAAAAAI/AAAAAAAAAAA/n-WK7pTcJa0/s96-c/photo.jpg"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;"na"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;"locale"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"na"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s1"&gt;'ORIGIN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a-hangout-opensocial.googleusercontent.com'&lt;/span&gt;
  &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="s2"&gt;"/hangouts/@google_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="ss"&gt;host_id: &lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="ss"&gt;event_id: &lt;/span&gt;&lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="ss"&gt;participants: &lt;/span&gt;&lt;span class="n"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="ss"&gt;hangout_url: &lt;/span&gt;&lt;span class="s1"&gt;'http://hangout.test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="ss"&gt;hoa_status: &lt;/span&gt;&lt;span class="s1"&gt;'live'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="ss"&gt;project_id: &lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="ss"&gt;category: &lt;/span&gt;&lt;span class="s1"&gt;'Scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="ss"&gt;yt_video_id: &lt;/span&gt;&lt;span class="s1"&gt;'11'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The challenge we had here was that we wanted to check the Tweets were sent, but that we were locking our acceptance test to the specific implementation of our TwitterService object.  A reasonable compromise for the time being perhaps, but could we use an RSpec spy on TwitterService to allow us to break the step into two and into a readable order?  Or was there some way to assert that the VCR cache had been hit in the appropriate fashion?  Both, things that could be investigated immediately.  I almost had the Rails console out, but pulled myself back, suggested to Matt and Michael that they just clean up some stray steps and scenarios and get this PR in.  We didn&amp;rsquo;t have unlimited time right now to look for a perfect test.  Some test was better than no test, which was the state we had been in before.&lt;/p&gt;

&lt;p&gt;Matt and Michael went off to another hangout and I got on with WSO devops.  I had been hoping to review the waffle board (project management) but only got so far as reviewing all the outstanding PRs.  I merged in the Premium controller refactoring PR that Michael and I had worked on, and checked that on the develop server - all good.  I looked to see what was in the hopper for deploying to production, and it wasn&amp;rsquo;t so much, so I decided to try and pull in the new PayPal integration as well.  I fell foul of merge conflicts and clobberings that I had anticipated when we broke out the separate PR for the refacotoring.  Frustrating, although I think I only burned an additional 30 minutes there.   Not sure if that was time well spent.&lt;/p&gt;

&lt;p&gt;I was making a mess on my local system, but the CI was passing, and it looked like we were ready to go, but then the controller specific stylesheets that I had been struggling with the day before were not working on production.  It seemed like they were not playing well with the asset pipeline.  All I was trying to do was to isolate the style for centering and add margin to the payment option wells.  Without they looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/3juob156frv89te/Screenshot%202016-12-08%2010.09.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;With they looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/o2tgyq1df0bls9y/Screenshot%202016-12-08%2010.09.57.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d spent an hour struggling to get that to work the previous day.  What should I do?  Just push out what we had?  Burn time fixing them up? I tried to recreate the issue locally by running the local server in production mode, fighting through the nest of environment variables that production needed to run: &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SECRET_KEY_BASE=asdfggfhdgs SECRET_TOKEN=12342ewwefdsaf AIRBRAKE_API_KEY=asdffgfhdgsf AIRBRAKE_PROJECT_ID=2342 be rails s -e production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but even then the local stylesheets wouldn&amp;rsquo;t load at all.  I&amp;rsquo;d spent 20 minutes and couldn&amp;rsquo;t replicate the bug locally.  In frustration I shiv&amp;rsquo;d in the necessary styles, because I anticipated the debug cycle checking for fixes in production mode on the develop server would be prohibitive:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"card_section"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-lg-5 well"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin: 10px; text-align: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- shiv because controller stylesheets now working in production mode see https://github.com/AgileVentures/WebsiteOne/issues/1450--&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin-bottom: 15px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Premium via Credit/Debit Card:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag subscriptions_path(plan: 'premium') do %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
                &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
                &lt;span class="na"&gt;data-description=&lt;/span&gt;&lt;span class="s"&gt;"A month's subscription"&lt;/span&gt;
                &lt;span class="na"&gt;data-amount=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt;
                &lt;span class="na"&gt;data-currency=&lt;/span&gt;&lt;span class="s"&gt;"GBP"&lt;/span&gt;
                &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt;
                &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Premium Membership"&lt;/span&gt;
                &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Subscribe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least I linked the ticket in to the comment, and hope we can circle back to fix that properly, although what it really inspires me to do is move the whole system to a static middleman app where we take a fresh start on the styling.  I pushed on.  There were still some &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1451"&gt;problems on staging&lt;/a&gt; that I think are related to the data there, and brittleness in parts of the app.  That needs fixing, since it interferes with our ability to do manual checks on staging; but I pushed on and was ultimately rewarded with the newly styled PayPal endpoint on production, and I hurredly fixed up all the static pages to ensure that they pointed to the new &amp;lsquo;subscriptions&amp;rsquo; endpoint.&lt;/p&gt;

&lt;p&gt;Agile DevOps?  I&amp;rsquo;d managed to negotiate a handover from my project-manager pair and get the first part of a bigger epic of PayPal integration out onto production.  I&amp;rsquo;d had to make several compromises along the way, but at least I&amp;rsquo;d flagged them with tickets, and thought I&amp;rsquo;d got a good insight into some of the problems facing us.  I still wonder if we really have performance issues?  The site feels sluggish, but perhaps the 150% memory error warnings from Heroku are just part of their sales strategy.  I am leaning towards an alternate approach where we have a middleman site for the main system, and things like events and projects can be pulled in via JavaScript of separate RESTful API endpoints.  This would mean that heavy load in one part of the site would not affect simple loading of about pages, and also allow the back ends of the different elements of the site to be compartmentalized and chopped and changed as necessary.  It would be a big change, but we&amp;rsquo;re already creating the individual microservices - let&amp;rsquo;s see how we go.  If we can move to the real model I think we really will have done Agile DevOps!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dxImOJLvadE"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VK9qIJwXG1g"&gt;Pair Programming and DevOps on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=uQErOajwgt4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Meetings vs Coding</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/07/meetings-vs-coding/"/>
    <id>http://blog.url.com/2016/12/07/meetings-vs-coding/</id>
    <published>2016-12-07T00:00:00+00:00</published>
    <updated>2016-12-12T21:19:00+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Tuesday suddenly sprouted a couple of meetings.  Well, the WikiEDU meeting had been planned from the week before, and gave WikiEDU developer Sage Ross the chance to tell AV about the WikiEDU project, which helps instructors set editing Wikipedia articles as assignments in class.  Sage heard about AgileVentures on RubyRogues and liked the idea and is bringing the open source non-profit project to AgileVentures.  WikiEDU is a Rails/React app that was developed by an agency and now needs maintainenance and also the development of new features.  See the full meeting in the &lt;a href="https://www.youtube.com/watch?v=nfsWSIXbHRc"&gt;video of that session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The meeting with sponsor, drie, to review where we were with deploying to drie push came up more suddenly, but was definitely half an hour well spent as we got more of the desired workflow and endpoints for migrating the LocalSupport project ironed out.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.harrowcn.org.uk --&amp;gt; drie instance (production)
https://staging.harrowcn.org.uk --&amp;gt; drie instance (staging)
https://develop.harrowcn.org.uk --&amp;gt; drie instance (develop)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There wasn&amp;rsquo;t much time left in the day for coding.  Matt, Michael and I got in a hangout that Matt started to look at the new characterization test for the legacy Twitter functionality on WebsiteOne.  Matt had issues with the hangout (YouTube not hooked up) that meant that it wasn&amp;rsquo;t recorded - we&amp;rsquo;ll need to debug that.  We got VCR sandboxing the test with a new Twitter developer account for Matt. The cuke for the current functionality looks like this:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@vcr&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Tweeting Live Events
  As a site admin
  In order to increase participation in events
  I would like live events to generate twitter notifications

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;Given following events exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;start_datetime&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;time_zone&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats_weekly_each_days_of_the_week_mask&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats_every_n_weeks&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Daily&lt;/span&gt; &lt;span class="n"&gt;scrum&lt;/span&gt; &lt;span class="n"&gt;meeting&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014/02/03&lt;/span&gt; &lt;span class="n"&gt;07:00:00&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;150&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="n"&gt;"Scrum"&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt;                       &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; an event &lt;span class="s"&gt;"Scrum"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Event going live causes tweet of hangout link to be sent
    &lt;span class="nf"&gt;When&lt;/span&gt; the HangoutConnection has pinged to indicate the event start, an appropriate tweet will be sent

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Event stream going live causes tweet of the youtube stream to be sent
    &lt;span class="nf"&gt;Given&lt;/span&gt; that the HangoutConnection has pinged to indicate the event start
    &lt;span class="nf"&gt;And&lt;/span&gt; youtube stream has gone live
    &lt;span class="nf"&gt;Then&lt;/span&gt; an appropriate tweet has been sent &lt;span class="c"&gt;# e.g. see live stream&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we uncovered various corner sad cases, such as when the tweet is too long.  I&amp;rsquo;m still desperate to de-couple the cukes from the steps that use the same factory girl elements as RSpec, but one thing at a time.  Michael and I took a stab at making progress on LocalSupport, but the drie https was flaking out and we didn&amp;rsquo;t make much progress.  After the dust from all the meetings settled we did spend a chunk on AsyncVoter trying to move the tests to a point where we could support simultaneous voting in multiple channels.  It was short and we didn&amp;rsquo;t introduce any new functionality, but we saw how Arreche had laid out an example Yada (Cucumber) test for us to play with, and we worked out how to use BotMock to check for messages in multiple channels.  I think I&amp;rsquo;ve convinced myself to stick with BotMock, particularly how Arreche has it loading through npm.  It&amp;rsquo;s so interesting to see the parallel evolution of the same functionality in the npm and bundle stacks.&lt;/p&gt;

&lt;p&gt;We were still left with whether we could get all the botmock stuff working with Yada, but I had to take my kids out to their evening&amp;rsquo;s activity.  I managed to review the ProjectScope pull requests while they played and looked back on a day in which I&amp;rsquo;d kept my blogging to 20 minutes, managed to get out an AV emailing, push an old blog to social media and get a few things done.  I&amp;rsquo;ve got a stopwatch running to keep this blog time under 20 minutes!  And I&amp;rsquo;m going to see if I can&amp;rsquo;t get Zapier to automate pinging Slack for me.  Another meeting today with a potential sponsor.  I&amp;rsquo;d rather be coding, but seems these meeting things are important to bring the money in &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xROu2SNKXmM"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DxuOMwiv2p4"&gt;LocalSupport devops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nfsWSIXbHRc"&gt;edu.wiki.dashboard project kickoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VL0ZO1uLZuo"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w02Ey4Z8xvA"&gt;Pairing on AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Speed Coding and Blogging</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/06/speed-coding-blogging/"/>
    <id>http://blog.url.com/2016/12/06/speed-coding-blogging/</id>
    <published>2016-12-06T00:00:00+00:00</published>
    <updated>2016-12-12T21:03:33+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Monday was the usual fight against torpor, but did get an hour&amp;rsquo;s pairing in with Michael on WSO where Michael drove a finish to putting the Paypal payment button on the same page as the Stripe credit card payment.  Before he started on that I got him to pull out the refactoring of the ChargesController to SubscriptionController into a separate pull request.  In the background I had half an eye on the builds of that which were failing due to some regressions on changes to cucumber steps.  We pared down the feature for putting the Paypal element front and center to:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@stripe_javascript&lt;/span&gt; &lt;span class="nt"&gt;@javascript&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following plans exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by card
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Subscribe"&lt;/span&gt; within the card_section
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="c"&gt;# And my member page should show premium details # TODO IMPORTANT - require login?&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by Paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see a paypal form within the paypal_section
    &lt;span class="c"&gt;# And the user should receive a "Welcome to AgileVentures Premium" email&lt;/span&gt;
    &lt;span class="c"&gt;# And my member page should show premium details # TODO IMPORTANT - will need hookup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Leaving in a few comments pointing at important future work.  Feel a bit messy about that - would it be better to be pointing to tickets as part of the bigger premium epic there?  Over lunch I left Michael pairing with Matt who&amp;rsquo;d been observing our pairing session.  They were looking at the feature on preventing tweets of dud videos that Sasha had left, and rather than get involved in a complex refactoring I suggested that the way forward was a new branch that wrapped the existing Twitter functionality in acceptance tests.  &amp;ldquo;Characterisation tests&amp;rdquo; of legacy code as Michael reminded us.  We&amp;rsquo;ll see if all this breaking out of smaller PRs bites us with merge conflicts or makes review easier.  Raoul&amp;rsquo;s been really busy recently so we might have to look at our PR review and deploy process to take account.&lt;/p&gt;

&lt;p&gt;After lunch I solo&amp;rsquo;d to add a sad path to the refactoring of the Premium branch that we&amp;rsquo;d identified since one missing part of the refactoring wasn&amp;rsquo;t caught by the tests.  I got that green and then started on tweaking the CSS for the Premium payment page now that it included both Paypal and Stripe buttons.  Working with the CSS was frustrating, as our controller specific stylesheets don&amp;rsquo;t load automatically on WSO, and even though I identified the code in the layout that would, turning that on produced &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1445"&gt;weird breakages throughout the cucumber tests&lt;/a&gt;.  There&amp;rsquo;s definitely something a little strange going on with the layout - which I think is also affecting performance on my local machine when running in develop mode.  Could this be affecting performance on the main system?  Perhaps a review of our layouts is in order.&lt;/p&gt;

&lt;p&gt;I hacked out a reasonable solution pulling in the controller specific stylesheet directly in the view:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= stylesheet_link_tag params[:controller], 'data-turbolinks-track' =&amp;gt; true  %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and found that the bootstrap &lt;code&gt;well&lt;/code&gt; class produced the sort of effect I wanted:&lt;/p&gt;

&lt;p&gt;&lt;img alt="payment buttons" src="https://www.dropbox.com/s/eelk7vro2owibuv/Screenshot%202016-12-06%2009.40.56.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The missing piece going forward is getting the Paypal payment to hit a webhook and update our WSO backend when payment completes.  From the Paypal documentation this looks not too hard.  It makes me think that there might have been a simpler way to get set up with Stripe buttons.  Do we actually have to hit Stripe&amp;rsquo;s server from our server to sign someone up to a subscription?  Could there be a pure button equivalent?  Although all the docs I&amp;rsquo;m looking at suggest that you still have to explicitly create the customer with a server side call.  Anyhow, further Paypal integration is the priority if we are going to support Paypal based sponsoring of other members.&lt;/p&gt;

&lt;p&gt;Tinkering with the CSS all burnt a lot of time and I reflected that I&amp;rsquo;m behind on sending out emails to AV members, pushing older blogs to medium and social media, and there are a lot of Premium pull requests to review, let alone project management for LocalSupport, AsyncVoter and making sure we are delivering to are commitments to Sponsors.  Short of making more time in the day I think I have to limit the time I spend writing the daily blog to a tight 20 minutes.  People keep telling me I&amp;rsquo;m too verbose generally so perhaps that will be an improvement :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/KqT5XWirMRg"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=y7bHXz0kCQA"&gt;Pairing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EOlcarJgn8s"&gt;Soloing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RQc_9isrGJY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring and Pairing</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/05/refactoring_and_pairing/"/>
    <id>http://blog.url.com/2016/12/05/refactoring_and_pairing/</id>
    <published>2016-12-05T00:00:00+00:00</published>
    <updated>2016-12-12T21:08:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So hot on the heels of our first AV member sponsoring other AV members for Premium support, another Premium member was talking about sponsoring some of their co-workers for Premium membership as Xmas gifts!  Now this particular Premium member prefers to pay through Paypal, which we had set up previously.  The Paypal endpoint in the AgileVentures site is just a custom button from the Paypal toolkit, on a custom method in the charges controller.  We&amp;rsquo;d just thrown that in, unlinked to the rest of the site, to serve as a quick check that the functionality would work and that the individual requesting Paypal payment would actually use it.  That purpose was served admirably and was used by two Premium members; tracer-bullet success!&lt;/p&gt;

&lt;p&gt;Now if we wanted to allow more folks to sign up with Paypal, and indeed sponsor other members via Paypal, we had some integration to do.  Not only that, it was clear that the Premium charges controller needed some serious refactoring.  I had originally created the charges controller on a spike, following the instructions in the Stripe documentation for creating a charge on a user credit card.  I&amp;rsquo;d immediately hooked things up to ensure that the user would be paying for a subscription to a plan.  We&amp;rsquo;d wrapped that whole functionality in VCR/PuffingBilly sandbox tests and then evolved that to RubyStripeMock, as well as adding the ability to sponsor others, and change credit card details.  We&amp;rsquo;d also evolved a domain model that started to capture some of our &amp;ldquo;business&amp;rdquo; logic, relating to the different kinds of Subscriptions and PaymentSources that we were supporting.  What we hadn&amp;rsquo;t managed to refactor was the ChargesController itself which was breaking the Rails convention of having controllers manipulate resources of the corresponding name.&lt;/p&gt;

&lt;p&gt;Our ChargesController was actually manipulating Subscriptions and CreditCards.  Over the weeks I felt pretty certain we wanted to rename our ChargesController to SubscriptionController, since that was the key resource that most of the controller methods were manipulating.  The CreditCard stuff should ultimately be moved to a different controller and the Paypal endpoint integrated into some RESTful manipulation of Subscription resources.  Michael and I started off driving the change by creating a &lt;code&gt;subscribe_self_to_premium.feature&lt;/code&gt; file.  The main cucumber feature file was inappropriately named &lt;code&gt;charge_activity.feature&lt;/code&gt;.  Again this was all part of my initial rush to spike out some charge pathway and demonstrate that revenue could be generated.  Having demonstrated that it was clearly time to clean up the name space.  The new feature file took inspiration from the scenarios in the existing &lt;code&gt;charge_activity&lt;/code&gt; file and looked like this:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by card
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"subscribe"&lt;/span&gt; within the card_section
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="nf"&gt;And&lt;/span&gt; my member page should show premium details

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by Paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"subscribe"&lt;/span&gt; within the paypal_section
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should be redirected to Paypal's payment screens
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="nf"&gt;And&lt;/span&gt; my member page should show premium details
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are still a little imperative, but it&amp;rsquo;s generally too challenging to try and fix too many issues at once.  Right here we were trying to get the name space fixed up.  Tweaking Cucumber scenarios to be more declarative could come later.  As it happened, we did already have a paypal feature test:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Charge Users Money
  As a site admin
  So that users can pay for premium services via paypal
  I would like to be able to sign them up for a recurring plan via paypal

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Sign up for premium membership via paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"/charges/paypal"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should see &lt;span class="s"&gt;"Agile Ventures Premium Membership"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see a paypal form
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My hope was that ultimately we&amp;rsquo;d be replacing this feature and the contents of &lt;code&gt;charge_activity.feature&lt;/code&gt; with this new file, that had a stronger indication of the high level goal in its name, i.e. Subscribe Self to Premium.  Of course that didn&amp;rsquo;t stop me from agonizing whether the &lt;code&gt;Given I visit &amp;quot;subscriptions/new&amp;quot;&lt;/code&gt; step was too high level, or whether writing it to force us to code a new URL endpoint and thus controller was the wrong thing to be doing at that stage.  I do believe strongly that the URLs are part of the end user interface experience for both developers and users.  The counter-argument in my mind was that we should get the cukes green before doing a refactoring, but really this entire activity was a refactoring of both tests and application code to consolidate the two payment methods (that both worked independently) into a single coherent entity.  Perhaps we should have only been refactoring tests and app separately?  &lt;/p&gt;

&lt;p&gt;You might also be wondering what happened to the feature to sponsor other members via Paypal.  Discussing it, we&amp;rsquo;d decided that we needed to consolidate the existing functionality first before taking on that more complex task.  Either which way, the missing &lt;code&gt;/subscriptions/new&lt;/code&gt; endpoint prompted a refactoring of the ChargesController to SubscriptionsController, which we executed automatically through RubyMine. RubyMine got most of the changes for us, but there was some mopping up to do with additional changes in the Cucumber files, and a few of the views.  Then we got stuck on a regression test failure for a while.  We weren&amp;rsquo;t making any progress on the high level integration of Paypal and Stripe payments:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Scenario: User decides to change card details                                                                     # features/premium/charge_activity.feature:60
    Given I am logged in as a premium user with name "tansaku", email "tansaku@gmail.com", with password "asdf1234" # features/step_definitions/user_steps.rb:5
    And I visit "subscriptions/tansaku/edit"                                                                        # features/step_definitions/basic_steps.rb:65
    And I click "Update Card Details"                                                                               # features/step_definitions/basic_steps.rb:74
    When I fill in updated card details for premium for user with email "tansaku+stripe@gmail.com"                  # features/step_definitions/charge_steps.rb:18
    Then I should see "Your card details have been successfully updated"                                            # features/step_definitions/basic_steps.rb:182
      No route matches [PUT] "/subscriptions.tansaku-rodriguez" (ActionController::RoutingError)
      features/premium/charge_activity.feature:65:in `Then I should see "Your card details have been successfully updated"'

Failing Scenarios:
cucumber features/premium/charge_activity.feature:60 # Scenario: User decides to change card details
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There was some kind of routing issue.  It was frustrating to be blogged, but also, this is what all these tests are here for.  We&amp;rsquo;d refactored the core controller of the payment framework, and it seemed we&amp;rsquo;d broken the credit card details update in the process.  Without the tests we&amp;rsquo;d have pushed this out to production and not known until a user encountered a problem.  Eventually we tracked the issue down.  It was a pluralization error in one of the views.  Our routes now looked like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/paypal'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#paypal'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/upgrade'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#upgrade'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:put&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:subscriptions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;giving us this set of endpoints:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           subscriptions_paypal GET         /subscriptions/paypal(.:format)                             subscriptions#paypal
          subscriptions_upgrade PUT         /subscriptions/upgrade(.:format)                            subscriptions#upgrade
                  subscriptions GET         /subscriptions(.:format)                                    subscriptions#index
                                POST        /subscriptions(.:format)                                    subscriptions#create
               new_subscription GET         /subscriptions/new(.:format)                                subscriptions#new
              edit_subscription GET         /subscriptions/:id/edit(.:format)                           subscriptions#edit
                   subscription GET         /subscriptions/:id(.:format)                                subscriptions#show
                                PATCH       /subscriptions/:id(.:format)                                subscriptions#update
                                PUT         /subscriptions/:id(.:format)                                subscriptions#update
                                DELETE      /subscriptions/:id(.:format)                                subscriptions#destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We had both &lt;code&gt;subscription_upgrade&lt;/code&gt; and &lt;code&gt;subscriptions_upgrade&lt;/code&gt;.  It was frustrating to have been stuck on this issue, but it was also an interesting lesson about how the custom &lt;code&gt;upgrade&lt;/code&gt; endpoint was technical debt that we were having to pay off here.  We&amp;rsquo;d thrown in that custom endpoint to enable a member to change their credit card in a hurry, but the presence of the custom endpoint had confused us during a refactoring.  If we&amp;rsquo;d refactored that out earlier to a CardController we probbaly wouldn&amp;rsquo;t have got stuck here.  So overall not a bad object lesson on the value of tests and of refactoring to a clean domain model!&lt;/p&gt;

&lt;p&gt;While we were doing all this (and waiting for test suites to run etc.) Michael and I were discussing work on the project in general.  Michael was commenting that he had felt more motivated in the longer running work on LocalSupport.  It sounded like aspects of the &amp;ldquo;drive-by&amp;rdquo; coding style we had been employing recently were frustrating him, i.e. that we were only working on things that could be done in a hour or two.  Also, he said he didn&amp;rsquo;t feel like doing additional work on the project at the weekend as he anticipated I would be too critical of decisions he might make.  This was great feedback for me, as the last thing I want to be doing is de-motivating people to work on the project.  I&amp;rsquo;d like to think of my criticism of design decisions as constructive, but it&amp;rsquo;s a delicate matter.&lt;/p&gt;

&lt;p&gt;I guess Michael has sensed my frustration at earlier phases of the WebSiteOne project which seemed to have involved long running, large pull requests and the addition of more features than I was comfortable with.  I&amp;rsquo;ve definitely been burnt by this in the past; pushing on people too hard over the approach that I think is right.  It seems sensible to me that we don&amp;rsquo;t just merge in code to a project when concerned over the future maintainability of that code, but then again if our push back is too strong then no one will want to work on the project with us.  Where do we draw the line?  Everyone is going to have a different level of tolerance for criticism, constructive or otherwise.   And we&amp;rsquo;re all going to have variable abilities to detect whether what we are saying is making others uncomfortable or de-motivating them.  Perhaps I&amp;rsquo;m coming from a place of too much tension for the entire AgileVentures undertaking?  In the past it was a part-time fun activity, and I was more relaxed about my future income from HPU or MakersAcademy.  Ironically at that point I was less sensitive about whether others might feel negative about discussion of the pros and cons of code or design.  Now I like to think I&amp;rsquo;ve become more sensitive but the stakes are higher, and I really want to create codebases that will enhance our processes rather than be a burden in future.&lt;/p&gt;

&lt;p&gt;Gosh, what a complex thing to try and get right.  I thought managing a VCR/PuffingBilly cache was hard, but getting that inter-personal teamwork balance right &amp;hellip; well that&amp;rsquo;s the real trick, isn&amp;rsquo;t it? &amp;hellip; :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OfvuX1rNtu0"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Q36xbc8pUZ4"&gt;Pair Programming on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3BVth-ZXJk8"&gt;Kent Beck Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Testing Slack Bots and Project Metrics</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/02/testing-slack-bots/"/>
    <id>http://blog.url.com/2016/12/02/testing-slack-bots/</id>
    <published>2016-12-02T00:00:00+00:00</published>
    <updated>2016-12-12T21:03:33+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Wednesday saw me firing off a few emails to potential sponsors, which felt like a good start, since landing another sponsor would make all the difference to us over the coming months.  We had our second mob programming session, and I got a preview copy of the new RSpec book, so things were humming along.  What wasn&amp;rsquo;t humming along was invites to Slack.  We still seemed to be having an email every day or two saying that the automated Slack invite was not showing up after a sign up on the main AV site.  Michael and I had put in an email system to supposedly alert us when the Slack invites failed, as they sometimes did when the API key expired.  Those email alerts had only ever triggered for failures on the develop system.  And looking back through the logs it seemed that invites really weren&amp;rsquo;t going out for the last month or so and our fail-safe wasn&amp;rsquo;t even triggering; so frustrating!  The challenge with this kind of issue is that every time someone says they didn&amp;rsquo;t receive the invite, it could be because of a spam filter issue.  &lt;/p&gt;

&lt;p&gt;I do get cc&amp;rsquo;d all the welcome emails when people join AV so I can see the flow of people coming in.  I just wish I could get cc&amp;rsquo;d on the Slack invite emails.  I&amp;rsquo;d refreshed the API keys recently.  The Slack invite thing would clearly require another detailed look. Doubly frustrating was the hacked up env settings for test that meant the full Slack invite pathway was not properly tested.  I didn&amp;rsquo;t want to dive into debugging the Slack issue as I was feeling the AsyncVoter project was blocked due to a lack of test harness on the AsyncSlack bot; so I took a temporary measure and grabbed the emails for the most recently signed up 150 AV members and did a bulk invite in Slack.  It told me that at least 80 people had never been invited.  It was gratifying to see the 15 or so new members enter slack over the next 12 hours with several of them mentioning the Ruby Rogues podcast.&lt;/p&gt;

&lt;p&gt;Having put in the short term fix I could focus a couple of hours coding on getting a test harness into the AsyncSlackBot.  I refactored the simple unit test from the day before so the naming of the files and methods was more consistent, and started on checking out the BotMock project.  Installing it involved building it locally and copying over a couple of mock files.  Not ideal, and I start to think we could just as quickly build our own mocking system, as we did in the agile-bot project.  The BotMock project is new and not even on npm, and I wonder if we&amp;rsquo;re really gaining much from it.  I stamped out a few controller tests using their approach, which involved coding in ES6 and I had to adjust the callback operations to get working tests like these:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'should acknowledge vote if users direct messages `vote #`'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'vote 1'&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"I received your vote: 1 &amp;lt;@test&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usersInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Working with this sort of test had involved pulling the body of the bot out of the server.js file and dropping it into a controller file from which it would be exported.  I was getting critical practice with breaking up my node apps.  Not that it&amp;rsquo;s so hard, but when something is slighltly less familiar it&amp;rsquo;s easy to put off doing it.  I ended up with a pull request that did a bit of testing on each of the canned bot responses, but didn&amp;rsquo;t achieve a full test of the full voting sequence as it was unclear how to check a series of interactions.  The BotMock had some example conversation tests, but they weren&amp;rsquo;t working for me. &lt;/p&gt;

&lt;p&gt;This is a good start over the initial spike, but it&amp;rsquo;s frustrating that the high level character of the app can&amp;rsquo;t easily be read from the mocha tests, in the same way that it can be difficult to read them in RSpec.  Both Mocha and RSpec can give verbose test output that provides a nice summary of what&amp;rsquo;s going on like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  controller tests
    ✓ should return `help message` if user types `help` (208ms)
    ✓ should return `hello yourself` if user types `hello` (204ms)
    ✓ should return vote announcement if user types `start new vote` (202ms)
    ✓ should acknowledge vote if users direct messages `vote #` (208ms)
    ✓ should return results if users types `results` (205ms)
    - should summarise results after a vote

  Bot
    Controller
      ✓ should receive message

  summary_text
    ✓ should format vote text correctly for no votes


  7 passing (1s)
  1 pending
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but I personally find it difficult to digest that output.  What I mean is that when I&amp;rsquo;m working on the code, usually with the spec on one half of the screen and the app code on the other half like so:&lt;/p&gt;

&lt;p&gt;&lt;img alt="code layout" src="https://www.dropbox.com/s/vkcavhglz2kkadq/Screenshot%202016-12-02%2009.59.23.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;most of the mocha/rspec code is taken up with boilerplate that is specific to the testing framework and not the app itself.  The high level English language description is scattered in comments.  I really do love Cucumber for giving me that description in the editor and not in the separate terminal output.  So perhaps it&amp;rsquo;s time to try out Yada (cucumber nodejs alternative) in this project, but I think I can&amp;rsquo;t get too sucked in to testing frameworks without pushing more functionality to actually help automate me away from tedious admin tasks.  We&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;What is exciting is that it seems that if we feed the bot an API token rather than a bot token, we can get the bot to behave as me (as Thomas and I found testing another bot).  So potentially I can augment myself on Slack directly.  Dangerous perhaps; in a test with Arreche I already tripped an infinite loop in a private channel.  Lots of testing required to avoid more mishaps like that :-)  I got the PR in and managed a separate flurry of coding/devops on ProjectScope later in the evening.  The new month meant my Heroku quotas had been reset and so I could get this overview of how the different AV projects were proceeding:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Project metrics on AV projects" src="https://www.dropbox.com/s/emvw7cujo777itx/Screenshot%202016-12-01%2018.41.42.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The graphics are interactive and when you mouse over them you get some explanations and pop-ups of who&amp;rsquo;s got what level of activity in Slack:&lt;/p&gt;

&lt;p&gt;&lt;img alt="showing who's active in slack" src="https://www.dropbox.com/s/assku0q6ptxhp7r/Screenshot%202016-12-01%2018.52.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;I think this really is the way forward; automation of project management via Slack bot and breaking our monolith into microservices, e.g. metrics on all the projects in one service, manangement of hangouts/events in another service; so that we can grow to more and more projects supported, in following Agile principles to keep them all delivering value to the end users and the individual team members participating in order to level up in the chosen skill sets.  Can we get into that sweet spot where all the effort and automation and reflection results in a great user experience all round without overwhelming the support staff?  Stay tuned to this blog to find out!&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=X3mWPUN4TC4"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gK96bxINM88"&gt;Solo on AsyncVote part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XP3lyx0zZZY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RYRugWUmv74"&gt;Solo on AsyncVote part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
