<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-02-23T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Asking Questions</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/23/asking-questions/"/>
    <id>http://blog.url.com/2017/02/23/asking-questions/</id>
    <published>2017-02-23T00:00:00+00:00</published>
    <updated>2017-03-15T21:34:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The final part of the FutureLearn interview was a chat with a client specialist and front end developer, with questions about my experiences in teams and working with clients.  I enjoyed the conversation, and it allowed me to articulate something that I&amp;rsquo;ve been thinking over and over again and still have trouble putting into practice.  It&amp;rsquo;s this process of avoiding blocking people, and what to do instead.  I use the term blocking to mean disagreeing, correcting grammar/pronunciation, ignoring suggestions.  A whole range of things.  Now sometimes it&amp;rsquo;s important to block.  I don&amp;rsquo;t think one should never block, but that blocking always come with a cost.  Generally when people are speaking they are trying to get something across, some idea or opinion or what have you.  Maybe some enlightened folks are really not bothered to be blocked, but many of us, if we are making the effort to say something, would probably prefer to be allowed to fully express our thought.&lt;/p&gt;

&lt;p&gt;Some might relish being blocked in that they enjoy a heated argument, and all power to them; but the danger is that the heated discussion that two people are enjoying (at some level) is not much fun for other people who are present at the same time.  Anyway, so one of the FutureLearn folks asked me &amp;ldquo;so you don&amp;rsquo;t mean to say you should never disagree with anything?&amp;rdquo;, and I replied that I almost did.  Not that I&amp;rsquo;ve been much good at this, but the process for deciding whether to bring up a block should include some consideration of the number of people involved.  Are you talking one on one, or is this a group meeting with 15?  Also, how important is it really?  Is the building on fire and if people don&amp;rsquo;t stop talking and leave now they&amp;rsquo;re all going to die?  Also, are you in a position of some seniority and tasked with, or simply feel responsible for, helping a group or individual feel good about at least some aspects of what they are doing, and empowered to take on challenges; learn from their own mistakes etc.?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure if it&amp;rsquo;s my academic background, but my tendency for a long time has been to treat any problem like a mathematical or logical statement.  It&amp;rsquo;s as if people are coming up to me and saying &amp;ldquo;2+2=4&amp;rdquo; and I&amp;rsquo;ll say &amp;ldquo;go on &amp;hellip;&amp;rdquo;, or they&amp;rsquo;re saying &amp;ldquo;1+1=3&amp;rdquo; and I&amp;rsquo;ll say &amp;ldquo;actually I think you mean &amp;hellip;&amp;rdquo;, with little consideration for anything other than my perception of the logical coherence of what they&amp;rsquo;re saying.  The clear problem with this approach is that my mental model of the world is just that, mine.  I have no monopoly on logically coherent views of the universe, and indeed how important is logical coherence anyway?  Furthermore I&amp;rsquo;m not usually thinking about how people might feel about being blocked.  I&amp;rsquo;d like to think I am slowly getting better at this, but who knows? :-) What I&amp;rsquo;m starting to come round to thinking is that, in the majority of situations, how people feel is far more important than whether what they are saying is objectively correct or not.  Of course this should naturally follow from my own basic assumption that there is no objective correctness.  I belive everything is subjective.&lt;/p&gt;

&lt;p&gt;My own sense that everything is subjective should in principle prepare me for the great differences between people&amp;rsquo;s mental models of the world.  The faulty assumption on my part seems to be that the majority of people are interested in investing time in getting to the bottom of these differences.  I really enjoy pulling apart what I&amp;rsquo;m thinking about to try and work out what assumptions I&amp;rsquo;m working on; debating the relative merits of different approaches, but I&amp;rsquo;m a bit of an outlier there, maybe &amp;hellip; or maybe that all depends on who I&amp;rsquo;m hanging out with on a particular week?&lt;/p&gt;

&lt;p&gt;Anyhow, Ruben at Makers Academy recommmended to me that it&amp;rsquo;s better to ask questions than contradict people, and I laugh at myself for how difficult this seems to be for me to do.  Recently however, I&amp;rsquo;ve been reformulating in my head that the key thing is questioning rather than asserting.  As I said to the FutureLearn people, it&amp;rsquo;s all about assessing how important your own concern is, and then working out whether it&amp;rsquo;s actually important to make a block.  If someone is trying to convince your friend to jump off a cliff, perhaps it is critical to jump in with a block, but even then perhaps a question about consequences is better?  And is it vital that the question is now in front of the group, or is it better to ask the question one on one?  My new resolution is stop making assertions, ask more questions and prefer to ask those questions to the smallest subset of people possible &amp;hellip; we&amp;rsquo;ll see how that goes :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Second Interview</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/22/second-interview/"/>
    <id>http://blog.url.com/2017/02/22/second-interview/</id>
    <published>2017-02-22T00:00:00+00:00</published>
    <updated>2017-03-14T21:52:10+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So yesterday I found myself in a second interview for a &amp;ldquo;Ruby developer&amp;rdquo; job at the UK MOOC provider, FutureLearn.  I&amp;rsquo;ve been applying for jobs here and there over the last six months as it&amp;rsquo;s nice to keep one&amp;rsquo;s options open.  Having surrendered to the idea that AgileVentures won&amp;rsquo;t provide a sustainable income for me anytime soon, it was nice to get a first interview (over Skype) at FutureLearn and then a tech test, and then a second interview.  I was looking forward to the afternoon which was going to be broken up into a discussion of my tech test, a pair programming session and a meeting with some client and frontend specialists.&lt;/p&gt;

&lt;p&gt;The tech test was on writing a game of TicTacToe, which I think I&amp;rsquo;ve blogged about before, and I used an outside-in approach as I&amp;rsquo;d done with the VendingMachine tech test example at Makers Academy.  This approach had not produced code that I was wonderfully proud of, but I was pleased with parts of my hand rolled acceptance tests, and how one could generate new ones from written descriptions of game play that matched the user experience.  I felt I&amp;rsquo;d done a reasonable job of method naming, and had started on refactoring out some different classes.  Late on Friday evening during my week off I&amp;rsquo;d done another version of TicTacToe starting from inside-out, and on the train on the way into the meeting I pushed that a little further, as I was thinking I was starting to more clearly grasp how these two different approaches intermixed.&lt;/p&gt;

&lt;p&gt;In my second version I&amp;rsquo;d driven from unit-tests focused on domain entities such as board, cell and player.  I was at the point of starting to have these entities communicate with each other to play a turn of TicTacToe, or at least update the board representation to reflect a players move.  In the first session with the various methods of the different objects at the forefront of my mind I had written the following: &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid_moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dropping that into the README in the first instance, as a rough sketch of how the domain entities might communicate.  I read that back to myself on the train and felt like I wanted to move the &lt;code&gt;valid_moves&lt;/code&gt; check into the player object, giving me:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My reasoning being that a player entity might well want to be able to review the state of the rest of the board, rather than just the valid moves, before choosing what to do next.  I got the player spec set up to handle that, and after a couple of rounds of changes, and with a dash of dependency injection I had the player spec like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:rules_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="ss"&gt;:rules_klass&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can choose a move'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:valid_moves&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:A1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="ss"&gt;:A1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the player thus:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@rules_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rules_klass&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid_moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; 

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:rules_klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before I moved on to being able to update the board.  Now the &lt;code&gt;board.contents_of(move).hold(player.symbol)&lt;/code&gt; line reflected the properties of the board and cell objects that I had created before.  What would the context be for such a statement?  I created a game class that would have a &lt;code&gt;handle_move(player)&lt;/code&gt; method that would house this code.  The spec ended up looking like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Game&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board_klass&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;symbol: &lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'handles player moves by updating board with player move'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:choose_move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt; &lt;span class="ss"&gt;:A1&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:contents_of&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:A1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hold&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handle_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think what I was seeing here was a mock train wreck that reflected a possible Demeter violation in the way I had initially written the code.  I had all the tests passing with the Game class set up like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:board&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The train journey ended before I could get any further, but I sensed that the way the test was pointing me would look something like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;by: &lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not sure about that &lt;code&gt;by:&lt;/code&gt; key - just trying to make things as close to an English sentence as possible, which is always a little tricky when a method takes more than one argument.  What I thought the convolution in the test was telling me was that game knew a little too much (a Demeter violation) about the relations that board had with the Cell class.  Changing the code to this last example would mean that the Game class didn&amp;rsquo;t need to have any knowledge of the Cell class, and so testing it would be much simpler, and my domain entities would be more loosely coupled.  I think this is the point that&amp;rsquo;s made in the book &amp;ldquo;Test Driving Object Oriented Design&amp;rdquo;, and it strikes me that this is one of the potential benefits of unit tests, which is to help one evolve one&amp;rsquo;s domain entities into a more loosely coupled configuration.&lt;/p&gt;

&lt;p&gt;Ironically this didn&amp;rsquo;t really come up in the discussion of the tech test at FutureLearn, although we did talk a lot about how most folks attempted the TicTacToe test by creating a series of small classes (as I had done in this second attempt) and I quoted Sandi Metz&amp;rsquo;s 100 line class limit and noted on the dangers of refactoring before one is clear what the next round of changes are likely to be. That latter being my justification for refactoring out a board class, but not yet a player class, in my initial outside-in approach.&lt;/p&gt;

&lt;p&gt;It strikes me that being sufficiently familiar with RSpec to be able to mock effectively and to be aware how the presence of excessive mocking (or mocking things you don&amp;rsquo;t own) is quite a tall order for the beginning programmer.  Furthermore, this benefit is lost, to a degree, when working in a framework like Rails, where the system architecture is laid out for you.  Immediately after the tech test discussion, I was pairing with a different FutureLearn person on adding a feature to a slimmed down version of their site.  We used an interesting style of &amp;lsquo;Given/When/Then&amp;rsquo; within an RSpec/Capybara feature test and then dropped to controller and model specs to get the job done.  It was a smooth pairing experience, switching driver/navigator roles when we got the error message to change significantly.  It just underlined how different it is working with Rails as opposed to Plain Old Ruby Objects (PORO).&lt;/p&gt;

&lt;p&gt;I could go on about the final section of the day, but with code snippets this blog has already gotten quite lengthy, but suffice to say that I was impressed with FutureLearn&amp;rsquo;s interview process and the effort to which they were going to have the interview be a reflection of what it was like to work in their team. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Little Less Conversation</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/21/a-little-less-conversation/"/>
    <id>http://blog.url.com/2017/02/21/a-little-less-conversation/</id>
    <published>2017-02-21T00:00:00+00:00</published>
    <updated>2017-03-13T22:04:57+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday was basically coming back up to speed after a week away from digital communication, gradually transfering the various items from Email and Slack into my TODO list.  I managed to deploy the latest agile-bot config changes to production, do a marketing meeting and record an Agile Book Club podcast.  What was great to see was how active folks had been while I was away, greeting new members in the Slack, running the marketing meetings in my absence.  Lara has got in there and reconfigured the Google AdWords campaign; running experiments on different ads. We now have over 11,000 unique users visiting the site over the last month.  The AdWords signup tracking appears to be working, indicating 31 new member sign-ups after clicking on a Google ad.  Marufa came up with new designs for the pricing pages and Lara&amp;rsquo;s taking the lead on making the first round of tweaks there.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also starting to see more traffic to the non-profit static site, although it&amp;rsquo;s not clear what conversions we should be tracking there.  Michael is telling me that we should do a little less talking and focus on getting more things done.  Although I sometimes feel close to paralysis in terms of what to do next, or what to prioritise.  The Agile Book Club podcast is a great excuse for more conversation, which I do enjoy, and in yesterday&amp;rsquo;s episode I think we provided a forum for Michael to express various feelings he has about how AgileVentures projects don&amp;rsquo;t focus on the high level stories enough.  In the post-show chat our discussion honed those feelings into a plan of action.  Michael said that the reason he didn&amp;rsquo;t like the WSO team meetings of a few months back were that we were working through any and all tickets in the board.  That meant that issues raised by anyone could take the floor.  He&amp;rsquo;d be much more interested in a meeting where someone had reviewed all the tickets in advance of the meeting and then a set of the most important were pre-selected to be the subject of a sprint.&lt;/p&gt;

&lt;p&gt;A great idea, but a lot of up-front work for someone, so I suggested how about we have a meeting where we each bring a maximum of three tickets that we care about to plan for a sprint; and with luck we&amp;rsquo;ll do that on Friday.   It&amp;rsquo;s funny, because sometimes it seems that talking is what&amp;rsquo;s needed to help people get their feelings out, and then collaboratively work out a course of action.  As with all things it&amp;rsquo;s a balance.  What was also clear to me was a variation of my maxim of being careful when &amp;ldquo;blocking&amp;rdquo; people; which is that feedback can be mis-interpreted as a block, and the more people there are in a meeting, the less likely that feedback will be able to be constructively received.  By blocking I mean anything that contradicts what a person is saying, be it correcting their grammar, querying their choice of phrase, or disagreeing with their point.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into the details, as interested parties can get that from the recording of the marketing meeting and the podcast etc., but I do keep coming back to advice I got from Ruben at Makers Academy that it&amp;rsquo;s far better to ask people questions than to make assertions.  For some reason I find it so hard to do that.  My M.O. is so ingrained that when someone makes an assertion that doesn&amp;rsquo;t fit my mental model, my knee-jerk reaction is the make a counter-assertion.  I enjoy the mental interplay, but so many other people don&amp;rsquo;t seem to.  Of course asking too many questions can also be a block.  Let&amp;rsquo;s see, I&amp;rsquo;m going to try to either shut up or just ask single questions for the rest of the week, if I can!  A little less conversation, a little more action maybe :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5vx3BstpDuo"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youtu.be/7jCej7JVpkM"&gt;Marketing Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jpsIcZ5pTkQ"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>I Surrender</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/20/i-surrender/"/>
    <id>http://blog.url.com/2017/02/20/i-surrender/</id>
    <published>2017-02-20T00:00:00+00:00</published>
    <updated>2017-03-13T22:01:04+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve just had a complete break from Slack and email for a week.  That was nice, although I was starting to get a bit jittery towards the end.  Ever since my knee operation last October I&amp;rsquo;ve been a mail/slack addict on my phone, checking for updates first thing in the morning, last thing at night, at every time of the waking day.  Great for staying up to date with everything, but not too healthy I feel.  I think a complete break for a week was the right thing to do.  I&amp;rsquo;m excited to be back in the saddle today and I hope, going forward, that I can keep my digital checks into a 9am-9pm bracket - we&amp;rsquo;ll see :-)&lt;/p&gt;

&lt;p&gt;While I was away from the digital fountain, I was reading &amp;ldquo;Doors of Perception&amp;rdquo; and &amp;ldquo;Heaven and Hell&amp;rdquo; by Aldous Huxley, which was pretty discombobulating in his descriptions of taking mescalin, which match pretty closely to the descriptions of momentary Zen awareness in the books I&amp;rsquo;ve read (or am re-reading) by Steve Hagen and Eckhart Tolle.  Despite being away from digital communication media for the week I did do some further work on a sample book chapter for a book that might now be called &amp;ldquo;Agile Methods for Open Source Projects&amp;rdquo;, and even some coding on an alternative &amp;ldquo;inside-out&amp;rdquo; version of the TicTacToe technical test that FutureLearn gave me.  Those were quite relaxing activities, but the digital communication fast didn&amp;rsquo;t stop me from worrying about &amp;ldquo;work&amp;rdquo;, the sustainability of the AgileVentures charity and relationships with different members of the community.&lt;/p&gt;

&lt;p&gt;Both Steve Hagen and Eckhart Tolle talk about surrendering to the moment, which I did a fair bit, actually doing some sketching on a short trip away, focusing on the momentary experiences day by day, the food I eat, the feeling of picking up objects, of looking into the distance.  And after Huxley&amp;rsquo;s book, the folds in cloth and clothing, and flowers and surfaces.  I don&amp;rsquo;t think I magically achieved any sartori, but I do feel closer to surrender.  The last 9 months I&amp;rsquo;ve been super-focused on pushing AgileVentures to the point where it could sustain myself and my family financially, and we&amp;rsquo;ve come some way along that path, but I think it&amp;rsquo;s time to surrender.  The AgileVentures charity might one day be able to support paying staff, but not for a while, and I think pushing too hard towards that goal is going to be detrimental to both me and the community, or at least counter-productive in terms of moment to moment experience.&lt;/p&gt;

&lt;p&gt;In order to sustain my family I&amp;rsquo;m going to need to take other paying work for a while.  If I&amp;rsquo;m lucky then the meeting I have with FutureLearn on Tuesday will generate a framework where I can get paid for some of my time, and still have some spare time for the charity, which can chug along until I&amp;rsquo;ve rebuilt our savings again.  If I&amp;rsquo;m really lucky over the course of months (or possibly years) I can help the FutureLearn folks take their project open source and get some real synergy with the AgileVentures community, but I shouldn&amp;rsquo;t be too focused on any particular outcome.  The FutureLearn thing might not come off.  If it doesn&amp;rsquo;t, I think that I&amp;rsquo;ll need to sink a load of my time into CodeMentor and HackHands to see if that can generate enough income, and if it doesn&amp;rsquo;t, then look for something else.&lt;/p&gt;

&lt;p&gt;Thinking in terms of surrendering myself to my fate is helping me feel calmer about it all.  I also want to be listening more carefully to folks.  My insistent drive for efficiency and getting stuff done means that I am usually only half-concentrating when people are talking to me in meetings and scrums.  I&amp;rsquo;d like to see if I can change that; put the relationships with the other individuals in the community at higher value than getting things done.  Although I&amp;rsquo;m still terribly interested in the tweaks we can make that will make the community more sustainable.  The philosophy that I see through what I will currently call the Hagen/Tolle nexus is about detaching yourself from any outcome, and focusing on fully experiencing the current moment as much as possible.  It doesn&amp;rsquo;t mean not seeking outcomes, but the more wrapped up you become in achieving a particular outcome the more you can end up pushing it away from you.  The universe flows around us and in us and through us and who knows what will crop up next.  I&amp;rsquo;m going to surrender to it and see where the flow takes me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tech Tests</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/10/tech-tests/"/>
    <id>http://blog.url.com/2017/02/10/tech-tests/</id>
    <published>2017-02-10T00:00:00+00:00</published>
    <updated>2017-03-08T21:42:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I&amp;rsquo;m doing a tech test for FutureLearn and they&amp;rsquo;ve very kindly said that I can post my work publicly on GitHub, which I have promptly done:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tansaku/tictactoe"&gt;https://github.com/tansaku/tictactoe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I&amp;rsquo;ve spent about 3 hours on it so far, mostly in different leisure centers, churches and halls waiting for my children to finish sporting activities.   I get 45 minutes on Tuesdays, Wednesdays and Thursdays while I wait for them to finish WoodCraft, football and Karate respectively; during which I can focus on my laptop without too many interruptions.  In a bit of tech test flurry I created a calculator in Ruby for CodeMentor yesterday, which got approved this morning, and I was reminded of the period last year where I got pneumonia and spent three weeks in bed doing almost nothing but kata on &lt;a href="http://www.codewars.com/"&gt;CodeWars&lt;/a&gt;. Interestingly, I&amp;rsquo;d encountered variations on the CodeMentor tech test in CodeWars.  If you want to get good at TechTests you could do worse than spending a while hacking through the kata on CodeWars and other sites like HackerRank.&lt;/p&gt;

&lt;p&gt;Other Makers folks were overtaking my CodeWars score recently, but I think CodeWars just adjusted their calculations and I seem to have jumped back to the top of the list:&lt;/p&gt;

&lt;p&gt;&lt;img alt="codewars ranking for my allies" src="https://www.dropbox.com/s/xzq8o3mdiyqawmh/Screenshot%202017-02-10%2009.49.57.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;which gives me ridiculous childish pleasure.  I&amp;rsquo;m so shallow &amp;hellip; (hangs head).  I&amp;rsquo;m still frustrated not to get to 1-kyu on CodeWars, even after I solved all the 1-kyu katas (1-kyus are the hardest).  Looks like there are now some new 1-kyu and 2-kyu katas that would allow me to get to 1-kyu without doing umpteen easier katas.  Maybe I&amp;rsquo;ll get to that if I have another major illness :-)  Anyhow, tech tests are a strange beast - little coding puzzles that companies hand out to potential hires to test their coding skills.&lt;/p&gt;

&lt;p&gt;I got into CodeWars because it was being recommended when I was a coach at MakersAcademy, and at the bootcamp we were focused on helping training folks up to be able to handle the tech tests that companies would give them after they graduated.  I previously did a worked tech test for the students there, the code for which you can see here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tansaku/vending-machine-kata"&gt;https://github.com/tansaku/vending-machine-kata&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also recorded screencasts of myself doing the entire thing to try and reveal the thought processes I was having as I went through it.  I didn&amp;rsquo;t have such fantastic feedback about it.  One junior staff member told me he thought the code made him &amp;ldquo;sad&amp;rdquo; and despite many other disucssions, I never got to discover what made him sad about it.  Another more senior staff member said that one student listening to the videos felt that it was too stop/start with me saying &amp;ldquo;umm&amp;rdquo; to much, which I can totally believe.  I think that lead to some scripted coding screencasts for the weekly challenges at Makers that ultimately were much more appreciated by the students.  &lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;d been fun to do this TicTacToe tech test for FutureLearn, and I took an Outside-In approach, driving the code with acceptance tests, dropping down to some integration and unit tests. I got something that works more or less, in a single monolithic file, just pushing Sandi Metz&amp;rsquo; 100 line limit.  There&amp;rsquo;s something nerve-wracking for me, an academic by training, working with these industry tech tests.  I keep seeking that industry &amp;ldquo;special-sauce&amp;rdquo;.  The thing that makes the great coders.  My best guess at the moment is that actually it&amp;rsquo;s giving ground rather than fighting for a particular code style that is the key skill.&lt;/p&gt;

&lt;p&gt;The thing that confuses me is that we have directions like &amp;ldquo;do the simplest thing possible&amp;rdquo;, &amp;ldquo;always write your test first&amp;rdquo;, &amp;ldquo;red-green-refactor&amp;rdquo;, &amp;ldquo;you ain&amp;rsquo;t gonna need it&amp;rdquo; and others, but when you take any of these to their logical extremes people seem to get uncomfortable.  This TicTacToe problem is clearly highly constrained, so an alternate approach to take would be to build a TicTacToe engine, driving the design with unit tests, and then wrapping acceptance tests around later (if at all).  I&amp;rsquo;ve never been a big fan of that sort of approach as I worry I&amp;rsquo;m going to burn too much time writing stuff I don&amp;rsquo;t need, and they&amp;rsquo;d said only spend a couple of hours on this.&lt;/p&gt;

&lt;p&gt;I chose to do the whole thing driven from RSpec to avoid burning time on Cucumber, and was interested to see if I could write complete acceptance tests for the input/output on the command line, so I drove in that way and got my single monolithic class.  At the moment I have a roughly working system, but only for a few hard-coded games.  The computer&amp;rsquo;s current strategy is fixed and I don&amp;rsquo;t handle collisions for markers, so the game is not fully generic.  The tech test is currently a reasonable demonstration of my ability to craft different kind of tests, get a roughly working system, but I&amp;rsquo;m suddenly paranoid about whether this code is going to make more people &amp;ldquo;sad&amp;rdquo; in some indeterminate way and I still won&amp;rsquo;t be able to get an example of a version that would make people &amp;ldquo;happy&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I can imagine doing it again, driving from unit tests (with the benefit of the initial experience) to make a nicely factored engine.  I could also layer on some acceptance tests to make sure the other high level failures are addressed, e.g. collisions handled etc., or I could continue refactoring the code with the existing tests.  I&amp;rsquo;ve used the existing test suite to eliminate some unneeded code and make the method names more self-explanatory.  But how will people feel about the lack of comments?  I like to focus on making the method and variable names self-documenting.  Having got this far I feel like I won&amp;rsquo;t be happy until it plays a fully generic game.  I know I&amp;rsquo;ll be spending more time on it today before I send FutureLearn the link :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eUhIV1c9CpU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yFIOYN8SisA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Pivoting or Not</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/09/pivoting-or-not/"/>
    <id>http://blog.url.com/2017/02/09/pivoting-or-not/</id>
    <published>2017-02-09T00:00:00+00:00</published>
    <updated>2017-03-08T21:37:17+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There was an interesting response to one of &lt;a href="http://nonprofits.agileventures.org/2017/01/23/passing_a_threshold/"&gt;recent blog posts&lt;/a&gt; from an AV community member.  They posted the following in our community #random channel (where I had shared my blog post):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As an additional source of income for AV, why not offer pairing sessions for payment for those who may be reluctant to commit to a monthly fee? These sessions could be given to mentors who would be paid a proportion of the fee, thus perhaps incentivising more mentor-type people to join as well. A bit similar to what AirPair used to do although perhaps more from a learning point of view rather than a professional problem solving one as that was. So perhaps a student could pay for a session on a particularly difficult piece of homework, or a private project they are doing, or to better learn some concept or technique they are having problems with, or even just to practice coding and pair programming but without having to commit themselves to working on a project, which might be intimidating to some (and pairing not always available). These students might also in future be drawn into collaborating on actual AV projects. But in any case the pairing sessions themselves would bring in additional income.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And another community member responded, soon after, that they would pay for individual mentoring sessions, and we spent a little time discussing things in the &amp;ldquo;Martin Fowler&amp;rdquo; scrum.  I&amp;rsquo;m not sure what happened to AirPair.  According to their &lt;a href="https://en.wikipedia.org/wiki/AirPair"&gt;wikipedia page&lt;/a&gt; they raised over $1M after a Y Combinator presentation, but the site currently has some authentication errors and I&amp;rsquo;m not seeing any activity on the site or social media since mid-2016.  However, similar sites such as HackHands and CodeMentor seem to be &amp;hellip; oops, got distracted there.  I just went through the sign up processes for CodeMentor and HackHands.  Thought it would only take a couple of minutes, but CodeMentor included a timed assessment involving a pop quiz and a programming assignment.  Fortunately it was very similar to a kata I had completed not so long ago on Codewars, so I was able to polish it off pretty quickly.&lt;/p&gt;

&lt;p&gt;Anyhow, talk about being easily distracted! :-) At least I&amp;rsquo;ve now got a good insight into the sign up experiences of those two companies.  So what our community member is suggesting is a lot like what I think CodeMentor and HackHands are offering.  What&amp;rsquo;s not clear is how beneficial it would be for AgileVentures.  It feels like it will be difficult for us to compete with venture-backed companies in the same space, although as suggested, perhaps we focus more on the learning side? I was originally tempted to respond in #random with my philosophy of openness in AgileVentures, but thought I&amp;rsquo;d save it for this blog.  One thing I&amp;rsquo;ve learned is that when people are giving you suggestions, they are generally not interested in hearing that you thought about them already, or why you haven&amp;rsquo;t taken them up.  Far better to thank them for the great suggestions and ask simple follow up questions to find more about what they are thinking.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to bring in more money to AgileVentures, but I find helping individuals on their specific closed-source issues somewhat challenging.  Specifically because you often can&amp;rsquo;t get the whole code system on your own machine quickly.  Perhaps I&amp;rsquo;m a deeply flawed and impatient person, but I find it difficult to cope with making suggestions verbally and then having someone stumble around in their own interface, mis-interpreting what I&amp;rsquo;ve said.  I guess that&amp;rsquo;s what ScreenHero is for &amp;hellip; And maybe even uttering my honest thoughts here is self-destructive.  My hope with AgileVentures is to be doing the mentoring in the open, to enable more learners to learn from the contributions to open source projects.  Although I&amp;rsquo;ve come to see clearly that many learners crave privacy and are deeply embarrassed about asking questions in public, or in front of more than just a single mentor.  I assume this is all related to fear of failure, fear of being seen as less than competent etc.  I feel it to, but repeated practice has got me comfortable(-ish) with failing in public :-)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting that our community member mentions not having to commit to a project.  From my point of view if you just make one comment in one of our PRs, or just get the code set up and then never do anything, it&amp;rsquo;s still a contribution.  It&amp;rsquo;s what a lot of people seem to do; but perhaps many more are put off by the perception of needing to commit to a project.   I guess my big worry is that for all the time I spend helping other individuals on their private projects and homeworks, I&amp;rsquo;m not getting any multiplier for the community.  I can&amp;rsquo;t share the code solution we discover, and I can&amp;rsquo;t share the video of the techniques we used to discover the solution; but then again how many others actually benefit from all the AV videos we&amp;rsquo;ve shared?  How many others are really following the support given in psuedo-public in Slack?  Maybe the majority are all just hideously embarrassed by all this and that&amp;rsquo;s why we keep struggling to achieve any sustained critical mass.&lt;/p&gt;

&lt;p&gt;My mind does come round to feeling that the majority of people want polished content that they can consume in private.  There&amp;rsquo;s so much less pressure, it&amp;rsquo;s so much more convenient.  The cynic in me moans that so much of the polished content is not true to life, but then these days there are great screencasters out there (mainly outside of academia) showing folks how to actually do stuff, and maybe that&amp;rsquo;s always going to be more successful than a system that attempts to get the majority to overcome their fear of learning, of failing, in front of others &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=zBP6d2a0Rcc"&gt;&amp;ldquo;Martin Fowler&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1nqdZoqlH7A"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Related Blog Posts:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nonprofits.agileventures.org/2017/01/23/passing_a_threshold/"&gt;Passing a Threshold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
