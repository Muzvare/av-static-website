<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-10-11T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Three Day Week</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/11/three-day-week/"/>
    <id>http://blog.url.com/2016/10/11/three-day-week/</id>
    <published>2016-10-11T01:00:00+01:00</published>
    <updated>2016-10-11T21:23:00+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Had dinner with a couple of friends recently and one of them was telling us about how he&amp;rsquo;d managed to switch to a three day week. Largely through being a freelancer working on lucrative Clojure jobs.  It sounded pretty damn awesome.  Ironically, here I am doing a solid five day week for negative income.  My friend is pretty skilled in Ruby on Rails, but he really wanted to do more data science, and so learned Clojure and hasn&amp;rsquo;t looked back.  It&amp;rsquo;s funny because I have a machine learning background and there&amp;rsquo;s been times where I&amp;rsquo;ve been totally absorbed by data-analysis, but at the moment I just love Ruby (and JavaScript) and I love building things that you can interact with in real time, and potentially solve immediate logistical problems for an organisation.&lt;/p&gt;

&lt;p&gt;Of course data science can be really interactive, and can solve even bigger issues for businesses, charities and everyday folks; but it tends to be light on the user experience side, although even then, my friend was telling me about how one group he was working with was using big data to work out how to insert the point at which a web system suggested the user upgrade to premium.  If that&amp;rsquo;s not relevant to the day to day of AgileVentures then I don&amp;rsquo;t know what is :-) I guess the difference is whether you&amp;rsquo;re doing that, and just that, for some other group running a for-profit closed-source system; or, like me, you&amp;rsquo;re also trying to do all the devops on a non-profit, open-sourced system like AgileVentures.  Michael and I both look forward to being able to do further analysis on the pairing data and other streams coming out of AgileVentures, but there&amp;rsquo;s a lot of manual coding that gets in the way.&lt;/p&gt;

&lt;p&gt;This week we&amp;rsquo;re taking a break from pairing.  My knee is pretty painful, and there&amp;rsquo;s an admin backlog and this rails remote conference talk to give.  What did I do in my day without pairing?  I created two SPOCs (Small Private Online Classes) i.e. clones of the &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC for instructors in the US and Brazil.  I had the &amp;ldquo;eliminate, simplify, delegate, automate&amp;rdquo; phrase going round in my head.  I knew that there was an element that I could automate that would involve manipulating some XML archives.  I didn&amp;rsquo;t feel like getting into it. Is that a good metric? Or sloppy thinking?  I err&amp;rsquo;d on the side that if I wasn&amp;rsquo;t feeling enthusiastic about XML manipulation then I probably wouldn&amp;rsquo;t do a good job, and it was connected to a bigger task about MOOC merging that I would need to do in January, so I&amp;rsquo;d probably be more enthusiastic about it then.  Besides, no one apart from me would get excited about that automation now, so I pushed on.  It was two MOOCs.  It took a minute to do the manual updates.  I did update the code though, so that the URL of the course was spat out correctly - that&amp;rsquo;ll save me a few minutes over the next few months.&lt;/p&gt;

&lt;p&gt;I pushed on, got the materials from the Mentive class pushed up onto my github:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/tansaku/learner_dictionary&lt;/li&gt;
&lt;li&gt;https://github.com/tansaku/learner&lt;em&gt;dictionary&lt;/em&gt;rails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doing that I found that I could use &lt;code&gt;hub create&lt;/code&gt; from the command line to create the new repos without having to go to the GitHub Web UI - that&amp;rsquo;ll save me a few minutes over the next year, although to make it work I had to burn some time re-authenticating with GitHub locally.  I also reviewed slack, email, commented on various tickets in pivotal tracker and GitHub raised by my premium AV members.  I iterated on a couple of asynchronous votes and was pleased to see more movement on the websiteone tickets now that we onboarded a couple of new premium members to that project.&lt;/p&gt;

&lt;p&gt;I dithered over a PR on LocalSupport - should I push in some changes directly?  Should I list out all the changes I might make?  Would that be too aggressive and burdensome for the new bootcamp graduate who was submitting the PR?  I asked and got the answer later in the day that I should make the changes myself - will try to do that today.  I also realised I needed to update Heroku authentication for Travis on LocalSupport, but I knew I was putting off working on the talk I&amp;rsquo;m giving for Rails Remote conference.  There&amp;rsquo;s always station keeping for projects, but this talk on learning via pull-requests needed to be prepared early so I could practice and get feedback.  I went through the slides, tried to improve them and shared them with our premium group, getting some great feedback from Pat.&lt;/p&gt;

&lt;p&gt;I was into the time that I might usually be pairing with Michael.  I took a breather after the slides, and greeted new folks in our #general channel, replied to some emails, and then got down to trying to fix our LocalSupport automated deploys to Heroku.  I had worked out previously that we probably needed to update the auth token in Travis.  I had to install the Travis gem in LocalSupport in order to regenerate the token, but then the install failed in Travis CI itself.  I ended up breaking through by removing the Travis gem and just checking in the authentication change.  Travis gem in a project breaks Travis?  Kind of meta :-)&lt;/p&gt;

&lt;p&gt;I thought a similar issue might be affecting our automated PR deploys on WebSiteOne AND LocalSupport, but for some reason the automated deploys on LocalSupport were switched off.   They were on, on WSO, but not happening.  I kicked some off manually, and switched them on, on LocalSupport.  The Heroku PR automated deploy is way cool, but temperamental. To be fair, due to Heroku&amp;rsquo;s ninja charging changes recently, we&amp;rsquo;ve been switching accounts and that may have reset some confif.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t get down to any serious coding, but did manage to get through a set of important devops stuff.  I ran the &amp;ldquo;Kent Beck&amp;rdquo; scrum and was really pleased to catch up with Sigu, who&amp;rsquo;s running a coding bootcamp in Kenya.  He tells me that the students pay $60 for the 3 month course on Ruby and Rails.  He&amp;rsquo;s planning a meetup for all his students&amp;ndash;past, present and future&amp;ndash;and hoping to run through some basic ruby stuff, 3rd party APIs etc., and he asked if I would make an intro video for him, which I totally will.  It&amp;rsquo;s staggering to think that people pay $10000+ or so for coding bootcamps in the US and Europe.&lt;/p&gt;

&lt;p&gt;So I think I managed to create a few minor efficiencies that will save me time over the coming months, but I don&amp;rsquo;t suspect I&amp;rsquo;ll get down to a three-day week any time soon.  Particularly when there are initiatives like Sigu&amp;rsquo;s to support in Kenya.  Students there are the ones that AgileVentures&amp;rsquo; fellowship program could really help.  I&amp;rsquo;d love to give all those Kenyan students AgileVentures premium support, like we do for CraftAcademy students from Sweden.  I really need to build out our fellowship materials and payment framework.  Sod the three-day week, there&amp;rsquo;s a world to change here!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MultiDimensional Learning Economics</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/10/multidimensional-learning-economics/"/>
    <id>http://blog.url.com/2016/10/10/multidimensional-learning-economics/</id>
    <published>2016-10-10T01:00:00+01:00</published>
    <updated>2016-10-10T21:25:20+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This weekend I ran my first Mentive class.  Mentive is an educational startup that provides tutoring for a number of different Massively Open Online Courses (MOOCs), including our “Agile Development using Ruby on Rails”.  We’re currently running the part 2 or “advanced” course that corresponds to the second half of the UCBerkeley Software Engineering class.  It’s my first time trying out the Mentive system which uses GotoMeeting rather than Hangouts.  Myself and John Rofrano are leading tutorial sessions through Mentive on this run.  We’ve both got a couple of students signed up.  I think the numbers might be down for a couple of reasons; one, we removed all the deadlines on the “advanced” course as part of a move towards taking the classes completely self-paced next year.  That probably reduces the sense of urgency as regards sign up.  Also, I hear that Mentive increased their prices, and they may have tipped a limit that we’re also seeing with AgileVentures PremiumPlus.  I’ve had conversations with a few people that the £100 a month price tag on PremiumPlus is beyond their means.  Tweaking those prices and offerings are ultimately what makes all the difference perhaps.&lt;/p&gt;

&lt;p&gt;So anyway, I usually have a rule of not doing any work on the weekends, but I had agreed to take a class on Saturday evenings, since weekday evenings are challenging for me due to early starts to support the daily school run.  Also I’m keen to support Mentive, understand their platform, and furthermore I need to bring in some cash while AgileVentures works its way out of the red.  So I’m running my Mentive class at 8:30pm UTC on Saturday evenings, which makes it practical for anyone from UTC-7 to UTC+2 to attend, which encompasses most of the Americas, Europe and Africa.  I just had one student on this first instance, and so they got a focused one to one session.  We talked about how they had found the previous course, and what they were hoping to get out of this advanced course.  They shared that RSpec had been challenging and I reflected that they weren’t alone.  The common refrain from the different instructors using the MOOC materials around the world was that people tended to get Cucumber, but struggled with RSpec.  So in the session we worked through driving the creation of a small domain model of plain old Ruby objects via RSpec tests, and then did the same for a small Rails app that would use that domain model, driving the creation of an API with RSpecRails tests.  My student seemed pretty pleased with that, and I’m looking forward to developing that further in future sessions.&lt;/p&gt;

&lt;p&gt;Mentive classes are intended to support up to 20 students, and it would be interesting to see if the same guided app creation technique would work with a larger class, keep them engaged and so forth.  Doing it with a single student is not so far removed from what we do in PremiumPlus pairing sessions.  On Saturday my student was on a tablet, and so couldn’t easily type code, but I set up pairing intervention elements by stopping at points and asking my student what they thought I should do next, and that seemed to work well.  Obviously since it was only a single student I was able to tailor what we did and the pace directly to their preference.  Something that’s much more difficult to do with a larger group.&lt;/p&gt;

&lt;p&gt;The big difference between Mentive sessions and AgileVentures Premium/PremiumPlus, is that everything AgileVentures is OpenSource and &amp;ldquo;in context&amp;rdquo;.  All the coding work done with AgileVentures is on a real open source code base, has some relation to the need of a real charity customer or user base.  Of course some learners would much rather work on a more tightly constrained problem or exercise.  Hence the profusion of study tools like CodeWars, CodeAcademy, HackerRank and so forth.  Even the majority of the ADuRoR course uses a toy application, although I really do love the legacy assignments which take an older version of the oldest OpenSource RoR project &amp;ldquo;publify&amp;rdquo; (when it was called typo), and sets the students to do bugfixes and add features fully in context of a working legacy app.  I think that&amp;rsquo;s an inspired choice on the part of Armando Fox, Dave Patterson and the Berkeley TAs who worked on the assignment with them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s working on that assignment myself several years ago that made me want to do &lt;em&gt;all&lt;/em&gt; my learning in context.  It&amp;rsquo;s why I wanted AgileVentures to exist, a place that could help you do all your learning in context, and contribute to the greater good at the same time.  Of course systems like GitHub, BitBucket and SourceForge already provide a huge vista of OpenSource projects for ongoing learning, but a learner is often thankful for a pathway through the complexity.&lt;/p&gt;

&lt;p&gt;Now AgileVentures doesn&amp;rsquo;t provide as much of a pathway as FreeCodeCamp or CodeCademy or even CodeWars, and all of these still have some beautifully unstructured portions.  We&amp;rsquo;re still working on getting the balance right at AgileVentures, and also the economic model to make is sustainable.  It seems like both CodeWars and CodeCademy are leaning towards being solutions to help employers find job candidates, and FreeCodeCamp is operating as a free for all non-profits and developers, while charging companies a hiring fee when FCC developers are placed (like many bootcamps).&lt;/p&gt;

&lt;p&gt;AgileVentures at the moment is closer to edX and Mentive in that individual learners are paying for additional services.  Actually AgileVentures is a charity so you could also look at it that every premium member is a sponsor who&amp;rsquo;s getting benefits KickStarter or Patreon style.  This is where the multidimensional economics of learning comes in.  What are people willing to contribute for what kind of perk or service?  We&amp;rsquo;ve had very few sign ups for PremiumPlus, but people are happy to pay a lot more money for a bootcamp, and many people pay similar amounts for MOOC course certificates.  &lt;/p&gt;

&lt;p&gt;There seems to be a prevaling view that taking courses equals education.  I guess I&amp;rsquo;m drinking my own cool-aid here, but I feel like learning comes from doing.  More and more courses are hands on these days, but I&amp;rsquo;m skeptical of the learning benefits of watching lots of lectures, or even toy exercuses.  I guess it&amp;rsquo;s a relatively low impact way of floating your brain in some of the domain concepts.  Not everyone wants to become an expert in a particular field.  However if you&amp;rsquo;re in a rush to skill up and you can take the emotional pain of making lots of mistakes (really valuable for learning), then I think diving in to a real project is the way to go.&lt;/p&gt;

&lt;p&gt;AgileVentures tries to create a safe space to fail on an open source project with a real customer.  I don&amp;rsquo;t know how we can convey that more strongly.  What I&amp;rsquo;ve learnt from all the different educational environments I&amp;rsquo;ve taught in (university, MOOC, bootcamp) is that almost everyone hates failure, and that many of us would much rather spend a lot of time watching videos and reading rather than holding our feet to the learning fire.&lt;/p&gt;

&lt;p&gt;It was holding my feet to the learning fire that got me my AstroPhysics degree.  It was so tempting to keep reading, and re-summarizing my notes.  It wasn&amp;rsquo;t until I forced myself to repeatedly answer old exam questions that I got my exam technique down and got the first that got me on to higher education.  Not that I was ever really satisified with myself during my first masters and PhD.  It still felt trivial and isolated from the rest of the world.  Part of the problem was that I was studying in the dark ages before search engines like Google connected learners with the rest of the world.&lt;/p&gt;

&lt;p&gt;So anyhow, I&amp;rsquo;m thinking we need a new Premium tier for AgileVentures.  What I notice (and I&amp;rsquo;ve blogged about before) is how so many people prefer to ask me questions 121 rather than in group chat; and it takes a lot of persuasion before people will post publicly, and it&amp;rsquo;s rare that it becomes their default.  Some individuals will keep on asking for one to one help, even though there&amp;rsquo;s no financial incentive for me to help them.  I don&amp;rsquo;t want to come across as mercenary, but I&amp;rsquo;ve put in thousands of volunteer hours and a lot of my own savings to supporting learning online.  I&amp;rsquo;ve got to put up some toll booths to feed my kids.&lt;/p&gt;

&lt;p&gt;I guess some people are used to coming from a state education system where they can get 121 support from their instructors if they press hard enough.  I wonder if people realise that the time I spend answering their 121 question takes up time that I could be using to earn money to feed my kids?  And my three boys eat like horses! :-)  Maybe they realise and don&amp;rsquo;t care?  Maybe they&amp;rsquo;re just not thinking about it; they&amp;rsquo;re just focused on their own question, trying to solve their own problem.&lt;/p&gt;

&lt;p&gt;I want to get learners comfortable about asking in public so that others can benefit.  If they ask in group chat on AgileVentures it increases the activity in the community, and the community value keeps people around, and the rising tide lifts all the boats.  I could devote all my time to answering 121 questions, and I might get a few thanks from people, and I might learn a few things, but it&amp;rsquo;s not enough to feed my kids.  It makes me think that the new AgileVentures premium tier should be called &amp;ldquo;121&amp;rdquo;, cost about £25 a month, and get you an assigned mentor who can answer your questions on 121 chat.  And maybe a £50 a month version called Premium on Air that gets you an hour of hangout time.  We&amp;rsquo;ll have to work out the details.  We need to avoid changing and tweaking too much or we confuse people, muddy the water.  It really is a complex multidimensional economics of learning problem &amp;hellip; &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Complexity Edifice</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/07/the-complexity-edifice/"/>
    <id>http://blog.url.com/2016/10/07/the-complexity-edifice/</id>
    <published>2016-10-07T01:00:00+01:00</published>
    <updated>2016-10-10T09:48:24+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I assumed getting to safe green shores with this PremiumPlus upgrade button might be a little involved.  I still held out hope that we might be able to address some of the code smells we were encountering and/or generating.  Here were some of my concerns at the end of the last session:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cukes using the same factories as specs&lt;/li&gt;
&lt;li&gt;Model specs full of a mixture of unit and integration tests&lt;/li&gt;
&lt;li&gt;FactoryGirl object creation having side-effects on how single table inheritance classes were reporting their class&lt;/li&gt;
&lt;li&gt;VCR/Billy file mess from recording all the Stripe interactions&lt;/li&gt;
&lt;li&gt;Lack of confidence in code using &lt;code&gt;current_user&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some &lt;a href="http://stackoverflow.com/a/20101117/316729"&gt;solo googling&lt;/a&gt; had showed me that there should be some simple fixes for mixing FactoryGirl and STI; although I was still nervous about the fairylight connections between all these different factories that required special tweaking to behave like objects in production.  I knew we had a potential fix for the insecure &lt;a href="https://github.com/plataformatec/devise/issues/4317#issuecomment-251667866"&gt;current_user&lt;/a&gt;, and a possible alternate for &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock"&gt;mocking Stripe&lt;/a&gt;, but all of these were arguably distractions while we were still trying to get the tests green.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d managed to avoid aggravating the Cuke usage of factories by adjusting the step that created a premium member like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt; &lt;span class="sr"&gt;/^I am logged in as( a premium)? user with (?:name "([^"]*)", )?email "([^"]*)", with password "([^"]*)"$/&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;premium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

  &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="s1"&gt;'cus_8l47KNxEp3qMB8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subscription: &lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;new_user_session_path&lt;/span&gt;
  &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s1"&gt;'user_email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s1"&gt;'user_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
    &lt;span class="n"&gt;click_button&lt;/span&gt; &lt;span class="s1"&gt;'Sign in'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I still wasn&amp;rsquo;t completely happy with this, but I was feeling a little suspicious of factories and so just creating the Subscription and PaymentSource objects directly felt a little safer.  Of course, the entire acceptance test was slightly compromised by reaching in to the database anyway.  A cleaner test might have gone through the entire sign up process for Premium, before trying a PremiumPlus upgrade.  The trade off here is running time, and the question is can we get the database into a state that corresponds to what would have been the case if a full Premium signup had happened.&lt;/p&gt;

&lt;p&gt;Factories in cukes had bitten us hard last week.  In the LocalSupport project we avoided every scenario having to repeat sign in by reaching in to the Capybara session cookies.  Here in WebsiteOne we were stepping directly through the sign in operation, but creating the users with factories.  In LocalSupport we create the users with simple object creation.  I&amp;rsquo;d been burnt in the early days by Rails fixtures, to which factories were supposedly the solution, although apparently even &lt;a href="http://chriskottom.com/blog/2014/11/fixing-fixtures/"&gt;fixtures are being rehabilitated&lt;/a&gt;.  The right tool is all dependent on context of course :-)&lt;/p&gt;

&lt;p&gt;I think the issue here is partly the general one of descriptions of encapsulated things.  We see it in the naming of methods, the naming of steps; it&amp;rsquo;s all about the extent to which the details of what happen under the hood are inferable from the description.  So for example in the above code the step is something like &lt;code&gt;Given I am logged in as a premium user with ...&lt;/code&gt;, and this is reasonable, we would expect to have a logged in user who is signed up for Premium.  Then inside the step we have things like &lt;code&gt;Premium.create(user: @user, started_at: Time.now)&lt;/code&gt; which creates a Premium subscription for a user starting now.  Maybe it would be better as &lt;code&gt;Subscription::Premium&lt;/code&gt; but still, my fear is that &lt;code&gt;FactoryGirl.create(:user, first_name: name, email: email, password: password, password_confirmation: password)&lt;/code&gt; is hiding a lot of complexity from me.  It happens to also create a G+ authentication and a Karma object.&lt;/p&gt;

&lt;p&gt;I guess the solution there is better names for our factories, rather than throwing out factories themselves.  The creation of the Karma object should just be removed from the factory, but we could call this factory :user&lt;em&gt;authenticated&lt;/em&gt;with&lt;em&gt;gplus to make things a little more transparent.  I&amp;rsquo;m still uncomfortable about features and specs sharing factories, but I&amp;rsquo;m also not entirely clear if we can separate them.  We&amp;rsquo;re using the `factory&lt;/em&gt;girl_rails` gem and so FactoryGirl appears to be available as a singleton throughout our specs and cucumber steps, hmmm.&lt;/p&gt;

&lt;p&gt;So anyway, that&amp;rsquo;s all preamble to the late starting pairing of the day.  The actual fail that we&amp;rsquo;d left things on the day before was this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Scenario: User upgrades to premium plus from premium                                                       # features/premium/upgrade_membership.feature:40
    Given I am logged in as a premium user with name "John", email "john@john.com", with password "asdf1234" # features/step_definitions/user_steps.rb:5
      uninitialized constant Premium (NameError)
      ./features/step_definitions/user_steps.rb:8:in `/^I am logged in as( a premium)? user with (?:name "([^"]*)", )?email "([^"]*)", with password "([^"]*)"$/'
      features/premium/upgrade_membership.feature:41:in `Given I am logged in as a premium user with name "John", email "john@john.com", with password "asdf1234"'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out for Rails(?) to load the STI subscription classes they have to be in their own files.  I created a &lt;code&gt;premium.rb&lt;/code&gt; file containing just:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Premium&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Subscription&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we were moving forward, although the module for payment source appeared to allow us to group together the STI there in a single file:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PaymentSource&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentSource&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:subscription&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CraftAcademy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stripe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and with that it was a few short steps to get the premium plus upgrade passing.  Our charges controller needed to store the change in plan in our new domain objects:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PremiumPlus'&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"premiumplus"&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code was still awful, but we had green.  What made the day complicated was that several of the regressions now failed.  That&amp;rsquo;s what they are supposed to do of course, catch how your changes are breaking other parts of your system.  Some of them were fixed by updating how we originally create premium customers in the charges controller&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# current_user.stripe_customer = stripe_customer.id&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but we were also getting an acceptance fail on upgrade from Basic to Premium, and it was the stripe iframe popup that was not showing up.  It was working in the normal sign up section, and we tried to drop back to see when it had been working.  Michael was driving at this point, and trying a git bisect.  It was starting to look like it had never worked, but upgrade from Basic to Premium had been deployed to production.  It had gone through CI.  It was working when we ran the full rails server locally.  Here&amp;rsquo;s that popup for reference:&lt;/p&gt;

&lt;p&gt;&lt;img alt="stripe pop up" src="https://www.dropbox.com/s/h5zv1ge3rhrbgly/Screenshot%202016-10-07%2009.45.13.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the thing that I speculate that most people don&amp;rsquo;t test in their acceptance tests because sandboxing it effectively requires custom work in puffing billy that I&amp;rsquo;ve blogged about before.  Well, who knows, maybe everyone&amp;rsquo;s doing it.  I&amp;rsquo;ve often made the mistake of thinking we&amp;rsquo;re doing something clever or hard, only to find lots of others are doing it and finding it trivial :-)&lt;/p&gt;

&lt;p&gt;Michael&amp;rsquo;s faulty modem sound alert was going off, and my post-operative knee was in quite a lot of pain.  I suggested a &amp;ldquo;pair off&amp;rdquo;.  We should separate, work on this individually and then compare notes at the scrum.  I&amp;rsquo;m bedridden this week, and I find the single laptop (I&amp;rsquo;m usually docked to three monitors) very constraining in a pairing session.  We separated and prodded at the system separately.  Michael was in byebug confirming that the dialogue really didn&amp;rsquo;t pop up in the test environment:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*** Capybara::Poltergeist::ObsoleteNode Exception: The element you are trying to interact with is either not part of the DOM, or is not currently visible on the page (perhaps display: none is set). It's possible the element has been replaced by another element and you meant to interact with the new element. If so you need to do a new 'find' in order to get a reference to the new element.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was looking at the traces in the sandbox.  I had rolled back to our stable develop branch and it was clear to me that Stripe was rejecting the request from the headless browser to get the info to display the popup (which involves a request to the Stripe servers):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;→ more features/support/fixtures/req_cache/allow_users_to_upgrade_membership/user_upgrades_to_premium_from_free_tier/get_checkout.stripe.com_0c264be81b93fe5a9dad2f95b498add8679d7c11.yml
---
:scope: 
:url: https://checkout.stripe.com/v3/MmIlwJCFOGIGxL58rFJw.html?distinct_id=2639e53d-dc62-49f3-ee65-08369e21cd0b
:body: ''
:status: 403
:method: get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Michael pointed to the &lt;a href="https://dashboard.stripe.com/test/logs"&gt;stripe logs&lt;/a&gt; which showed that we weren&amp;rsquo;t even hitting the test server.  We didn&amp;rsquo;t fix it before the scrum, but afterwards I did some solo work that appeared to get to the bottom of it.  I could see from the VCR sandbox that we were generating a different distinct&lt;em&gt;id for Stripe than we had previously.  I was not sure what had changed, but we were getting VCR cache misses with URLs like `https://checkout.stripe.com/v3/MmIlwJCFOGIGxL58rFJw.html?distinct&lt;/em&gt;id=956c69c0-fb75-bf58-cce8-6871b7d0cb73`.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still not completely confident about the fix, but adjusting the VCR config to ignore the &lt;code&gt;distinct_id&lt;/code&gt; parameter made everything suddenly start working:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hook_into&lt;/span&gt; &lt;span class="ss"&gt;:webmock&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cassette_library_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'features/support/fixtures/cassettes'&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignore_localhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_cassette_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:match_requests_on&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="ss"&gt;:method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;request_matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uri_without_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:prev_imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:distinct_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The VCR cache no longer leaked, the tests passed and it was now a simple fix to sort out the other failing regression (for card update), by switching to the new domain objects.  I&amp;rsquo;m not 100% confident that if we dumped the entire cache that the freshly recorded caches would necessarily pass.  I&amp;rsquo;m nervous that a new developer checking out develop right now would get a fail.  However the feature branch is now passing everything locally and in CI.&lt;/p&gt;

&lt;p&gt;It was satisfying to go green, but there are some things here that I don&amp;rsquo;t think I can push off to refactoring tickets:&lt;/p&gt;

&lt;p&gt;1) We need some sad paths for upgrade failure 
2) We&amp;rsquo;ve got to look carefully at Demeter violations in the way we use the Stripe API and our own domain objects
3) Patching develop with the VCR config fix&lt;/p&gt;

&lt;p&gt;In the scrum I was talking about Donald Norman&amp;rsquo;s Design of Everyday Things, in which he laments how people blame themselves for not understanding poorly designed things.  Git, Stripe, Rails, Acceptance testing.  There&amp;rsquo;s some real complexity there.  I&amp;rsquo;m not saying they are poorly designed, but the edifice of concepts that someone needs to understand to work with our acceptance tests &amp;hellip; maybe the problem is not the tools, but the way we are building on top of them?&lt;/p&gt;

&lt;p&gt;Stripe says that they&amp;rsquo;re okay with our tests hitting their test API at reasonable levels.  Other developers I respect have said that acceptance testing Stripe is too hard, and so just leave that out; testing everything around it.  Do I have a bad habit of pushing some things to the limit when others would sensibly give up and so get myself into trouble?  There&amp;rsquo;s so much here.  Is it even vaguely comprehensible in blog form?  I think it will be at least another week before I&amp;rsquo;m comfortable releasing this feature, but in the meantime I&amp;rsquo;ll keep blogging!&lt;/p&gt;

&lt;p&gt;Related Videos &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nQEC5HjwTnI"&gt;Pairing Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HCIaCdN6GW4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Non Invasive Programming</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/06/non-invasive-programming/"/>
    <id>http://blog.url.com/2016/10/06/non-invasive-programming/</id>
    <published>2016-10-06T01:00:00+01:00</published>
    <updated>2016-10-10T09:48:24+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I was back in shape for a bit of pair programming again and Michael and I continued what we&amp;rsquo;d been working on last week, which was allowing &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1303"&gt;Premium members to upgrade to PremiumPlus&lt;/a&gt;.  It took us 15 minutes or so to get up to speed, closing out a few experimental PRs, checking that some airbrake errors weren&amp;rsquo;t anything serious etc.  I had been assuming we&amp;rsquo;d have to focus on other things, so I was pleased when we could continue with a task related to premium.  I was speculating that the small spike in new sign ups we had might have been related to rolling out the &amp;ldquo;Upgrade to Premium&amp;rdquo; button on all the individual user profile pages.&lt;/p&gt;

&lt;p&gt;I was half tempted to start ferreting through our Google Analytics data and checking with the new premium members about this, but put a pin in that and tried to make progress on the outstanding task.  DriveBy heuristic, finish what you started, and find the shortest path to completion.  Hmm, maybe it should be called &amp;ldquo;WhistleStop&amp;rdquo;, or &amp;ldquo;non-invasive&amp;rdquo;, anyhow &amp;hellip; it was an interesting operation because what we were hoping was to pull in the new domain objects we&amp;rsquo;d created the week before (Subscription and PaymentSource).  We had a failing acceptance test that was expecting a premium user&amp;rsquo;s profile page to now show an &amp;ldquo;upgrade to Premium Plus&amp;rdquo; button: &lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User upgrades to premium plus from premium
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in as a premium user with name &lt;span class="s"&gt;"John"&lt;/span&gt;, email &lt;span class="s"&gt;"john@john.com"&lt;/span&gt;, with password &lt;span class="s"&gt;"asdf1234"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Upgrade to Premium Plus"&lt;/span&gt;  &lt;span class="c"&gt;# failing step&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium PLUS Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Plus Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium Plus"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was still not completely happy with the level of abstraction in this scenario, but I jumped into the view to start tinkering with the existing logic:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% unless current_user.membership_type == 'Premium' %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= render 'users/profile/premium_upgrade' %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not that we wanted logic in our views.  In the previous session we had already extracted the premium upgrade button into a partial &lt;code&gt;_premium_upgrade.html.erb&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charges_path(plan: 'premium') do %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
            &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
            &lt;span class="na"&gt;data-description=&lt;/span&gt;&lt;span class="s"&gt;"A month's subscription"&lt;/span&gt;
            &lt;span class="na"&gt;data-amount=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt;
            &lt;span class="na"&gt;data-currency=&lt;/span&gt;&lt;span class="s"&gt;"GBP"&lt;/span&gt;
            &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt;
            &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Premium Membership"&lt;/span&gt;
            &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had specifically avoided DRYing that out with the similar button in the similar view we had in the main Premium payment page as I wanted us to stay tightly focused on one thing and I knew that our business logic was in flux.  Looking at the logic we had, both Michael and I were thinking about making something like:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if current_user.can_upgrade? %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= render "users/profile/#{current_user.next_upgrade}" %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and how we wanted to be extracting the business logic e.g. the current upgrade path of &amp;ldquo;Basic&amp;rdquo; to &amp;ldquo;Premium&amp;rdquo; to &amp;ldquo;PremiumPlus&amp;rdquo;.  Michael was pushing me to stop talking about it and just get it done, as we all know I have a tendency to run off at the mouth.  In the first instance I did the super simple step of creating an additional premium upgrade partial &lt;code&gt;_premium_plus_upgrade.html.erb&lt;/code&gt; that was similar to the one above and tweaked the logic, thinking we&amp;rsquo;d still get a failure:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if current_user.membership_type == 'Premium' %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= render 'users/profile/premium_plus_upgrade' %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif current_user.membership_type == 'Basic' %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= render 'users/profile/premium_upgrade' %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was reflecting about how that business logic would need to be DRYed out, but not also how I didn&amp;rsquo;t want to do that immediately, putting it to one side to see how this failed.  I&amp;rsquo;m not sure quite what I was thinking, but surprisingly the step actually passed, or at least got us on a few more cucumber steps.  We laughed about the importance of proceeding in simple steps.  If we&amp;rsquo;d got sidetracked extracting business abstractions we&amp;rsquo;d have had some missing components in our understanding, or at least in my understanding.  Not that we don&amp;rsquo;t want to extract the business logic eventually, but we don&amp;rsquo;t want to do it prematurely.  The funny thing then was that we realised that actually we didn&amp;rsquo;t want another credit card payment button for the Premium user who was upgrading to Premium Plus.  We already had their credit card details. We could craft our own button and endpoint to do the subscription upgrade as described by Stripe in an example in their docs:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sub_3R3PlB2YlJe84a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"premium_monthly"&lt;/span&gt;
&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So suddenly we were back-peddling.  I could feel the &amp;ldquo;I want to keep coding&amp;rdquo; urge and forced myself to pong the code over to Michael and he wrote a new &lt;code&gt;_premium_plus_upgrade.html.erb&lt;/code&gt; partial that looked like this:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charges_upgrade_path, method: "put" do %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= submit_tag "Upgrade to Premium Plus", class:"stripe-button"%&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;d decided to create a new action on the charges controller.  What was really interesting here, reflecting on our piecemeal work on the charges controller, is that we realised we&amp;rsquo;d got our RESTfulness totally out of whack.  We&amp;rsquo;d originally put our subscription sign-up in a &amp;ldquo;charges&amp;rdquo; controller from one Stripe example that was all about making single one off charges.  What we had would be more accurately called a &amp;ldquo;Subscription&amp;rdquo; controller.  Let&amp;rsquo;s look at all the code that&amp;rsquo;s accumulated there:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChargesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="n"&gt;before_filter&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;premiumplus?&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="vi"&gt;@plan&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_charge_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# _token?&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;card: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidRequestError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt; &lt;span class="s2"&gt;"Stripe error while updating card info: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="vi"&gt;@error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it looks like a CRUD controller, and you might expect it to be CRUDing charges, but actually it&amp;rsquo;s creating customers, subscriptions and updating customer credit card details; urgh, embarrassing!  It&amp;rsquo;s not immediately clear if what we need are separate controllers for Subscriptions, Customers and Cards; or a StripeController that takes care of all of them.  We&amp;rsquo;ll need to reflect carefully on this.  At the risk of adding insult to injury we went for just adding a non-RESTful action called &lt;code&gt;upgrade&lt;/code&gt;.  Trying to be &amp;ldquo;non-invasive&amp;rdquo; we just wanted to get this one feature completed adding a new route to &lt;code&gt;routes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/charges/upgrade'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'charges#upgrade'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:put&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a new action:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"premiumplus"&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took us a while to get to that logic in the upgrade action. It was failing silently and we had to drop into the debugger where the error message from the Stripe API told us to do something different from their docs; weird.  And total Demeter violation territory. &lt;code&gt;customer.subscriptions.retrieve(customer.subscriptions.first.id)&lt;/code&gt; in particular was looking very brittle.  Surely there would be something like customer.subscriptions.first that we could use instead?  We&amp;rsquo;d circle back - this was working and I had an eye on whether we couldn&amp;rsquo;t get this feature green without using any of our new domain objects.  Was that crazy?  I was thinking that it would give us a safe green space to reflect, and improve our understanding of the Stripe API.  With the upgrade code in place the only thing we needed was for the user object to be able to correctly report its membership type.  It currently did this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;membership_type&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Basic"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="s2"&gt;"Premium Plus"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We updated it like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;membership_type&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Basic"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Premium"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"premium"&lt;/span&gt;
    &lt;span class="s2"&gt;"Premium Plus"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which should have worked, but even using the debugger to check it step by step, it wouldn&amp;rsquo;t.  We were getting things like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; plan
"premium"
&amp;gt; plan == "premium"
false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something very strange was going on.  We were on shaky ground here, pushing at model logic with an acceptance test, for something that we were probably going to throw out anyway.  We threw out that code and I pulled in the new domain objects and got the &lt;code&gt;membership_type&lt;/code&gt; method under an integration test:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#membership_type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns membership type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Basic'&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'premium member'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;let!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns premium'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had to play with a lot of factories, and the above spec was passing with the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:subscription&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;membership_type&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Basic"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but we were running out of time, and we had to finish pairing without getting the acceptance tests green, because the cuke steps were going to need a whole load of refactoring to be creating premium users in terms of setting up these new domain objects like subscription and payment source.  I had several places of discomfort that I hope we can address in future sessions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cukes using the same factories as specs&lt;/li&gt;
&lt;li&gt;Model specs full of a mixture of unit and integration tests&lt;/li&gt;
&lt;li&gt;FactoryGirl object creation having side-effects on how single table inheritance classes were reporting their class&lt;/li&gt;
&lt;li&gt;VCR/Billy file mess from recording all the Stripe interactions&lt;/li&gt;
&lt;li&gt;lack of confidence in code using &lt;code&gt;current_user&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But which are the ones that we can address &amp;ldquo;non-invasively&amp;rdquo; to stay focused on getting this single feature green?  So much going on here.  Just how many refactoring tickets will we generate? All to be revealed in the next pair programming session!&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bKu3e_jLrQw"&gt;Pair Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8EkSfYVt9D0"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Pull Requests for Learning</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/05/pull-requests-for-learning/"/>
    <id>http://blog.url.com/2016/10/05/pull-requests-for-learning/</id>
    <published>2016-10-05T01:00:00+01:00</published>
    <updated>2016-10-10T09:48:24+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Call me crazy but I love pull requests.  Well let me place a caveat on that.  I love small pull requests, and the smaller the better.  I guess I still love the big ones, even if my response to them will usually be, &amp;ldquo;that needs to be smaller&amp;rdquo;.  Part of my PR joy is the way that GitHub displays them to me, and lets me comment on them.  I&amp;rsquo;m not so keen on the web interface for creating them, but I now primarily use &lt;code&gt;hub pull-request&lt;/code&gt; from the command line, so I don&amp;rsquo;t fight with the web UI like I used to.&lt;/p&gt;

&lt;p&gt;What I love about giving feedback on a pull request is that it has so much context.  It&amp;rsquo;s on a specific repo, it shows everything that&amp;rsquo;s changed.  Given appropriate configuration it will also include the results of running all the test suites, and a link to the deployed instance of the system.  I&amp;rsquo;ll generally be encouraging submitters to include screenshots to highlight any UI changes (would be great to automate that too somehow &amp;hellip;) and a hyperlink to the ticket that the pull request addresses in Pivotal Tracker or Jira or whatever.  If it&amp;rsquo;s a Github issue then that linkage is partially automated.&lt;/p&gt;

&lt;p&gt;I was talking about StackOverflow posts &lt;a href="http://nonprofits.agileventures.org/2016/10/04/anatomy-of-a-question/"&gt;yesterday&lt;/a&gt;, and I gave examples of two questions from some former students, and pretty much the first thing I was asking was for more context on their codebase.  Asking questions in the form of a pull-request removes the chance that context will be missing.  Call me crazy or extraordinarily lazy, but trying to help someone stuck on something when you don&amp;rsquo;t have the full context is asking to burn a lot of time.  As &lt;a href="http://nonprofits.agileventures.org/2016/10/04/anatomy-of-a-question/"&gt;Kent Beck says&lt;/a&gt;, any decent answer to an interesting question being, &amp;ldquo;it depends&amp;rdquo;, and if you ask me, it depends on the context.&lt;/p&gt;

&lt;p&gt;Back in the day I was always trying to pop up three levels of abstraction and ask, do you even need to be trying to cross that bridge?  If I&amp;rsquo;m stuck on anything I&amp;rsquo;m always trying to do that, but other parties don&amp;rsquo;t always appreciate that approach.  Often I think they just want to stay at the level of abstraction they are at.  They want to work with the particular technology because that&amp;rsquo;s what they think is the right pathway to a job, or with a particular system they are building because they think it will solve some sort of problem for themselves, or for someone else.  Pushing them too strongly out of the zone of their original question will generally make them uncomfortable.  Not that occasionally making people uncomfortable is wrong.  Sometimes that discomfort is Vygotsky&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Zone_of_proximal_development"&gt;zone of proximal development&lt;/a&gt;, but other times it&amp;rsquo;s a panic or resentment zone.  What I&amp;rsquo;m working on is getting better at knowing how much discomfort others can take.&lt;/p&gt;

&lt;p&gt;Which brings me back to pull requests.  In AgileVentures we field a lot of incoming pull requests on open source projects from developers of all experience levels.  Our goals are two-fold.  One, we want to be improving the quality of our codebases in order to deliver value to the users of our software.  Two, we want the submitters of those pull requests to be having a positive &amp;ldquo;team&amp;rdquo; learning experience.  Not that other open source projects don&amp;rsquo;t have the same goals, but we&amp;rsquo;re explicit about the learning part.  We really want the submitters to feel that they are part of an Agile team, getting involved with voting on the complexity of stories, bugs and chores; hanging out with each other online, and having access to meetings with the end clients who are generating the feature requests in the first place.&lt;/p&gt;

&lt;p&gt;There are several patterns that I have noticed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;many people are reluctant to make pull requests until they think their code is &amp;ldquo;finished&amp;rdquo;&lt;/li&gt;
&lt;li&gt;some people are quite intimidated to make pull requests at all, perhaps thinking they might break something&lt;/li&gt;
&lt;li&gt;some people can feel quite negative after receiving feedback on their pull request&lt;/li&gt;
&lt;li&gt;most people will get quite frustrated if you keep on asking for additional changes on their pull requests&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A few years ago in my naivety about interacting with humans, I had implicitly assumed that making a pull request was an emotional non-event for people, and that they would appreciate ongoing requests for changes in order to get their code into the best state possible.  Looking at things now that seems self-defeating if our objective is to help people learn.  How have I evolved my PR management strategy?  Here&amp;rsquo;s a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;encourage people to submit &amp;ldquo;Work in Progress&amp;rdquo; pull requests, but don&amp;rsquo;t push too hard&lt;/li&gt;
&lt;li&gt;always start by thanking the submitter for their contribution&lt;/li&gt;
&lt;li&gt;try and find at least one good thing to say about their contribution&lt;/li&gt;
&lt;li&gt;limit the number of constructive criticisms to avoid overloading&lt;/li&gt;
&lt;li&gt;be kind, because everyone is struggling&lt;/li&gt;
&lt;li&gt;use automated code-assessment tools like houndci and code-climate, and tune them to not be overwhelming&lt;/li&gt;
&lt;li&gt;tell people that automated tools can be ignored&lt;/li&gt;
&lt;li&gt;gently encourage people to read the CONTRIBUTING.md and follow the PR submission guidelines&lt;/li&gt;
&lt;li&gt;if there is a trivial fix that I want in the PR, push it in myself&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But the most important and revolutionary thing to me has been the strategy of refactoring tickets.  I&amp;rsquo;m still wondering if these aren&amp;rsquo;t actually evil technical debt in disguise; but now we&amp;rsquo;ve been using them for a while, and I&amp;rsquo;ve had a fair few follow-up refactoring tickets closed with pull requests from other developers, I&amp;rsquo;m starting to think they really are a good way to go.  They are a pretty good way of avoiding two unpleasant and difficult situations.&lt;/p&gt;

&lt;p&gt;One thing that happens is that a person submits a pull request, and as project maintainer you ask for a refactoring.  Next, the submitter doesn&amp;rsquo;t necessarily agree with the refactoring, or just doesn&amp;rsquo;t have time to get to it.  So the pull-request sits there getting further and further out of sync with the codebase, and either requires a lot of work for a later merge, or ends up getting thrown away, which is a waste.  One way round this that I mention above as item 9) is making critical little changes in the pull request myself.  In the past I&amp;rsquo;ve got contributors to give me access to their forks, and now GitHub has a checkbox to make it easy for submitters to allow that.  From a learning point of view I think it might be better if the submitter made the changes themselves, but often the original submitter is exhausted, frustrated, or just won&amp;rsquo;t have time to get to the work for a few days.  For the sake of the project it&amp;rsquo;s best to get the PR pulled in sooner rather than later before the codebase diverges; and the submitter can still learn from the changes you made in the closed PR view.&lt;/p&gt;

&lt;p&gt;The other difficult situation is that refactoring tickets are made, but no one ever works on them and so the overall quality of the codebase suffers.  In a couple of projects we&amp;rsquo;ve started voting on refactoring chores, and this has had the effect of increasing their visibility, and now new team members have started working on them as a lower intensity way into the codebase.  Pivotal recommends not assigning points to bugs and chores, but in true Agile fashion we came to reflect on whether that was working for our situation.  In a project with a full time team, points for bugs and chores are dangerous because they distort estimates of when work is going to be completed.  We&amp;rsquo;re not a full time team; we have a lot of part-time volunteers with a high churn rate.  For those volunteers it&amp;rsquo;s important to know how complex a bug or chore is before they decide to work on it.  We&amp;rsquo;re not working to tight deadlines and so the estimation process is a nice to have, rather than a must to have.  In addition, our &amp;ldquo;staffing&amp;rdquo; model means that our projects sometimes suffer from lack of capacity; and so it&amp;rsquo;s good to have points assigned to anything that consumes our volunteers time. Finally points on bugs and chores also reinforces the concept that refactoring stories can be just as important as new-feature stories.&lt;/p&gt;

&lt;p&gt;A typical project team at Agile Ventures will have some very junior developers. Some will have just finished a MOOC or a 3-month coding camp, and might feel uncertain about their capability to contribute in a meaningful way. As noted above, working on a refactoring ticket is a lower hurdle to get started. The developer can learn an enormous amount by examining existing code, and gain confidence in their ability to assess design intent and code quality. This is a critical skill (and also a morale booster), and its great when this benefit can be explicitly reinforced by the more senior members of the team.&lt;/p&gt;

&lt;p&gt;Futhermore the addition of asynchronous voting allows more of our distributed part-time volunteers to participate in the process of assessing the complexity/difficulty of stories, bugs and chores. Maybe it&amp;rsquo;s a coincidence, but I&amp;rsquo;ve been enjoying a little wave of refactoring pull requests, and I think we&amp;rsquo;re getting a win-win here.  We&amp;rsquo;re breaking up bigger jobs into smaller more manageable chunks that new team members can start on in order to get familiar with our codebases and our processes.  Our code quality is improving and I think there&amp;rsquo;s a fair bit of learning going on :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Anatomy of a Question</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/04/anatomy-of-a-question/"/>
    <id>http://blog.url.com/2016/10/04/anatomy-of-a-question/</id>
    <published>2016-10-04T01:00:00+01:00</published>
    <updated>2016-10-10T09:48:24+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It’s really interesting to hear that &lt;a href="https://hackernoon.com/the-decline-of-stack-overflow-7cb69faa575d#.frp6i4ncr"&gt;StackOverflow (SO) might be on the decline&lt;/a&gt;.  John Slegers writes a really interesting &lt;a href="https://hackernoon.com/the-decline-of-stack-overflow-7cb69faa575d#.frp6i4ncr"&gt;blog post&lt;/a&gt; detailing some of the issues that the community is having.  In summary the suggestion is that StackOverflow is not as friendly to newcomers as it used to be, and that some of the reputation enabled moderators are running parts of the site with rather strict rules about what can and cannot be posted.&lt;/p&gt;

&lt;p&gt;I’ve always encouraged students and colleagues to post on StackOverflow and I know they’ve had some bad experiences, but also some good ones.  I offer “StackOverflow protection” to all my students assuring them that if they post on StackOverflow and anyone gives them any grief then I will get in there, and star and upvote their question and provide support and feedback on how to adjust their question in order to maximise its chances of getting a good answer, even if I don’t answer it myself.  What I encourage everyone to do is post their SO question and then take a link to it and post that into our slack &lt;a href="https://agileventures.slack.com/messages/techtalk/"&gt;#techtalk&lt;/a&gt; channel with a &lt;code&gt;@here&lt;/code&gt; to attract anyone who’s online and a &lt;code&gt;@tansaku&lt;/code&gt; to attract my attention.&lt;/p&gt;

&lt;p&gt;In the past I’ve also encouraged students who were contacting me directly via instant message to post their questions in group channels or on StackOverflow.  Very often students would be extremely reticent about doing this. Here are two examples of students who ultimately posted on SO following my suggestions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/28678092/how-to-change-recursive-method-into-non-recursive-one-in-js"&gt;http://stackoverflow.com/questions/28678092/how-to-change-recursive-method-into-non-recursive-one-in-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/30920118/cucumber-test-which-syntax-to-choose-to-test-a-radio-button-selection"&gt;http://stackoverflow.com/questions/30920118/cucumber-test-which-syntax-to-choose-to-test-a-radio-button-selection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one case my upvote cancelled out a -1 from someone else who didn’t like the question, and if you look carefully you can see me teasing out additional information from students in the comments section, and as it happens, I ultimately answered both of these students&amp;rsquo; questions on StackOverflow itself.  However, my sense is the majority of students would really rather not post on StackOverflow, or any public forum if at all possible.  As I’ve mentioned before, many students contact me one to one via emails or instant message.  It seems that this is something they generally prefer, to ask their questions in private.&lt;/p&gt;

&lt;p&gt;I’ve really struggled with that as an instructor because I know about the studies showing how others students can get massive learning benefits from hearing the dialogue between other students and their instructor, and even from student student dialogues.  It’s also much less efficient for me to be answering the same question repeatedly in private than in an open forum, and the numbers of students in a MOOC make one-to-one support completely impractical, particularly when I’m doing it on a volunteer basis.  I still encourage students and colleagues to post in open forums, but I’m beginning to see that when someone comes to you with a question, it’s somewhat dangerous to block them on it.&lt;/p&gt;

&lt;p&gt;Let me explain.  Blocking is when you try and divert the direction that someone is going in.  I’ve realized belatedly that I do it far too much, and often on the wrong occasions.  I think StackOverflow is guilty of it as well in places.  Slegers’ blog post talks about questions being pushed away as “off-topic” but I think StackOverflow should be open to evolving the kinds of questions and discussions it supports.  They want to be a pithy and terse set of purely technical Q&amp;amp;As, but I think that blocks a lot of potential value from the discussions people want to have.  I believe the SO founders did set up https://www.discourse.org/ to be an alternate system where discussion could evolve, which is great, but what we want it a way to allow free flowing discussion that can crystialize out into wonderfully terse summaries.&lt;/p&gt;

&lt;p&gt;Anyhow, my main point is that there is a tricky balance to be kept when dealing with a question that someone is posing. Part of it is economic.  When I’m working with university or bootcamp students, I’m in a context where my time is being paid for, and the student is paying for my support.  If they’re not comfortable asking in a public forum, then I’ve got to be careful not to put too much pressure on them; and yet, potentially they (and their other paying classmates) could really benefit if they did.  Of course ultimately the student has to be the judge of whether they are emotionally ready to post on a public forum.  In the volunteer MOOC context I can justifiably refuse to answer one-to-one questions, although they still come at me thick and fast.  Either which way I think the trick is sensing carefully where the learner is at, and trying not to force a change of medium or question strategy on them if they&amp;rsquo;re not ready for it.&lt;/p&gt;

&lt;p&gt;Coming back to SO, I’m no fan of the locking or downvoting of questions.  I think down voting should be reserved for answers only on SO.  Hmm, maybe we need to create our own alternative Q&amp;amp;A for AgileVentures … although I like the flow of Slack - I think we want our AV members to be actively engaging with each other where possible, rather than reading from dead texts.  Anyhow, I also post in public whenever possible since I’ve got a thick skin - at least as far as it goes on online forums.  I could care less if people are down voting my question or locking it.  Although clearly it makes sense to read the posting guidelines and try and conform to the norms on any given forum.&lt;br&gt;
The other thing I sense is that students and learners may often feel like they have to wrestle with a problem for some specified set of time before asking for help.  I guess I understand that, but when I’m stuck on a problem I want the whole world to be able to help if possible.  Check out this question that I asked on the Maths stack exchange:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://math.stackexchange.com/questions/1477767/efficiently-partition-a-set-into-all-possible-unique-pair-combinations"&gt;http://math.stackexchange.com/questions/1477767/efficiently-partition-a-set-into-all-possible-unique-pair-combinations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t want to suffer in silence.  If I’m stuck on something for longer than 20 minutes, I want to write it up, get it on SO, in a blog, on slack - document my process and share what I’m doing with others.  Ultimately as in that maths question I may end up solving it myself, but I want to get input and insights from as many people as possible.  Where I am now though, I think I will only ever push learners very gently to publish on group forums.  I hope we have a nice atmosphere in AgileVentures where people can ask questions in safety.  Slegers laments that neither Quora nor StackOverflow provide this any more, so perhaps AV should provide persistent Q&amp;amp;A outside Slack?  I still get huge value from SO though - I don’t find myself posting there so much but I’m always finding useful stuff in the SO results in Google.  I love the SO interface and hate to reinvent the wheel.  There are some open source alternatives …&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/Is-there-an-open-source-alternative-to-StackOverflow-I-can-use-for-internal-Q-A"&gt;https://www.quora.com/Is-there-an-open-source-alternative-to-StackOverflow-I-can-use-for-internal-Q-A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;End of the day I think it&amp;rsquo;s the interactive dynamic between developers asking each other questions in the context of a pull request, in the slack channel, that&amp;rsquo;s key; learning in context.  AgileVentures is a safe space to submit PRs and get supportive feedback - at least that&amp;rsquo;s my vision and ultimately our special sauce :-)&lt;/p&gt;
</content>
  </entry>
</feed>
