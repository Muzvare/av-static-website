<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-14T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Production and Staging Similarity</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/14/production-staging-similarity/"/>
    <id>http://blog.url.com/2016/09/14/production-staging-similarity/</id>
    <published>2016-09-14T01:00:00+01:00</published>
    <updated>2016-09-14T09:29:34+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So Michael and I finished up an important piece of work on the AgileBot yesterday.  At least we completed something we had started working on a while ago, which was getting the AgileBot legacy code wrapped in tests, and refactoring the config out of the main script file.  It seems like a good heuristic to finish what you start, although of course there&amp;rsquo;s always the danger of throwing good money after bad, or rather time; since time is of course, money.  It&amp;rsquo;s definitely been an interesting process though, and it feels very good to get to the breathing point.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve mentioned before, AgileBot is a chunk of CoffeeScript that takes incoming requests to send notifications about hangouts from WebSiteOne (our Rails monolith for AgileVentures) and pass them on to Slack and Gitter.  AgileBot&amp;rsquo;s CoffeeScript runs in Hubot (which runs on Node) and is deployed on Heroku.  AgileBot was an experiment from a couple of years ago to see what could be achieved in CoffeeScript (a Ruby flavoured variant of JavaScript) and Hubot.  Hubot has a range of functions and is extendible to allow it to respond to users in chat rooms, which is certainly something I&amp;rsquo;ve been interested in in the past.  Chatbots tend to become annoying rather quickly though, and users will often fail to take them seriously, although we do read reports of some &lt;a href="https://www.washingtonpost.com/news/innovations/wp/2016/05/11/this-professor-stunned-his-students-when-he-revealed-the-secret-identity-of-his-teaching-assistant/"&gt;chatbots fooling students into thinking they are human&lt;/a&gt; in some online classes.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to be deploying really effective chatbot tech, but we&amp;rsquo;re a small community and I think we&amp;rsquo;re in the stage where value is being derived from authentic connections between humans, rather than automating 1000&amp;rsquo;s of responses.  We&amp;rsquo;ve totally not played with the range of functions that Hubot can support, and the AgileBot script is taking advantage of Hubot&amp;rsquo;s ability to act like an API endpoint to act as a waypoint between our Rails monolith and the 3rd party endpoints of Gitter and Slack.  We&amp;rsquo;ve been making little changes to the AgileBot script over the months, and the lack of tests was a little nerve-wracking.  After tweaking the Jasmine tests on HangoutConnection we thought, yeah, let&amp;rsquo;s get some tests wrapped around AgileBot.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve blogged about parts of that before, and my nagging concerns that we could completely re-create this micro service as a gem in our Rails monolith or as a separate Sinatra micro service, faster than we could get the tests working and fix the associated issues.  In the meantime, particularly valiant solo efforts from Michael have got us to the point where the code is wrapped in integration tests, the config is refactored, and yesterday we got the new AgileBot deployed in production.&lt;/p&gt;

&lt;p&gt;The big hurdle that came up at the end was that when we deployed the new code to staging we were getting a thrashing in the logs.  The logs were dumping what looked like the entire list of our slack instance users in JSON format, and that&amp;rsquo;s so big we couldn&amp;rsquo;t see the actual error message.  It was this issue that we really took apart yesterday.  It was a tricky issue and while speculating about whether we&amp;rsquo;d been hacked, or the upgrade had changed some node modules out from under us, we made some progress by managing to replicate the error locally.  This took us copying the entire staging server config locally and running the hubot locally just as it would run on the Heroku server.  This allowed us to see some error specifics:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_redis: no callback to send error: OOM command not allowed when used memory &amp;gt; 'maxmemory'.
[Tue Sep 13 2016 14:50:21 GMT+0100 (BST)] ERROR Error: OOM command not allowed when used memory &amp;gt; 'maxmemory'.
  at ReplyParser.&amp;lt;anonymous&amp;gt; (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/hubot-scripts/node_modules/redis/index.js:279:27)
  at emitOne (events.js:77:13)
  at ReplyParser.emit (events.js:169:7)
  at ReplyParser.send_error (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/hubot-scripts/node_modules/redis/lib/parser/javascript.js:296:10)
  at ReplyParser.execute (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/hubot-scripts/node_modules/redis/lib/parser/javascript.js:181:22)
  at RedisClient.on_data (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/hubot-scripts/node_modules/redis/index.js:504:27)
  at Socket.&amp;lt;anonymous&amp;gt; (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/hubot-scripts/node_modules/redis/index.js:82:14)
  at emitOne (events.js:77:13)
  at Socket.emit (events.js:169:7)
  at readableAddChunk (_stream_readable.js:146:16)
  at Socket.Readable.push (_stream_readable.js:110:10)
  at TCP.onread (net.js:523:20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it seemed like we might be having a problem with Redis, the key-value cache that Hubot uses as a memory.  We&amp;rsquo;d copied over the redis URL in the server config, so our local hubby was also hitting the same Redis cache as the staging server.  We cycled through various loops of trying to clear out that Redis cache, but to no avail.  Our AgileBot script doesn&amp;rsquo;t use Redis at all.  It&amp;rsquo;s just part of booting up Hubot, which also has it&amp;rsquo;s own Slack connections and code.  That we&amp;rsquo;re spending time debugging something that&amp;rsquo;s not really related is fuel for my thoughts that we would move faster building an express or Sinatra micro service, but maybe getting distracted by thought it counter-productive &amp;hellip;&lt;/p&gt;

&lt;p&gt;We couldn&amp;rsquo;t seem to empty the Redis cache.  Even with resets and flushes and shutting everything down it still seemed to be filling up. We also tried deploying the master branch of the production code to staging and got the same thrashing issue.  This was an important step - we&amp;rsquo;d isolated the problem as not being related to any of the new code changes we&amp;rsquo;d introduced.  That&amp;rsquo;s such a crucial step when debugging.  All our speculations about how all sorts of updates might be influencing this thrashing issue could be thrown out, and we could focus on the problem being either the Redis cache, or some unknown upgrade of a node module.  It&amp;rsquo;s fascinating to me that npm doesn&amp;rsquo;t create a lock of the particular versions that get installed.  When we use bundle in the Ruby world we get a Gemfile.lock, and if you check that in the versions of libraries that your using can&amp;rsquo;t change.  Unless I&amp;rsquo;m missing something npm seems much more permissive.  At least if you don&amp;rsquo;t check in the node_modules directory itself then any time you do a fresh install (say on Heroku) then you&amp;rsquo;re doing the equivalent of Ruby&amp;rsquo;s &lt;code&gt;bundle install&lt;/code&gt;.  Maybe the Heroku build pack for node mitigates that somehow, but it feels like the node/npm keeps you more on the bleeding edge of your libraries?&lt;/p&gt;

&lt;p&gt;The fix for our thrashing problem came when Michael noticed that we had different Redis plugins on the production and staging instances of AgileBot.  HerokuRedis on production and RedisToGo on staging.  We uninstalled RedisToGo and installed HerokuRedis on staging.  The bug was gone locally, and gone from staging too.   A great reminder of how you really really really want staging to be as much like production as possible.  We were now able to proceed with doing manual acceptance tests of staging to check that hits from WebSiteOne would cause AgileBot to ping our Slack instance (but in suitable test channels), and that wasn&amp;rsquo;t working.  We spent some time trying to get debugging working in the context of Hubot, which was partially successful.  Michael wrote a debug Hubot script, and we got node-inspector running, and finally got the chrome inspector hooked on the debugger, but there was a time out and we lost the connection.  I&amp;rsquo;ve seen that with Rails running on Puma - the web server timeouts killing the debugger.&lt;/p&gt;

&lt;p&gt;We gave up on that - worked out how to post to the Hubot logs, and then saw that the problem was that our slack token wasn&amp;rsquo;t set correctly.  Fixed that, and manual acceptance tests worked.  We deployed to production just in time for a live test running the &amp;ldquo;Kent Beck&amp;rdquo; scrum - everything worked fine, and over night I can see the PacificRim scrum notified fine.  Haven&amp;rsquo;t seen any pairing notifications yet, but hopefully that&amp;rsquo;s fine.&lt;/p&gt;

&lt;p&gt;In the Kent Beck scrum Michael and I took stock, comparing the hours spent on getting the bots&amp;rsquo; legacy code wrapped in tests and deployed.  Michael thinks we spent less time getting to this point than we would trying to rebuild.  He might be write, but I think there&amp;rsquo;s a range of rebuilding options including just switching to JavaScript, moving to Express, or moving to Sinatra, with each having different pros/cons and likely times to completion.  Undeniably we are much more familiar with the Node/Hubot/CoffeeScript tech stack now, and that information is valuable.  Having got this far it would be silly not to now make a few more refactoring to AgileBot to deliver some noticeable improvements to our users, and see how our regression suite helps us make those changes; that much is clear.&lt;/p&gt;

&lt;p&gt;The itch I still want to scratch though is how fast I could make an express or Sinatra micro service to do the same thing.  Am I delusional that I think I could do the Sinatra one in a couple of days and the express one in half a day?  I won&amp;rsquo;t drag Michael on that whale hunt :-) I think that&amp;rsquo;s just something I need to waste my own spare time on to help in my own internal estimation process.  I also worry that my own constant questioning of the architecture of the system is kind of draining for people.  I want to work on the things that will deliver the most values to our users, and in turn generate revenue for AgileVentures that makes the whole charity enterprise sustainable.  I have so many thoughts, so many possibilities, but it really isn&amp;rsquo;t clear to me where to focus.  Would it be easier for everyone if I just pretended that I was certain that a particular approach was the best? :-) Maybe that debate is just something that I should be having internally without dumping it on other people through blogs, scrums and pairing sessions?&lt;/p&gt;

&lt;p&gt;I just love that feeling when you can jump up a level and say, right, we don&amp;rsquo;t need to build X, we can achieve our goal by building Y.  I love jumping those levels.  I guess many others like to stay focused on one level, at least for longer than I do.  If one thing is certain it is that I think too much :-) More doing, less thinking/debating perhaps? :-) Still, the whole reason I enjoy working with AV is thinking about the architectural/team/structural decisions and how they can make us more efficient and sustainable.  I&amp;rsquo;ll save that for another micro-services blog.  In the meantime I think we can reflect that pithy sayings and heuristics can often be contradictory, but the take home today is: make sure your production and staging environments are as similar as they can possible be!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Eye on the Ball</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/13/eye-on-the-ball/"/>
    <id>http://blog.url.com/2016/09/13/eye-on-the-ball/</id>
    <published>2016-09-13T01:00:00+01:00</published>
    <updated>2016-09-13T17:32:46+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My last few days have been taken up a lot with transferring data between iPhones.  This has been precipitated by the gradually faltering abilities of my 2 year old iPhone 5S:  Trickle charge not working, normal charging intermittent except with specific cables.  Also, my eldest son is starting cycling to a high school that&amp;rsquo;s some distance away.  He wants a phone to stay in touch with his circle of friends, some of whom are starting at other schools even further away.  My wife and I have been &amp;ldquo;technologically conservative&amp;rdquo;.  We&amp;rsquo;ve held off getting a phone for him, while his peer group now all seems to have one and use texting and whatsapp to arrange get togethers etc.  &lt;/p&gt;

&lt;p&gt;So the social pressure has mounted to get him a phone.  The last 10 days I&amp;rsquo;ve been cycling with him to school to check his road safety, and that&amp;rsquo;s great exercise and it&amp;rsquo;s nice to spend the time with him, but it&amp;rsquo;s taking a good 40 minutes plus out of my work day, which is difficult given I&amp;rsquo;m trying to get the new AgileVentures charity enterprise off the ground (burning my savings to do so), and also my increasing commitments to the under eights football team, which has had an explosion of players this season.  Anyhow, so I bought an iPhone SE directly from Apple because I&amp;rsquo;m not interested in a larger phone.  What I should have done was do the immediate sync of data, but as I do recently when I upgrade laptops, I was tempted not to in order to switch items over one at a time.  Have a clear out so to speak.&lt;/p&gt;

&lt;p&gt;That approach has worked very well for me on laptops.  Going through the re-install process for all the software and projects is a sharp reminder of the install process for people trying to onboard onto our AgileVentures open source projects.  However it turned out to be a bad choice for a quick move to the new phone, or at least, a bad choice when I was trying to quickly decommission the old phone so that my son could use it, take it with him on the commute to school and calm my &amp;ldquo;he&amp;rsquo;ll be knocked off his bike and not be able to phone for help!&amp;rdquo; paranoia sufficiently so I can reclaim the missing 40 minutes of my day that I need to get back on top of the current work avalanche.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s rather frustrating is the time I invested in the independent move of data - re-entering all my email data, migrating whatsapp messages through iCloud etc., but the real sticking point was the 1Password app.  I got that on iPhone a couple of years ago. It works really well; allows me to manage complex passwords for things that really should be secure like Stripe on the phone.  However since I got 1password on my iPhone they&amp;rsquo;ve pivoted their approach so that now there are family and business accounts; new approaches to sharing.  I&amp;rsquo;ve also been using LastPass, but they charge for their mobile support, so I was finding myself in a sticky situation.  I&amp;rsquo;d burned a lot of time with a gradual transfer that kind of relied on me having my old phone around as backup.  However I needed to give up the old phone to my son, and although he&amp;rsquo;s pretty responsible, there&amp;rsquo;s a chance he might lose it, and so I really need to wipe all the old data off that phone before giving it to him.&lt;/p&gt;

&lt;p&gt;Lots of time was burnt on that last night that I would have preferred to spend on practising the guitar or working on next Saturday&amp;rsquo;s football training session for the under-eights.  It&amp;rsquo;s all quite stressful, not least because of the memories it brings up of my own high-school days, and this transition involving my eldest son taking/getting more and more independence! :-)  Judgement call on judgement call!  I went for doing the sync after all, throwing out the time I had spent on the step by step, and despite knowing that maybe there would be problems with doing the sync itself.  My old phone was still on iOS7 (I&amp;rsquo;d got conservative. As an iOS dev I knew you couldn&amp;rsquo;t downgrade once you upgrade), the new one is on iOS10, but thank goodness it worked out.  All the old apps including 1Password now work on the new phone; although I didn&amp;rsquo;t really have the heart to do a full test of all the Japanese banking apps yet &amp;hellip;  &lt;/p&gt;

&lt;p&gt;And the other thing is this new &amp;ldquo;Find Friends&amp;rdquo; app - I upgraded what is now my son&amp;rsquo;s phone to iOS10 and it seems I can now track where he is.  So he cycled to high school by himself for the first time this morning and I was able to follow his progress.  He texted me to say he had got to school, and I could see he was there.  Big brother or what!  This really does feel like science fiction, although clearly it&amp;rsquo;s been totally possible for the last 10 years or so; that it was such a relatively simple set up on iOS10 gives me pause for thought.&lt;/p&gt;

&lt;p&gt;Okay, so now I&amp;rsquo;m poised to reclaim that 40 minutes, and get on top of the meaty topics of the week.  Yesterday Michael and I added some tests to, and merged in, a PR on ProjectScope that allows us to update all the metrics using a rake task.  I popped that in a Heroku scheduler so that they&amp;rsquo;ll be daily updates of project metrics.  Clearly key for the Berkeley teaching assistants who are each going to be trying to monitor 8 or so different project teams this semester.  With some misgivings I started using Waffle to organise our workflow, but I think we identified the critical path.  The key thing was a new instance for the Berkeley TAs to use.  The client (Armando) wanted every end point secure, which we&amp;rsquo;ll try to get on today, but I wanted to check that deploy process and the scheduler first - that&amp;rsquo;s critical (Make one change at a time).  We&amp;rsquo;re finding the encrypted application.yml file a bit of a handful - probably more on that tomorrow, but the big thing was that we saw that we now couldn&amp;rsquo;t have a free-tier Heroku instance in our AgileVentures team on Heroku, and more catastrophically they&amp;rsquo;d upgraded our legacy apps to paying tiers.&lt;/p&gt;

&lt;p&gt;Careful review showed that a cluster of apps that were all redundant had each been accumulating charges of $7 a month for the last three months or so.  Not good for a struggling charity startup.  Michael started shutting down the apps, and I contacted Heroku customer support to ask for a refund.  We&amp;rsquo;ll see how that goes &amp;hellip; frustrating stuff.  I totally understand Heroku changing their plan there.  We were using the team feature of Heroku for free for a long while since we took it up as an early beta.   I&amp;rsquo;m &amp;ldquo;happy&amp;rdquo; to pay for our key apps to run on the team, but this all feels like a stab out of the blue.  Did I miss an email alerting me about this?  Have I not been keeping my eye on the ball?  Investigation required, but it seems like the key is keep focusing on doing things that will free up time like ensuring the transition of old phone to son; printing and laminating a FAQ for the under eights football team so I can hand them out to parents to avoid spending time trying to explain things to them while running a practise session; and ruthlessly eliminating, simplifying, automating or delegating anything and everything I spend my time doing during the working day.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>People Are Strange, I Mean Me</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/12/people-are-strange-i-mean-me/"/>
    <id>http://blog.url.com/2016/09/12/people-are-strange-i-mean-me/</id>
    <published>2016-09-12T01:00:00+01:00</published>
    <updated>2016-09-12T21:35:30+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Okay, so I feel like a bit of a social klutz.  Often there are ideas that seem really important and well-formed in my head, and then I say them and it comes out as a mess.  Also, I think I&amp;rsquo;m not so good about reading the mood-music of the social group around me.  I mean, I get by &amp;hellip;  One to one conversations I think I don&amp;rsquo;t do too badly at.  Case in point regarding bigger groups, this Sunday I was at a football match for my 11 year old.  I know the coach and assistant coach well, and before I started coaching the team for the seven year olds (which my younger twins are in), I was sort of an assistant-assistant coach.  I would referee the matches, help out.  I&amp;rsquo;ve been quite involved.  The coach asked me to video the match on the Sunday, which I did.  So there was the half time team talk and the post-match team talk.  At the end of the half-time team talk I asked to add something about strategy.  What was so clear in my head didn&amp;rsquo;t come out so clearly.  No big deal, but then in the final team talk after the coach had finished reviewing the match with the boys, he asked if the assistant coach or I had anything to say.  The assistant coach made a few points, and I was preparing a simple point in my mind, however when the assistant coach finished the coach said something to the effect of &amp;ldquo;Right, great work everyone, round of applause for the boys&amp;rdquo;, basically a finish up thing.&lt;/p&gt;

&lt;p&gt;What I should have done looking back at it was think like &amp;ldquo;it&amp;rsquo;s hot, people want to get on, the coach is wrapping up and my point&amp;rsquo;s not that important, and just left it&amp;rdquo;, but like so often I don&amp;rsquo;t seem to be able to let these things go.  So I kind of talked over the end of the applause to make a point about communication amongst the team; which is of course doubly ironic, because while I was making the point about the need for effective communication amongst the team players, I was failing to read the communicative situation I was in, where I think it would be much better to have gone with the flow, i.e. to just say nothing.  I felt stupid after, but of course that&amp;rsquo;s no big deal.  I&amp;rsquo;m probably the only one who will remember, and the worst that will be is that a few parents/coaches/players might be affected subtly in a negative direction towards me, although I think I&amp;rsquo;ve been making these communication mistakes all my life, so it&amp;rsquo;s probably more a case of &amp;ldquo;That&amp;rsquo;s just Sam&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;rsquo;m being too hard on myself, but I do feel a big turnaround in my thoughts recently.  I always thought it was of paramount importance to speak the truth and communicate your thoughts, and that was what made me a good communicator.  What I&amp;rsquo;ve realised recently is that often what we think is the &amp;ldquo;truth&amp;rdquo; at one moment is really just a &amp;ldquo;perspective&amp;rdquo; and quite often the value gained from communicating it can be undone by a poor choice of timing.  I&amp;rsquo;m starting to see how important it is to be reading the mood of the others and adjusting one&amp;rsquo;s verbal output as a function of that.  I&amp;rsquo;ve blogged before about the concepts of &amp;ldquo;overloading&amp;rdquo; and &amp;ldquo;blocking&amp;rdquo;.  Overloading is what I commonly do when I give people too much information and under-estimate their level of discomfort.  Blocking is something else that I can easily slip into when someone says something that doesn&amp;rsquo;t match my mental model of reality.  Rather than focusing on connecting with what the other person is feeling, or what they are trying to communicate, I go into academic debate mode trying to compare their statements logically with my model of reality.&lt;/p&gt;

&lt;p&gt;Of course, it all depends.  I guess I need to add &amp;ldquo;timing&amp;rdquo; to the list of &amp;ldquo;blocking&amp;rdquo; and &amp;ldquo;overloading&amp;rdquo;.  Sometimes a block might be appropriate - it&amp;rsquo;s all about relative costs, and how certain you feel about things at the time; but to summarise, I think I tend to block people at the wrong times, I tend to overload them at the wrong times, and hey, I&amp;rsquo;m working on it. :-) This being human thing didn&amp;rsquo;t come with a manual.  I was mercilessly bullied in school and cocooned myself in television programs and computer games from age 13 to 17.  I&amp;rsquo;m still working through that.  It&amp;rsquo;s no excuse for being a irritating person, but I&amp;rsquo;m working on trying to make myself a more pleasant person to interact with. &lt;/p&gt;

&lt;p&gt;The funny thing is that I then also baulk at saying some things that I think are really important because I&amp;rsquo;m worried about upsetting someone, or that they&amp;rsquo;ll respond angrily.   The ironic thing is that I think I often upset people saying things that I hadn&amp;rsquo;t particularly thought through, or that it just hadn&amp;rsquo;t occurred to me would be controversial.  Conversely, when I think something might be inflammatory I beat around the bush, have trouble getting to it, and go into waffle mode.  That&amp;rsquo;s something else I&amp;rsquo;m working on.  I am finding the Non-Violent Communication (NVC) model quite helpful in that regard, which goes something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell the person an observation e.g. &amp;ldquo;I notice you seem to be raising your voice&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tell the person your feeling e.g. &amp;ldquo;That makes me feel scared&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tell them your need e.g. &amp;ldquo;I need to feel safe in my work environment&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Make a request e.g. &amp;ldquo;I was hoping the you might be able to talk to me a little more quietly&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Continue the conversation from there, perhaps coming to a compromise, and listening out for needs and feelings that the other person is expressing, reflecting that back to them where appropriate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whether it&amp;rsquo;s genetic or the way I grew up, but it seems I&amp;rsquo;m not sensitive enough to social cues from others, and too sensitive to internal fears, maybe?  It&amp;rsquo;s a complicated tuning process.  If I do actually manage to turn up my social sensitivity too much I would probably revert to the state of my 16 year old self, where I was a total wall-flower and would never speak in front of a group.  Famously, the prize winning physicist Richard Feynman published a book called &amp;ldquo;What Do You Care What Other People Think?&amp;rdquo;, which I read when I was 17.  At 17 I seemed to lose all inhibitions and became somewhat of an exhibitionist, being totally happy to speak in front of groups, the bigger the better.  I got involved in amateur dramatics and was happily oblivious to the many people who probably thought I was a total idiot.  What do I care what other people think?  Well ultimately I don&amp;rsquo;t, really, but I don&amp;rsquo;t want to irritate them unnecessarily.  I&amp;rsquo;d also like to collaborate with them on cool projects, and I&amp;rsquo;d really prefer not to upset them.&lt;/p&gt;

&lt;p&gt;While there&amp;rsquo;s plenty for me to improve, I don&amp;rsquo;t think it&amp;rsquo;s entirely about me.  The other thing I notice is that most people seem pretty reluctant to share how they feel.  Maybe perfectly sensibly people will not say &amp;ldquo;you&amp;rsquo;re irritating me&amp;rdquo; or &amp;ldquo;stop that&amp;rdquo;.  They&amp;rsquo;ll just let you carry on and then avoid you in the future.  This is not to criticise others, per se.  I mean it&amp;rsquo;s not that everyone has a responsibility to be able to pinpoint why they are irritated with something you&amp;rsquo;ve done and provide feedback in a format you can digest; particularly if you&amp;rsquo;re someone who will react by contesting their point.  People are trying to live their lives, fight their own battles, improve themselves.  Everyone&amp;rsquo;s on their own journey, and while we always have great insight into our own pain and struggle, we really don&amp;rsquo;t know what it&amp;rsquo;s like for others.  Why should they make any exceptions for our poor behaviour?&lt;/p&gt;

&lt;p&gt;Anyhow, I can&amp;rsquo;t control other people&amp;rsquo;s reactions to me.  I have trouble enough controlling my own behaviour, or at least trouble breaking the habits of a lifetime.  So the real responsibility has to lie with me to get my sensitivity to social cues set correctly.  Of course the other problem I have is with putting too much pressure on myself to get things right.  Trying too hard to adjust myself may well be counter-productive. :-) Anyway, let&amp;rsquo;s wrap this self-diagnosis up with a little more on what I was planning to write about, which is the strangeness of people.  I think it&amp;rsquo;s this thing where people tend to not say what they are thinking and just not show up. I can illustrate with a story from when I was 13 and had just started high school.  I and some others were learning the trumpet.  The vivacious music teacher was very keen for us to be in the school orchestra.  &lt;/p&gt;

&lt;p&gt;I think that we had no interest in being in the school orchestra.  It meant additional practise and playing in a big group. That wasn&amp;rsquo;t our idea of fun.  I remember getting grief from the music teacher because I told her straight that I didn&amp;rsquo;t want to be in the orchestra.  My &amp;ldquo;friends&amp;rdquo; at the time didn&amp;rsquo;t confront the music teacher. They just didn&amp;rsquo;t show up for orchestra practise.  I always remember that I thought that was back to front.  I was being honest and straightforward, while others were just ducking out and got a much easier ride as a result. However maybe they were smarter than me; sensibly avoiding confrontation.  I see this all over the place; people preferring to just not show up, or not do, with no explanation, rather than providing an honest assertion that they don&amp;rsquo;t want to do something, or that they can&amp;rsquo;t make it.  Maybe this is just some part of the missing &amp;ldquo;how to be human manual&amp;rdquo; that my peers were discovering by interacting with each other between the ages of 13 and 17 when I was wrapped up in 8 bit computer games, game shows, sitcoms and TV dramas.  Who knows? :-) It&amp;rsquo;s complicated, this life stuff.  I do like the NVC framework though - I really think that has helped me address some tough issues when I&amp;rsquo;ve realised that something is highly contentious; or at least I&amp;rsquo;m nervous about saying it.  I&amp;rsquo;ll just keep working on my framework for being an effective social human being.  Three things in the list now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Blocking&lt;/li&gt;
&lt;li&gt;Overloading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll keep tinkering with it till I get something that works. :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Patience</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/09/patience/"/>
    <id>http://blog.url.com/2016/09/09/patience/</id>
    <published>2016-09-09T01:00:00+01:00</published>
    <updated>2016-09-09T21:52:34+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Following on from yesterday&amp;rsquo;s &lt;a href="http://nonprofits.agileventures.org/2016/09/08/where-to-change/"&gt;post&lt;/a&gt; on working with the node stack in AgileBot, Michael had overnight addressed two of my concerns.  He&amp;rsquo;d upgraded from jasmine-node to jasmine-npm, which was allowing our tests to fail in the correct way, i.e. not with catastrophic failures involving no output whatsoever; and he&amp;rsquo;d got the source maps working so that the stack traces were giving us the correct line numbers in the CoffeeScript source files, which involved creating the following line in spec/helpers/helper.js:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coffee-script/register'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also required adding this jasmine.json file in spec/support:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"spec_dir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"spec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"spec_files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"**/*[sS]pec.coffee"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"helpers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"helpers/**/*.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"stopSpecOnExpectationFailure"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So two of my four concerns from the &lt;a href="http://nonprofits.agileventures.org/2016/09/08/where-to-change/"&gt;previous blog post&lt;/a&gt; were addressed.  Great work Michael!  After Michael took me through all the changes, we could have easily dived into further refactoring, but I tried to step back and take some notes on our options.  Here&amp;rsquo;s what I wrote down at the time:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* refactoring the test harness
  - split into separate files
  - pull output logic from mock into test to hard code ??
  - could look at test coverage to discover untested paths OR work them out
  - sepia for recording and playback

VCR --&amp;gt; Sepia --&amp;gt; Yakbak https://github.com/flickr/yakbak
Web mock --&amp;gt; Nock

Sinon vs TestDouble
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A little googling showed there was a more recent (than Sepia) node VCR-like node module called yakbak, but since we had nock working I said let&amp;rsquo;s leave that.  Michael also mentioned harmonising the production and staging environments, since at the moment the staging server was hacked to post Slack alerts to a different channel, in order to run manual end-to-end without spamming the community. So simply merging the work we were doing would break the production instance.  All this work on creating a testing harness had been motivated by our desire to push the hard coded channel mappings into some sort of config package, i.e. to be able to do that refactoring in safety.  So in a fit of &amp;ldquo;what is this all for&amp;rdquo; I just started googling different node config approaches (after noting that process.env.NODE&lt;em&gt;ENV allowed us to get something similar to RACK&lt;/em&gt;ENV in terms of specifying &amp;lsquo;prodcution&amp;rsquo;, &amp;#39;development&amp;rsquo; or &amp;#39;test&amp;rsquo;).  I found a few config options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dotenv&lt;/li&gt;
&lt;li&gt;nconf&lt;/li&gt;
&lt;li&gt;node-config&lt;/li&gt;
&lt;li&gt;roll our own&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;node-config looked slightly more active so we slapped that in, but I was half way through setting it up and baulked at converting our existing CoffeeScript into JSON.  We threw it out and hand-rolled the following:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CHANNELS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GITTER_ROOMS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./../config/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LIVE_ENV&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'.coffee'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used our own LIVE_ENV var because actually what we wanted was a switch to move from one endpoint to another, and with this switch we now load &lt;code&gt;config/production.coffee&lt;/code&gt; vs &lt;code&gt;config/staging.coffee&lt;/code&gt; depending on whether we want to hit the main slack instance or not.  We got this working in fairly short order, and so we were tempted to try and knock off a couple of quick refactorings.  Splitting the tests over two files, and pulling a little hard coded logic out of the mock and into the tests themselves.&lt;/p&gt;

&lt;p&gt;Here we hit another wall.   Just splitting the tests over two files introduced a very strange problem:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tansaku@Samuels-MBP:~/Documents/GitHub/AgileVentures/agile-bot (27_refactor_test_harness)]$ 
→ npm test

&amp;gt; agile-bot@1.0.0 test /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot
&amp;gt; jasmine ENABLE_ROLLBAR=false GITTER_API_TOKEN=101010

Started
......._http_client.js:55
    throw new Error('Protocol "' + protocol + '" not supported. ' +
    ^

Error: Protocol "http:" not supported. Expected "https:"
  at new ClientRequest (_http_client.js:55:11)
  at RequestOverrider.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:251:24)
  at OverriddenClientRequest.RequestOverrider.req.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:159:7)
  at Request.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:1397:14)
  at end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:554:16)
  at Immediate.&amp;lt;anonymous&amp;gt; (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:581:7)
  at runCallback (timers.js:574:20)
  at tryOnImmediate (timers.js:554:5)
  at processImmediate [as _immediateCallback] (timers.js:533:5)

npm ERR! Test failed.  See above for more details.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running all the tests in a single file did not lead to this issue.  Googling the error provided little help, and we were hunting for the source of the issue by commenting out different sections of the code; back to C debugging style.  Again it&amp;rsquo;s entirely possible that our model of the system was just not sufficiently evolved to make sense of this.  None of our mocks or requests had any &amp;ldquo;http&amp;rdquo; requests, it was all &amp;ldquo;https&amp;rdquo;, so the error above didn&amp;rsquo;t make much sense, and the stack trace didn&amp;rsquo;t relate to any of our code.  I was suspecting it was a timing issue, and throwing up my hands in frustration, I was like, let&amp;rsquo;s just get this out with the tests in a single file.  I want to get some noticeable improvement into production.  We had at least got the variable config working.&lt;/p&gt;

&lt;p&gt;Michael and I decided to split.  He was keen to hunt this bug down, I was anxious to deploy something.  We talked about the tension between wanting to learn a new stack and wanting to deliver features to clients.  We did a &amp;ldquo;side by side&amp;rdquo; session for a while, where Michael hunted on that bug, and I tried to deploy where we were up to staging.  I think we just ended up distracting each other. I got caught in another silly bug where I failed to read the stack trace properly:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tansaku@Samuels-MBP:~/Documents/GitHub/AgileVentures/agile-bot (staging)]$ 
→ npm test

&amp;gt; agile-bot@1.0.0 test /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot
&amp;gt; jasmine ENABLE_ROLLBAR=false GITTER_API_TOKEN=101010

Started
.......undefined:1
undefined
^

SyntaxError: Unexpected token u in JSON at position 0
  at Object.parse (native)
  at Request._callback (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/scripts/av-hangouts-notifications.coffee:33:22)
  at self.callback (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:187:22)
  at emitOne (events.js:96:13)
  at Request.emit (events.js:188:7)
  at Request.onRequestError (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:813:8)
  at emitOne (events.js:96:13)
  at OverriddenClientRequest.emit (events.js:188:7)
  at /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:206:11
  at _combinedTickCallback (internal/process/next_tick.js:67:7)
  at process._tickCallback (internal/process/next_tick.js:98:9)

npm ERR! Test failed.  See above for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was trying to follow up by making all the channel IDs in the staging config point to testing channels and changing one of them generated the above error.  In my frustration I totally missed the fact that this JSON error was not related to the config file per se.  Remember that we rolled our own config and we were pulling in coffee files, not JSON.  I spun my wheels for 20 minutes thinking I had some bad character in the config file, before realising that the tests were hard coded to the particular Gitter channel ID I was trying to change in config.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;d calmly read the stack trace I&amp;rsquo;d have seen the failure was actually at a different point in our code i.e. &lt;code&gt;av-hangouts-notifications.coffee:33&lt;/code&gt; which is the last line in the following:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;send_gitter_message_avoid_repeats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt; &lt;span class="s"&gt;"https://api.gitter.im/v1/rooms/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;GITTER_ROOMS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'saasbook/AV102'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/chatMessages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;bearer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GITTER_API_TOKEN&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think what was happening was that changing the config meant that our test was stubbing the wrong end point and so our test was really trying to hit Gitter and getting back some data it couldn&amp;rsquo;t parse.  Looking at the line in question we can see it is about parsing JSON so the unexpected token makes some sense.  Easy mistake, but my frustration at an unfamiliar stack and my worries about delivering visible changes to the community were not helping me make progress.  I&amp;rsquo;d got used to ignoring the stack traces earlier since they had not been something we could follow.  A great back to basics lesson for me.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also an important question about how we&amp;rsquo;re working.  Would Michael and I have made faster progress if we&amp;rsquo;d engaged on both problems together and one of us had given ground about which to work on first?  Over night Michael&amp;rsquo;s made progress on the multi-file issue and also on getting more sophisticated debugging to work which sounds like a wonderful step forward.  Michael has more coding time available to him.  I have lots of administrative and family commitments.  We need to keep working on the best approach to making progress.  I feel we have a good dialogue about our work modes.  Let&amp;rsquo;s see how we can improve next week.  I&amp;rsquo;m definitely inspired my Michael&amp;rsquo;s tenacity to want to get to the point where we can work efficiently in the node tech stack.  We&amp;rsquo;ve made a lot of progress.  Although even with a small legacy app I feel like we are balancing on a lot of brittleness.  Could we write something cleaner in the latest version of express?  Will I break down and create something in Sinatra?&lt;/p&gt;

&lt;p&gt;Oh and I forgot to mention, the agile-bot on staging was thrashing, dumping huge data dumps from slack onto the log.  I had to shut it down.  We&amp;rsquo;ve upgraded the whole stack of the agile-bot without checking that this set up will work in the deployment environment!  More back to basics &amp;hellip; I suspect I will need all my patience :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Where to Change?</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/08/where-to-change/"/>
    <id>http://blog.url.com/2016/09/08/where-to-change/</id>
    <published>2016-09-08T01:00:00+01:00</published>
    <updated>2016-09-08T21:23:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Trying to improve the test harness on the agile-bot yesterday was rather frustrating.  AgileBot is written in CoffeeScript and runs in the Hubot framework, which runs in Node.  It was originally spiked with no tests as a way of providing a service that would send notifications to Slack about hangouts for scrums and pairing sessions.  We made one adjustment to the spike a few months back to have it handle incoming information about the project that the hangout was associated with, so that certain projects could be re-directed to different messaging systems; the critical one being pushing MOOC pairing sessions to the MOOC Gitter chat.&lt;/p&gt;

&lt;p&gt;So we got away with making that change, but we&amp;rsquo;d like to make other improvements, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allowing the user to start the hangout from slack&lt;/li&gt;
&lt;li&gt;Make it so that hangouts related to projects are reliably posted to those project rooms&lt;/li&gt;
&lt;li&gt;Improve the formatting on the messages particularly hyperlinks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So following the example of the HangoutConnection app which used Jasmine tests, a few months back we added jasmine-node tests, and we now have some integration tests.  They are however somewhat brittle.  The other week Michael and I spent an hour or two trying to work out why the tests ran on his machine and not mine.  We were both on OSX, me on a slightly newer version.  It was interesting to investigate all the dependency management (nvm, node, npm etc.).  We spent some time getting on the same version of npm, node, and sorting all the other dependencies. Still my tests would just not run, no error message, nothing.  Somewhat frustratingly it all ultimately seemed to just start working when I used the auto-reformat feature on RubyMine that re-indents things.  CoffeeScript is sensitive to indenting, so perhaps there was some stray tab character, or mis-indented component that caused my machine to hiccough, but not Michael&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Maybe it is just because of my experience in Ruby, and relative lack of it in Node, but this seems to be a consistent experience for me in Node.  It reminds me of PHP in the early days.  Things would not work, and then suddenly they would just start working for reasons that were not completely clear.  Perhaps it&amp;rsquo;s rose-tinted glasses, but I don&amp;rsquo;t think I ever experienced that in Ruby unless I was going multi-threaded.  I&amp;rsquo;m totally open to the idea that the problem is that I haven&amp;rsquo;t conceptually mastered some aspect of Node.  I&amp;rsquo;m very comfortable with JavaScript on the client side, and I feel pretty confident with it there.  CoffeeScript and Node are two steps away from my comfort zone.&lt;/p&gt;

&lt;p&gt;Michael and I came back to the test harness yesterday and I spent a little time trying to understand the tests that Michael had written in my absence.  I started doing a little refactoring because there was a method called mockSoAndSo and it was both mocking a network connection and then executing the actual network request.  We&amp;rsquo;d got set up with hand-rolled mocks as we had in the HangoutConnection tests.  In order to avoid a complete Hubot acceptance test we were passing in a Hubot &amp;ldquo;mock&amp;rdquo; that our CoffeeScript file would process an generate a routing table that connected URL paths with functions.  &lt;/p&gt;

&lt;p&gt;Then to test we would run the function associated with a URL path, stubbing out the network calls to the 3rd party APIs of Slack and Gitter using the nock library.  In my mind it is the node equivalent of WebMock.  We had previously tried to get more realistic tests of the full network stack (for the slack/gitter calls) by using &lt;a href="https://github.com/linkedin/sepia"&gt;Sepia&lt;/a&gt; which seems to be the Node equivalent of VCR.  We got some recording and playback working, but it didn&amp;rsquo;t seem to have the VCR functions that we expected, which was failing when unexpected network connections were made, so we went with nock, which involves more work in terms of precisely specifying what you expect, but does complain when something unexpected happens.  The caveat there seems to be it will ignore extra key/value pairs in a post body, but if the key/values that are in the specified set then we&amp;rsquo;ll get an error.&lt;/p&gt;

&lt;p&gt;The process of putting all this in place originally had been a somewhat laborious one.  It felt a bit like C programming with segmentation faults, but without the benefit of a stack dump to analyse.  Basically we had to insert console.logs to see how far the program was getting, and then ultimately identifying that the problem was the rollbar automated notification system, which if called in test mode just led to a complete crash.&lt;/p&gt;

&lt;p&gt;Trying to refactor the tests yesterday I got caught out badly changing the wrong function, as there are two different mocks in the same file - one for posting hangouts, and another for posting video links.  That was frustrating.  There&amp;rsquo;s this trade off in all programming between having everything you are working on in the same file, so you can see all the relevant things at once, and that file getting too big, so you have to start jumping back and forth.  One mental note from yesterday, reduce those file sizes. &lt;/p&gt;

&lt;p&gt;Even with that slip out of way, and the tests refactored somewhat to make it clear that the mocking was separated from the network call, with code like this:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;describe&lt;/span&gt; &lt;span class="s"&gt;'hangouts-notify for scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;beforeEach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;slack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mockSlackHangoutNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'C0TLAE1MH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'localsupport'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'localsupport'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I tried breaking the tests to check that they would fail in the right way, the test suite just crashed, no output, no nothing.  Now I&amp;rsquo;m sure this at least partly comes down to my incorrect mental model of how things are working.  In order to handle JavaScript&amp;rsquo;s single threaded nature we have to pass this &lt;code&gt;done&lt;/code&gt; object through to the makeRequest function so that we can set a timeout like so:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;host_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'jon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;host_avatar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'jon.jpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'/hubot/hangouts-notify'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ensures that our request has a chance of hitting the HTTP stack, before we check in the test that nock has received the right kind of HTTP request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;coffee script
    it &amp;#39;should post hangout link to general channel&amp;#39;, (done)-&amp;gt;
      expect(@slack.isDone()).toBe(true, &amp;#39;expected HTTP endpoint was not hit&amp;#39;)
      done()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It took a fair amount of fiddling to get this all working, and it doesn&amp;rsquo;t fill me with confidence that we&amp;rsquo;re on the right track to something maintainable.  The point of having a test suite is so that we can refactor the underlying code with confidence, but if we don&amp;rsquo;t trust the tests &amp;hellip;?  So what should we do differently?  Michael says that jasmine-node is kind of old, and that he thought we&amp;rsquo;d identified a better alternative.  The &lt;a href="https://github.com/mhevery/jasmine-node"&gt;JasmineNode repo&lt;/a&gt; hasn&amp;rsquo;t been updated in a couple of years.  The &lt;a href="https://devchat.tv/js-jabber/226-jsj-test-doubles-with-justin-searls"&gt;JavaScript Jabber podcast&lt;/a&gt; that I listened to this morning was talking about a new &lt;a href="https://github.com/testdouble/testdouble.js"&gt;test double framework for JavaScript&lt;/a&gt; as an alternative to &lt;a href="https://github.com/sinonjs/sinon"&gt;Sinon&lt;/a&gt; and they were talking about a lot of the same issues that Michael and I were running into.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m tempted to want to change more.  I&amp;rsquo;m frustrated that the stack-traces we do get can&amp;rsquo;t be used to pinpoint the lines that things are going wrong on, because we are being given the line numbers for the Javascript that the CoffeeScript is being compiled into.  We tried getting CoffeeScript source maps set up and failed.  Maybe that would work with a little more effort, but one of the most frustrating things for me is that the logical functionality of the agile-bot is so simple, I feel like I could re-create it in a couple of hours in Ruby/Sinatra, without all the unknowns.&lt;/p&gt;

&lt;p&gt;It could even be pulled directly into the WebsiteOne codebase where we already reach out to the slack API to send email invites.  Of course that would be increasing the mass of code in our Rails monolith, and there&amp;rsquo;s an argument for maintaining our limited micro services architecture with a separate service for this logic.  There&amp;rsquo;s also perhaps an argument for having it in another language than Ruby in order to make our microservices architecture interesting and appealing to different OS developers.  The system was designed in Hubot initially as an experiment with the idea that we might be using other interesting functionality from Hubot.  That hasn&amp;rsquo;t happened, and although the different tech stack of the agile-bot has been an interesting diversion, it&amp;rsquo;s frustrating that I just want to be able to make some simple tweaks to our notification system to improve the day to day experience of AV users, and instead I&amp;rsquo;m tinkering around with JavaScript testing.&lt;/p&gt;

&lt;p&gt;A quick googling gives me the &lt;a href="https://github.com/jasmine/jasmine-npm"&gt;updated Jasmine version for node&lt;/a&gt;, and so the route of just changing one thing at a time would be to upgrade the tests to this.  I guess I have to consider that the underlying AgileBot code works, and has worked reliably for some time, and that&amp;rsquo;s got to count for something.  Further steps would be trying out Mocha/Chai - for which &lt;a href="https://www.codementor.io/javascript/tutorial/javascript-testing-framework-comparison-jasmine-vs-mocha"&gt;I found a good overview of the differences&lt;/a&gt;.  Another step would be to move away from CoffeeScript to JavaScript, or even to remove the Hubot framework and build the thing in pure node/express.  And the biggest step would be to another stack, which could be back to familiar Ruby territory or even off to new horizons like Elixir or Go.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m pairing with Michael it probably makes most sense to start with that single step to JasmineNPM.  Although if I have a spare couple of hours it might not hurt to see if I really can spike an alternate Ruby/Sinatra micro service as fast as I think I can :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Eliminate, Automate, Delegate</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/06/eliminate-automate-delegate/"/>
    <id>http://blog.url.com/2016/09/06/eliminate-automate-delegate/</id>
    <published>2016-09-06T01:00:00+01:00</published>
    <updated>2016-09-08T21:20:37+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ruby Rogues is a stream of interesting ideas.  One I heard recently was a mention of the importance of &amp;ldquo;Eliminate, Automate, Delegate&amp;rdquo;.  Everything you&amp;rsquo;re doing, check does it need to be done? Could it be done automatically, or could I get someone else to do it?  The idea is to not waste time on things that could be done more efficiently, and spend as much time on those things that only you can do, which presumably is the stuff that you&amp;rsquo;re really good at, is enjoyable, delivers value etc.  I&amp;rsquo;m not sure who first came up with this idea, but there are a few blogs with variations on the theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://roryvaden.com/blog/eliminate-automate-and-delegate/"&gt;Rory Vaden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theviewinside.me/eliminate-simplify-automate-delegate-the-four-steps-to-freedom/"&gt;Marc Winn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a quick google generates a set of related posts on how to interpret or get the best out of this kind of approach.  To add my own spin on this, the dangers of automating are that it can sometimes take longer to automate a task that it takes to get it done, and if that tasks ends up being a one off, or infrequently repeated, then the value of automation drops.  Similarly with delegating, sometimes the process of getting another person, or people, to understand the task that you want done takes longer than doing it yourself, and again if it&amp;rsquo;s a one off that communication overhead can squash the value from the delegation.&lt;/p&gt;

&lt;p&gt;It thus makes eminent sense to eliminate, or indeed simplify, tasks before trying to go the route of automation or delegation.  Then there&amp;rsquo;s the question of which to do first.  I think that partly depends on whether you are a people person or shall we say a &amp;lsquo;computer&amp;rsquo; person :-)  Of course all this presumes that we&amp;rsquo;ve bought into this whole narrative of achieving goals efficiently.  The process of attempting to automate or delegate something that doesn&amp;rsquo;t reap dividends is potentially a great learning experience, and isn&amp;rsquo;t the pinnacle of mindfulness to just appreciate all these experiences for the process they are, rather than worrying about the end result?&lt;/p&gt;

&lt;p&gt;Since we&amp;rsquo;re unlikely to resolve that question convincingly in this blog, let me tell you about an automation process I went through yesterday that I feel quite pleased at having done.  One of my tasks as editor of the &amp;ldquo;Engineering Software as a Service&amp;rdquo; textbook is to manage the incoming requests from instructors around the world for evaluation copies of the textbook.  This is a fairly normal part of the academic-publishing relationship.  Publishing houses generally make free copies of their textbooks available to instructors at established educational institutions as a &amp;ldquo;loss-leader&amp;rdquo;.  The hope of the publishing companies is that instructors will adopt their textbooks on the basis of the evaluation copy, and then students will purchase the textbook.&lt;/p&gt;

&lt;p&gt;Armando Fox and Dave Patterson decided to cut out the middleman and publish their &amp;ldquo;Engineering Software as a Service&amp;rdquo; textbook by self-publishing it through StrawberryCanyon, the enterprise they set up to deliver the textbook far more cheaply and efficiently than through a traditional publishing company.  Standard software engineering textbooks often run to a couple of hundred dollars, while the kindle version of ESaaS is just $10 (and comes with $10 of AWS credit to boot).  Long story short, there is no big publishing house infrastructure behind the ESaaS textbook.  Armando used to do the evaluation copy distribution and delegated that to me as part of my role of editor and community manager.&lt;/p&gt;

&lt;p&gt;So currently we have requests for evaluation copies come in through a google form, which puts requests in a google spreadsheet that I have access to.  The process of distributing an evaluation copy involves the following steps for me:&lt;/p&gt;

&lt;p&gt;1) check that the evaluation request is from a legitimate educational institution
2) generate a watermarked mobi format version of the textbook for that instructor
3) send the appropriate instructor an email with a link to where they can download their copy of the textbook
4) add the instructor to the textbook mailing list&lt;/p&gt;

&lt;p&gt;Now of course I&amp;rsquo;d love to delegate this, but I don&amp;rsquo;t think there is anyone else particularly incentivised to take on the task.  Armando incentivised me with a small percentage of the textbook profits.  It&amp;rsquo;s not much since as I mentioned above the textbook is designed to be affordable, but every little helps.  As Armando has pointed out repeatedly he&amp;rsquo;s not in this for the money, but for trying to revolutionise the education of software engineering, something which also inspires me.  Eliminate the task? well not without giving up on that goal :-) Simplify the task?  Well we could just make the textbook available for free download, but then there&amp;rsquo;d not be any incentive for people to pay the $10 a copy that provides the funds to pay for professional indexing of the textbook, translation into other languages etc.  The sales of the textbook generate very small amounts of profits after Amazon&amp;rsquo;s cut and that&amp;rsquo;s all re-invested in trying to improve the offering.&lt;/p&gt;

&lt;p&gt;Some books seems to operate a free HTML, pay for PDF model that perhaps we should consider, but there&amp;rsquo;s also an aspect of fitting into the existing instructional model.  Instructors expect to get a free textbook that their students then pay for &amp;hellip; although that sounds less convincing as I type it out.  However, part of what instructors are &amp;ldquo;buying&amp;rdquo; into when they select a textbook is that their students purchasing power will be directed back into the improvement of the textbook and so on.&lt;/p&gt;

&lt;p&gt;So, automation.  Steps 2, 3 and 4 seem promising in terms of automation.  I had automated steps 2 and 3 in the past when we used to distribute gift copies via Amazon.  I used RSpec/Capybara/Selenium to automate the process of stepping through the Amazon interface to send out a gift copy of the textbook.  That &lt;a href="https://github.com/saasbook/SPOC/blob/master/spec/send_textbook_spec.rb"&gt;code&lt;/a&gt;, was difficult to maintain as the Amazon web interface shifted, and ultimately had to be discarded when we decided to drop distribution of sample copies through Amazon (since it cost us $3 each time), and switch to generating watermarked copies from the command line.  Getting that to work on my system reliably was quite a struggle in itself.  The mobi generation process is run by Latex, takes a while, and for quite some time seemed to require 2 or 3 runs with me needing to hit return several times.&lt;/p&gt;

&lt;p&gt;More recently I have the mobi generation process stabilised and I had almost sort of automated the process of constructing the command to generate the mobi and move the file to dropbox, using formulas in google spreadsheets.  You could ask, why didn&amp;rsquo;t you just create a script straight off the bat?  Lack of emotional energy?  The fact that the data was already in google spreadsheets.  That the process itself was unstable and prone to change.  However yesterday I got to that threshold of thinking the process had stabilised.  I&amp;rsquo;d been using the spreadsheet formulas fairly regularly to set up the necessary commands to generate the textbooks.  I&amp;rsquo;d been using templates in the Thunderbird mail client to make the process of sending out emails easier, but doing it was still error-prone and time consuming; and I had found I could generate a compose window in Thunderbird from &lt;a href="http://kb.mozillazine.org/Command_line_arguments_(Thunderbird)"&gt;command line options&lt;/a&gt;, so rather than going through the manual process again I wrote the following script in Ruby:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;MAKE_MOBI_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'make mobi WATERMARK="'&lt;/span&gt;
&lt;span class="no"&gt;MOBI_ESCAPE_CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'\\\\\\\\\\\\\\\\'&lt;/span&gt;
&lt;span class="no"&gt;MAKE_MOBI_SUFFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'" ; mv saasbook.mobi ~/Dropbox/Public/saasbook_prof_'&lt;/span&gt;
&lt;span class="no"&gt;MOBI_FILE_EXTENSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'.mobi'&lt;/span&gt;

&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="no"&gt;FIRSTNAME_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_mobis&lt;/span&gt;
  &lt;span class="n"&gt;requestors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"requests.ssv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;col_sep: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;skip_lines: &lt;/span&gt;&lt;span class="s1"&gt;';'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/Users/tansaku/Documents/GitHub/armandofox/saasbook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;requestors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;firstname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;FIRSTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;MAKE_MOBI_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MOBI_ESCAPE_CHARS&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MAKE_MOBI_SUFFIX&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MOBI_FILE_EXTENSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is ugly smelly code, and you should have seen it before I cleaned it up a bit.  I even started writing bits of it in the RSpec files I was using to kick it off before migrating it out into a Ruby file.  Bad practice?  Perhaps, but I wanted to quickly determine if I could get things I wanted working, and I know that checking that the mobi file is generated with the correct watermark is something I&amp;rsquo;m unlikely to be able to automate.  The bottom line is that I need to be able to open that file in Kindle software and see the right things.  Automating that would burn way too much time, for something that I can check manually, not every time perhaps but frequently enough to ensure things are working.&lt;/p&gt;

&lt;p&gt;I can just copy and paste the necessary data from the google spreadsheet into a local file (&amp;ldquo;requests.ssv&amp;rdquo;) and pasting from Google into my sublime editor generates space separated values, so I used an ssv file abbreviation.  So that allowed me to generate a load of personalised evaluation copies of the the textbook in batch; already quite a big saving. There&amp;rsquo;s so much room for refactoring - I could make classes etc., but I didn&amp;rsquo;t want to dive into that, I wanted to see if I could semi-automate the emailing process:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;THUNDERBIRD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/Applications/Thunderbird.app/Contents/MacOS/thunderbird'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_textbook_email&lt;/span&gt;
  &lt;span class="n"&gt;preselectid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'id2'&lt;/span&gt;
  &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Engineering Software as a Service Community Welcome!'&lt;/span&gt;
  &lt;span class="n"&gt;attachment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/Users/tansaku/Documents/Documents/AgileVentures/LocalSupport/WelcomeLetter.docx.pdf'&lt;/span&gt;

  &lt;span class="n"&gt;requestors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"requests.ssv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;col_sep: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;skip_lines: &lt;/span&gt;&lt;span class="s1"&gt;';'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="n"&gt;requestors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Español'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'email_spanish.erb'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'email.erb'&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;DROPBOX_LINK&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/saasbook_prof_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mobi"&lt;/span&gt;
    &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;lastname: &lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;link: &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ERB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%Q{"to='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',preselectid='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;preselectid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',bcc='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;bcc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',subject='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',body='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',attachment='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;'"}&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;THUNDERBIRD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -compose &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
    &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was pretty pleased with the above code, not in stylistic terms, but as a spike, a proof of concept that I could bring up a Thunderbird compose window with the correct text, to the correct person, and from the correct email account, and with an attachment.  Ultimately it all worked.  The process is not quite perfect as I &lt;a href="http://forums.mozillazine.org/viewtopic.php?f=39&amp;amp;t=3022463&amp;amp;e=0"&gt;posted to mozillazine&lt;/a&gt;, since there is an extra newline at the start of the email, and running in batch I have to click &amp;#39;send&amp;rsquo; on the compose window and then ⌘Q to quit the Thunderbird instance, before the next compose window will come up.  This is because there can only be one running Thunderbird instance at a time, so I also have to quit Thunderbird before I run the batch script.&lt;/p&gt;

&lt;p&gt;Still, I can live with those issues - a visual check of the email in the compose window before sending it is actually quite good for quality control.  I can now take a set of requests for evaluation copies of the textbook, run one command to generate the watermarked copies - grab a cuppa (UK slang &amp;ldquo;cup of tea&amp;rdquo;) while that runs, and when it finishes I can run another command that will pop up the emails I need to send and they will have the correct outgoing email address and link for downloading (as well as a couple of other minor variations based on the original request).  I can now check each and do a little dance of:&lt;/p&gt;

&lt;p&gt;a) check email
b) hit send
c) hit ⌘Q once the send has completed
d) repeat&lt;/p&gt;

&lt;p&gt;Whereas it might have previously taken me 10 minutes to get through pasting together the necessary emails for sending out 10 emails, I can now do that in about a minute, with an increase in reliability.  Writing the code took about two hours in total with me testing each of the processes manually, and I could have got yesterdays evaluation copies out in say 20 minutes if I hadn&amp;rsquo;t bothered with the automation.&lt;/p&gt;

&lt;p&gt;Over the course of a few months I should get that time back (assuming we don&amp;rsquo;t massively change the process again), and I had a lot more fun coding than I would have done operating things manually.  I also have some code to share, which can be progressively cleaned up and maybe support other things like getting the instructors on the google mailing list - hmmm captchas &amp;hellip; Anyway, I think the thing to ask yourself is, do you want to be an automaton?  A people person?  A developer?  I&amp;rsquo;m still working on the necessary people skills to delegate and more importantly inspire.  In the meantime I&amp;rsquo;ll choose being a developer over an automaton any day. I enjoy that process much more :-)&lt;/p&gt;
</content>
  </entry>
</feed>
