<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-14T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Banking Disruption</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/14/banking-disruption/"/>
    <id>http://blog.url.com/2016/11/14/banking-disruption/</id>
    <published>2016-11-14T00:00:00+00:00</published>
    <updated>2016-11-14T09:37:10+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My main achievement on Friday was opening a bank account for the AgileVentures charity.  This has been a long time coming.  I originally started with Lloyds bank and spent an hour or so on the phone explaining the whole concept of &amp;ldquo;in context learning on charity IT projects&amp;rdquo; to them, before receiving a lot of self-contradictory paperwork that they didn&amp;rsquo;t respond to my email queries about.  The need for a bank account has become more pressing as we start to have a non-trivial Premium payments coming through Stripe.  It&amp;rsquo;s still a small trickle, but with our new sponsor drie, we&amp;rsquo;re on the road to becoming sustainable early next year if we can sustain our current rate of growth.  That might make it sound like we can just wait for that growth to happen, but every little bit of growth requires a lot of hard graft on my part, as well as lots of generous donations of time and effort from our AV mentors.  I also have to make sure that in the process of bringing in new sponsors and premium members that we keep supporting our existing sponsors and premium members.  Simplify, Eliminate, Delegate, Automate!&lt;/p&gt;

&lt;p&gt;Having given up on making progress with Lloyds, I heard that the new UK bank &amp;ldquo;Metro&amp;rdquo; had a reasonable charity account, and that some other local charities had got set up with them before official UK charity status approval (which we are still waiting for - no updates since July &amp;hellip;), and seeing their neat, open-plan branch in my local town centre, and their modern looking website I thought I&amp;rsquo;d give them a try.  I&amp;rsquo;ve also received advice that the Coop bank and Triodos are good options.  Metro had an email link for charities and I emailed them and got an email bank within a day.  They were responsive by email which was a big plus.  I did notice that I was emailing a specific person at Metro bank rather than a &lt;code&gt;charities@metrobank.co.uk&lt;/code&gt;, but I pressed on.  We needed to provide the charity constitution, signed minutes of a trustees meeting agreeing to open the bank account, various ID for the bank account signatories, and fill out an application form.  &lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/8f0kxo94ckkaz3d/Screenshot%202016-11-14%2009.25.52.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Over the course of several weeks we assembled all the different components and sent them off to my contact at the head office.  We had a good back and forth in email with my contact checking electronic copies of the documents before I mailed in signed versions.  It seemed to be going well.  I got the last package of documents together and sent of, paying extra for a verified delivery.  Then nothing.  No communication.  My emails unanswered.  My contact also had a cellphone number on their email signature.  I texted, I left messages, nothing.  After a few days I started calling the head office and trying to get them to contact me.  It turned out that my contact was on annual leave.  Fair enough, although it would have been nice to be getting annual leave notification messages against the emails I was sending.  I was starting to get frustrated.&lt;/p&gt;

&lt;p&gt;It turns out that another person was trying to contact me via email, but they had my email address mis-spelt from the operators I&amp;rsquo;d been speaking to when I was calling the bank.  Eventually we got that figured out, but I didn&amp;rsquo;t manage to make a connection with this person.  They kept on asking me to send in additional paperwork that I believed I had already sent.  I held off as presumably my original contact would soon be back from annual leave and could sort it out.  It stretched out and it seemed that annual leave had become leaving.  I finally managed to speak to the new contact in real time on the phone and established that we had sent in all the paperwork, but that we would have to go into the bank to confirm our identities.&lt;/p&gt;

&lt;p&gt;My plan to save time by doing this all online had backfired.  I&amp;rsquo;d been trying to prefer email but that had caused delays.  Finally on Friday Rachel and I went into the bank and got our identities confirmed, and started working through the other paperwork.  Ultimately it took over 2 hours, first because the bank was saying the accounts they provided couldn&amp;rsquo;t support the detailed finance policy we&amp;rsquo;d put in the minutes.  I was fuming.  I called up the other trustees and on speaker phone allowed the bank manager to hear their approval for an account without detailed support for the finance policy which we would be implementing ourselves rather than relying on bank restrictions.&lt;/p&gt;

&lt;p&gt;That done the bank manager had to re-type the entire PDF application form that I had filled out and sent in.  I was hoping that a recently setup modern bank would be just the sort to avoid this sort of ridiculousness.  Rachel and I caught up and I supported the AV slack channels in the background as we ground through the process.  We were just about to give up and leave when it was all done.  We got bank cards, and I got the online banking hooked up, and the all important sort code and account number that would allow me to issue new invoices and sort out the AgileVentures finances.&lt;/p&gt;

&lt;p&gt;I still like what MetroBank is trying to do.  I think the UK banking industry is ripe for disruption.  Maybe it being difficult to open an account is in some sense a feature.  Convoluted and unnecessary steps discourage all those but the truly serious.  Maybe one day the decentralised cryptocurrencies will replace all this, but I&amp;rsquo;m not holding my breath &amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Naming and Cucumber</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/11/naming-and-cucumber/"/>
    <id>http://blog.url.com/2016/11/11/naming-and-cucumber/</id>
    <published>2016-11-11T00:00:00+00:00</published>
    <updated>2016-11-14T10:06:08+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In a series of disjointed solo sessions I managed to fix the bug whereby manual hangout edits were making subsequent events live.  Michael and I had wrapped this bug in a cucumber scenario the day previously.  The manual hangout edit interface looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="manual hangout edit interface" src="https://www.dropbox.com/s/4xbad7ddniesyo7/Screenshot%202016-10-18%2017.00.20.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Originally the manual edit had not worked at all on repeating events with lots of history; which had been a big problem when the automatic updates failed for two weeks while the Google Hangout API was in flux.  We&amp;rsquo;d got manual updates working on recurring events by adjusting the way that an event searched for recent hangouts, replacing a sort and filter on &lt;code&gt;created_at&lt;/code&gt; with one on &lt;code&gt;updated_at&lt;/code&gt;.  The problem had been that with a long series of event instances, manual updates were clobbering old ones started by the same user, and so the &lt;code&gt;created_at&lt;/code&gt; date would lag very far behind the &lt;code&gt;updated_at&lt;/code&gt; date.  The recent_hangouts method became:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recent_hangouts&lt;/span&gt;
    &lt;span class="n"&gt;event_instances&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated_at BETWEEN ? AND ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginning_of_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_of_day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;updated_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;d also added a flag on the EventInstance model to indicate whether an EventInstance had been manually set.  This manual setting meant that subsequent Events would also report themselves live, as they were all sharing a single EventInstance.  I considered briefly switching the boolean flag to a datetime, but demurred and adjusted the way we create the unique id for manually edited hangout EventInstances.  I wanted to ensure that every manual edit was recorded as a separate EventInstance instance!  I added a SecureRandom unique id to the EventInstancesHelper method that gets used during a manual update:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'securerandom'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;EventInstancesHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_event_instance_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'00'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uuid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By itself this didn&amp;rsquo;t fix the problem, so I also adjusted the &lt;code&gt;recent_hangouts&lt;/code&gt; method further such that it only looked in a time window starting from the same time on the previous day, plus the duration of the event:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recent_hangouts&lt;/span&gt;
    &lt;span class="n"&gt;event_instances&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated_at BETWEEN ? AND ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_of_day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;updated_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cukes went green and I had to fix up a few specs for the EventInstanceHelper and the Event class.  I was&amp;rsquo;t sure if the fully unique id was actually necessary, but when I saw the specs for EventInstanceHelper that were saying a unique id should be returned, I felt I really wanted to stick with the change.  Arguably it could be the subject of a completely separate pull request, driven by a different cucumber scenario.  I&amp;rsquo;ve been being harsh with the AsyncVoter folks to keep out any functionality not related to the feature being worked on.  It&amp;rsquo;s easy to give myself slack when I&amp;rsquo;m wo on the other side of the barrier; but in my defence this is a bug fix, and I&amp;rsquo;m trying to make sure we aren&amp;rsquo;t losing valuable data about user activity.  I did try to get the feature to wrap this with limited success.  In the process I did do major refactoring of the cukes, which relates to a &lt;a href="https://github.com/AgileVentures/LocalSupport/pull/391"&gt;PR from John on LocalSupport&lt;/a&gt; where he&amp;rsquo;s using a lot of nested steps, which I&amp;rsquo;m not such a big fan of.&lt;/p&gt;

&lt;p&gt;On WSO the editing a hangout url on a repeating event cuke scenario had gotten really long:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL on repeating event and ensure event stays live
    &lt;span class="err"&gt;Given the date is "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="c"&gt;# manually setting the hangout link&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I open the Edit URL controls
    &lt;span class="err"&gt;And I fill in "hangout_url" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click on the Save button
    &lt;span class="c"&gt;# checking that event shows live and that link&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="err"&gt;Then I should see link "Join now" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="c"&gt;# checking that the event stays live for the specified duration (as no pings coming from hangout plugin)&lt;/span&gt;
    &lt;span class="err"&gt;And I jump to one minute before the end of the event at "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="err"&gt;Then I should see link "Join now" with "https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0"&lt;/span&gt;
    &lt;span class="c"&gt;# Check that the event the following day is not automatically taken live&lt;/span&gt;
    &lt;span class="err"&gt;And I jump to one minute before the end of the event at "2014-02-07 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt; &lt;span class="c"&gt;# actually a week later&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"This event is now live!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The previous day with Michael I&amp;rsquo;d inserted comments about what each section was doing.  I resolved to turn those into steps.  The quick and dirty path would be to take each set of steps and turn them into nested steps.  But the approach I prefer is to make new steps that are collections of ruby statements to avoid multiple levels of redirection.  The steps I generated yesterday were:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I manually set a hangout link for event "([^"]*)"$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vi"&gt;@hangout_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://hangouts.google.com/hangouts/_/ytl/HEuWPSol0vcSmwrkLzR4Wy4mkrNxNUxVmqHMmCIjEZ8=?hl=en_US&amp;amp;authuser=0'&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="sx"&gt;%q{$('li[role="edit_hoa_link"] &amp;gt; a').trigger('click')}&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s1"&gt;'hangout_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sx"&gt;%q{input[id="hoa_link_save"]}&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" is not live the following day$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;have_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This event is now live!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which allowed that long convoluted scenario above to be boiled down to the following:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL on repeating event and ensure event stays live
    &lt;span class="err"&gt;Given the date is "2014-02-06 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I manually set a hangout link for event &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt; shows live for that hangout link for the event duration
    &lt;span class="nf"&gt;And&lt;/span&gt; &lt;span class="s"&gt;"Repeat Scrum"&lt;/span&gt; is not live the following day
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe I&amp;rsquo;m crazy, not re-using the steps, but my goal is to make it transparent for me in the future, and other developers, to get from the English description straight to the description at the Ruby/RSpec/Capybara level.  What I find again and again in WSO and LS where the steps are deeply nested is that I get tripped up because the English descriptions can be slightly misleading.  This is actually a facet of a more general problem for coding, in that wherever an abstraction (e.g. cuke step, or method name, or API interface) fails to accurately reflect what&amp;rsquo;s going on under the hood, you can easily be misled.  Of course it all comes back to humans.  What&amp;rsquo;s transparently clear for one person might not be for another.  But take a look at this background step from the same Cuke file:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="err"&gt;And the following event instances exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;dat&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;d created this to replace the original setup step that referred to hangouts (for which there was no corresponding domain model). The original setup step had also scarily used RSpec factories that were shared with the specs and did a fair amount of data massaging in the process.  Having made the change we realised that to keep things working we would also need a chunk of complex participant data.  It was trivial to adjust our new background step to add that data, but now that was hidden from someone working at the level of the feature file so we adjusted our step name as follows:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="err"&gt;And the following event instances (with default participants) exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="err"&gt;of&lt;/span&gt; &lt;span class="err"&gt;dat&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Too much perhaps?  But the intention is to give someone else who wants to use that step (or method) a heads up about what&amp;rsquo;s going on under the hood.  The ruby contents of the cuke steps above are a bit long and need some DRYing out, but I think I&amp;rsquo;d rather have them DRYed out into other ruby methods, that are well named.  There&amp;rsquo;s perhaps almost too much room for nuance with the English descriptions of pure Cucumber steps.  So for example the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;might become&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shows live for that hangout link for the event duration$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vi"&gt;@event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@jump_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minute&lt;/span&gt;
  &lt;span class="n"&gt;check_event_live&lt;/span&gt;
  &lt;span class="no"&gt;Delorean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;time_travel_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;check_event_live&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_event_live&lt;/span&gt;
  &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;event_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Join now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href: &lt;/span&gt;&lt;span class="vi"&gt;@hangout_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps that&amp;rsquo;s no different to:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Then(/^"([^"]*)" shows live for that hangout link for the event duration$/) do |event_name|
  @event = Event.find_by_name(event_name)
  time = Time.parse(@jump_date) + event.duration.minutes - 1.minute
  step 'I check event is live '
  Delorean.time_travel_to(time)
  check_live(event)
end

Then(/^I check event is live$/) do
  visit event_path(@event)
  expect(page).to have_link('Join now', href: @hangout_url)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which allows that nested step to be re-used in other cucumber scenarios, but the debugging support for nested steps is not as good in my experience.  Maybe this is just bike-shedding (i.e. focusing on trivialities).  The big-picture critical thing seems likely to be a constant general refining to a consistent domain model and methods/steps that are not too long and not too short and do a best effort to have a description that doesn&amp;rsquo;t leave too many surprises under the hood.&lt;/p&gt;

&lt;p&gt;I made sure that the refactored cukes did actually break (when the app functionality was removed), which took a combination of adjusting the Event#recent&lt;em&gt;hangouts method back to use `created&lt;/em&gt;at&lt;code&gt;AND removing the secure random id from the EventsInstanceHelper, indicating that both were needed to get the desired behaviour at the user level; so I didn&amp;#39;t need to feel a total hypocrite for pushing on the AsyncVoter folks to remove all extraneous code :-)  That didn&amp;#39;t stop me waking up in the middle of the night thinking, &amp;quot;we don&amp;#39;t even need to search for recent_hangouts!&amp;quot; - we just grab the latest one reverse sorted by updated_at and check if it&amp;#39;s live, can&amp;#39;t we?  That&lt;/code&gt;recent_hangouts` method is used nowhere else in the code base.  The method name makes no sense in terms of what we want really.  What we want to know is whether the most recently updated event instance is still live, isn&amp;rsquo;t it?  More refactoring awaits!&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QMvJADMRpo0"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ntvRINA66UM"&gt;Solo on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xM-QeSOiHqA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Mixing and Matching Guidelines</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/10/mix-and-match/"/>
    <id>http://blog.url.com/2016/11/10/mix-and-match/</id>
    <published>2016-11-10T00:00:00+00:00</published>
    <updated>2016-11-11T10:17:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was another mix of the AsyncVoter and WebSiteOne projects today.  Overnight Arreche had come up with a &lt;a href="https://github.com/AgileVentures/AsyncVoter/compare/master...arreche:7_cast_vote_feature_mvp"&gt;slimmed down version&lt;/a&gt; of Raphael&amp;rsquo;s &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/50"&gt;pull request&lt;/a&gt; on vote casting, so I focused on João&amp;rsquo;s &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/45"&gt;pull request&lt;/a&gt; for listing currently voting stories.   I really wanted to get something merged in as we&amp;rsquo;d had these two pull requests open for five days or so, and I also wanted to practice deploying a new feature onto the drie servers.&lt;/p&gt;

&lt;p&gt;The async_voter slack channel was active and I was conflicted about posting comments in Github and in slack.  João showed up and said he had some time for programming and what should he change.  I suggested he take out the sorting functionality that wasn&amp;rsquo;t covered by the acceptance test and he got right to it.  My original plan was that there might have been some AsyncVoter folks in the &amp;ldquo;Martin Fowler&amp;rdquo; scrum, but they weren&amp;rsquo;t and I ended up helping out some Premiums fix up issues on the LocalSupport and WebSiteOne projects.&lt;/p&gt;

&lt;p&gt;In the meantime João had pushed changes and we had a slimmed down pull request.  I still wasn&amp;rsquo;t entirely sure about the mapping we had set up from &lt;code&gt;GET /stories?state=active&lt;/code&gt; to search for &lt;code&gt;size=0&lt;/code&gt; stories.  João was very keen on the state=active flag and seemed to be mollifying me by saying that &lt;code&gt;GET /stories?size=0&lt;/code&gt; would also work.  I investigated and found that it didn&amp;rsquo;t quite and that &lt;code&gt;GET /stories?state=voting&lt;/code&gt; or indeed any other state would return all the size 0 stories.&lt;/p&gt;

&lt;p&gt;I pointed that out to João not sure if he was in a position to fix it up.  I started adjusting the code locally and made my own &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/57"&gt;pull request&lt;/a&gt;.  In parallel João made further updates.  Perhaps we should have been pairing, but he was commuting.  Maybe I should have just gone to lunch, but I was pleasantly surprised to make some good progress on my own branch.  In particular discovering a &lt;a href="http://jaketrent.com/post/run-single-mocha-test/"&gt;method to specify running a single test in a mocha suite&lt;/a&gt;, where you insert a &lt;code&gt;.only&lt;/code&gt; into the test you want to focus on:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"found one active"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"found one active"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you actually don&amp;rsquo;t have to make any changes to the command line argument.  Making the above change, I can run &lt;code&gt;npm test&lt;/code&gt; and I get precisely the focus I want.  Eat your heart out RSpec and Cucumber where I have to construct commands like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;be cucumber features/hangouts/edit_hangout_url.feature:31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which get derailed when the line numbers change.  So anyhow, on reflection I&amp;rsquo;m glad I did spend some time tinkering with my own PR.  Contrary to previous experiences, node seemed stable and I was able to jump from Cucumber acceptance tests to Mocha Unit tests and make good progress.  The mocking error messages were not as precise as I would have liked, but I think that may be something we can improve.&lt;/p&gt;

&lt;p&gt;Of course I then had the quandary of whether to go with my PR or with João&amp;rsquo;s new one.  He had now filled out the filtering functionality and added checks that only &lt;code&gt;state=active&lt;/code&gt; would return size 0 stories.  I was now in a hangout with Michael who was asking good questions about what all this would do.  I started the server and used POSTman to hit the new endpoints.  The &lt;code&gt;state=active&lt;/code&gt; filtering was working, but not the general filtering.  I think there were key conversion issues or something.  The key point here was the the general filtering functionality wasn&amp;rsquo;t being hit by any tests.&lt;/p&gt;

&lt;p&gt;Different guidelines were as usual wrestling in my head.  My concerns were as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;was locking to size=0 to represent currently voted stories going to bite us when we decided we needed size=0 stories in the future?&lt;/li&gt;
&lt;li&gt;Wasn&amp;rsquo;t it bad to have functionality not covered by tests, and particularly functionality unrelated to the feature the PR was addressing?&lt;/li&gt;
&lt;li&gt;Should we be adjusting the story model to have a state that could be active, to reflect the domain language that João was keen to use?&lt;/li&gt;
&lt;li&gt;Shouldn&amp;rsquo;t we be going with my simplifying assumption that there is only ever a single story to vote on (for the time being)?&lt;/li&gt;
&lt;li&gt;Shouldn&amp;rsquo;t we be sanitising inputs coming over the wire? although this is search rather than edit so &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted to do the right thing for the project, and also not offend João who had been putting in lots of great work.  All credit to him and the others who&amp;rsquo;ve got the Cucumber and Mocha set up all working so smoothly, along with a clean core of app code.  &lt;/p&gt;

&lt;p&gt;I resolved to go with João&amp;rsquo;s PR but I made some tweaks.  I stuck with João&amp;rsquo;s preferred &lt;code&gt;state=active&lt;/code&gt; but pulled out the generic filtering code because it didn&amp;rsquo;t work, and wasn&amp;rsquo;t covered by the tests.  So the core logic in the model class is:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;filterObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'state'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'state'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;filterObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'size'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Story'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filterObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My two biggest concerns remaining were that now the &lt;code&gt;findBy&lt;/code&gt; method was named incorrectly and that we had quite a lot of mockup setup replication in the mocha test suite for the story model.  I created refactoring tickets for these two and got the PR merged in.  From a day&amp;rsquo;s distance I think it was a reasonable compromise.  Let&amp;rsquo;s see how we feel in a week and a month and a year!&lt;/p&gt;

&lt;p&gt;This also allowed me to try pushing a new feature to the drie server.  This failed with a 502 and super fast feedback from the drie team allowed us to identify that as a node versioning issue which we can hopefully fix today.  It also highlighted the need for a staging server as I had broken production in the process.  Although that&amp;rsquo;s no disaster here as we only have a single test deploy that no one&amp;rsquo;s using yet so it&amp;rsquo;s not really &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Michael and I snapped in some progress on WebSiteOne at the end of the session, finally wrapping in a cucumber test the bug we had been hunting the previous day.  Lots of refactoring imperative Cucumber steps to declarative needed there.  It&amp;rsquo;s an interesting perspective; maintaining and evolving a Rails project, while shepherding the creation of a new Node micro service.  Stay tuned for more hair raising tails :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rVfDq6YB9D4"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dfmTQuYbwVU"&gt;WebsiteOne and LocalSupport Triage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W1GPjCwBzNc"&gt;Pairing on AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DlS0zvtKqhU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=My04-8l_INc"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zb29w0BwtEw"&gt;More Pairing on WebSiteOne &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Resilient Code Bases</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/09/resilience/"/>
    <id>http://blog.url.com/2016/11/09/resilience/</id>
    <published>2016-11-09T00:00:00+00:00</published>
    <updated>2016-11-10T10:17:58+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;How to create a resilient code base?  I daily wrestle with the legacy code base of WebsiteOne, wanting to make more changes but being afraid of tests with strange dependencies.  Sometimes they don&amp;rsquo;t test the right thing; while others lock in low level behaviour that doesn&amp;rsquo;t connect to high level features that we need any longer.  As Michael says, the WebSiteOne codebase is better than many.  At least it has tests and was written with good software engineering principles in mind.  However it was a learning project.  A really good question is how to create a resilient code base where the developers are learning as they go?  It&amp;rsquo;s a more general question than you might think since all developers are learning as they go, just that on some projects some of the developers are moving further out of their comfort zone at any given time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been maintaining the AutoGraders codebase for a few years and that&amp;rsquo;s even more scary.  At least with WebsiteOne we have the Rails Model View Controller (MVC) architecture so you know approximately where to find things.  AutoGraders has its own custom architecture that I&amp;rsquo;m not sure I completely understand and I don&amp;rsquo;t know that anyone does after waves of part time TAs have been poured on it.  I don&amp;rsquo;t feel I&amp;rsquo;ve succeeded in being a developer of the AutoGrader; I&amp;rsquo;m really just a maintainer.  I&amp;rsquo;ve been able to trace some of the logic paths through the system and tinker here and there, but re-architecting is a big undertaking.  My first attempt stalled on the complexity of trying to wrap the entire system in consistent acceptance tests.  &lt;/p&gt;

&lt;p&gt;Eric Evan&amp;rsquo;s Domain Driven Design (DDD) and the concept of being able to refactor legacy systems when they have tests serve as inspiration.  I have more hope and motivation for the WebSiteOne project.  Its Rails architecture means that consistent acceptance tests are more realistic; although the frustration of working with JavaScript in acceptance tests is an ongoing drain.  In reality 100% acceptance testing, like 100% test-coverage and 100% TDD are ideals with diminishing returns.  It seems to me that any time you get religious about one of these things you end up sinking in ever increasing amounts of time as you try to get closer to the perfect 100%. &lt;/p&gt;

&lt;p&gt;It makes me think that having a clean and consistent domain model under the hood is the antidote, in some respects at least.  If you accept that having completely reliable acceptance tests on every single one of your important features is an unrealistic goal, then what else can you do?  At least if you&amp;rsquo;re repeatedly evolving the underlying domain model towards something that represents more or less the core of your operations there&amp;rsquo;s a chance you can make up for less than perfect acceptance tests.  Of course one person&amp;rsquo;s coherency is another&amp;rsquo;s confusion &amp;hellip;&lt;/p&gt;

&lt;p&gt;The AsyncVoter project is steaming ahead and I&amp;rsquo;m hoping we can have a consistent model and manageable test suites in order to make it maintainable in the long run.  I&amp;rsquo;m hoping to learn the lessons from WebSiteOne and avoid AsyncVoter&amp;rsquo;s maintenance debt creeping up.  That&amp;rsquo;s also got to be balanced against not pouring cold water on the enthusiasm of the developers.  My battle cry has to be &amp;ldquo;keep that Pull Request small!&amp;rdquo;.  Every time you think of another thing you could add, write a feature or chore and put the backlog.  I was reviewing two AsyncVoter PRs yesterday.  Both a lovely green of Cucumber and Mocha tests; both for specific features that we&amp;rsquo;d voted on.&lt;/p&gt;

&lt;p&gt;Both of them had high level stories that I think should have been tweaked a little, but here&amp;rsquo;s what they were when the developers started working on them:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; List Votes
  As a developer
  In order to cast my vote and see the status of the project
  I want the ability to check what stories are currently being voted on
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Cast Votes
  As a developer
  So that I can indicate my thoughts about a story
  I want to cast my vote on the story and provide some notes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the name of simplicity I would have changed the former to specify only a single current vote, and the latter to not mention anything about notes.  I expect that we&amp;rsquo;ll ultimately need to have support for those two things, but every little extra bloats the pull request, means more code for review, more work for the developers and means it takes longer to get the code merged into master so others can build on it.  Buck stops with me here; I should have got in there and pruned those feature descriptions aggressively before work started on them.&lt;/p&gt;

&lt;p&gt;There might also have been push back from the developers on the scope of the stories.  What&amp;rsquo;s interesting is that others don&amp;rsquo;t seem to be quite so afraid of writing code as I am.  Perhaps I&amp;rsquo;m paranoid, or old, but I deal with so much legacy code, any time I&amp;rsquo;m working on a feature I want to see what is the absolute minimum I can get away with.  Others seem happy to start working on other bits and pieces of functionality, different error paths etc.  This process of working out what to focus on is a key skill.  Not spending too long agonising.  Not going off too far in the weeds.  Of course I conceed that mapping out a few of the key sad paths for a feature is generally a good practice.&lt;/p&gt;

&lt;p&gt;Still there&amp;rsquo;s this ongoing danger in coding of too much anticipation.  The older corollary of our &amp;ldquo;Drive By Coding&amp;rdquo; mantra is &amp;ldquo;You Ain&amp;rsquo;t Gonna Need It&amp;rdquo; (YAGNI).  Right now I&amp;rsquo;m focused on getting a tracer bullet for the simplest possible single voting framework.  At this point every additional element like being able to add notes to votes, track who did the votes, catch errors where the vote or person is not specified, are all things keeping us from getting to that tracer bullet demonstration that data can flow through the system and we can complete a high level story of an asynchronous vote on some remote infrastructure.  &lt;/p&gt;

&lt;p&gt;I was also quite scared of giving this sort of feedback to new developers who I&amp;rsquo;m interacting with online.  I&amp;rsquo;ve read people really wrong in the past in terms of how they will take different sorts of feedback.  Either way, push people too hard on something and you&amp;rsquo;re likely to really irritate them.  There&amp;rsquo;s also a humility required.  I know I&amp;rsquo;ve been really religious about different approaches in the past, and I&amp;rsquo;ve got to be open to the fact that I don&amp;rsquo;t have all the answers.  I&amp;rsquo;ll likely be pushing for variations on my current approach as we go forward.  People want the freedom to use their ingenuity to fix problems.  We had a mob review session and went through the above with a few members of the AsyncVoter team.  My screen lag didn&amp;rsquo;t help, but I think it was a good session.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got some PR updates from the devs to review now, and I&amp;rsquo;m hoping to get these PRs merged in today, if I need to make a few changes myself, and I think I&amp;rsquo;ve cleared that with the devs so that I won&amp;rsquo;t be stepping too heavily on anyone&amp;rsquo;s toes.  Proof will be if any of them want to submit PRs again in the future :-)&lt;/p&gt;

&lt;p&gt;After the AsyncVoter MobReview session Michael and I dived into some WSO refactoring.  We got as far as creating a Cucumber background step that doesn&amp;rsquo;t use the spec fixtures, which ultimately allowed the more effective exposure of a bug.  Most of the time was spent tracing the logic paths through the system.  I really hope that we can evolve the domain model of WebSiteOne sufficiently so it doesn&amp;rsquo;t go the way of the AutoGrader project &amp;hellip;.&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NcyTQ_kiV8A"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4khJglSo8s8"&gt;AsyncVoter Mob review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NcyTQ_kiV8A"&gt;&amp;ldquo;Kent Back&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EiBb-KFQDF4"&gt;WSO Pairing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Discombobulated (by Google)</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/08/discombobulated/"/>
    <id>http://blog.url.com/2016/11/08/discombobulated/</id>
    <published>2016-11-08T00:00:00+00:00</published>
    <updated>2016-11-10T10:10:57+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We spent a good hour analysing our options to cope with the changes in the Google Hangout API.  The key issue is that the Google Hangout on Air (HOA) button no longer starts a Hangout directly.  We have the the HOA button throughout our AgileVentures site on project and event pages:&lt;/p&gt;

&lt;p&gt;&lt;img alt="HOA button" src="https://www.dropbox.com/s/5esltpqdq8y2abt/Screenshot%202016-11-08%2009.23.04.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking this button now pops up a separate window with instructions on how to create a HOA through the YouTube interface.  BREAKING NEWS.  I just went to WebSiteOne project page to create a screenshot of the pop up for this blog and pressed the button.  Instead of opening a popup with the contents of this page:&lt;/p&gt;

&lt;p&gt;https://support.google.com/youtube/answer/7083786?hl=en-GB&lt;/p&gt;

&lt;p&gt;Which actually has a good straightforward description of how to create a HOA from the YouTube interface:&lt;/p&gt;

&lt;p&gt;&lt;img alt="create YT live event instructions" src="https://www.dropbox.com/s/gudo78qqtfk04bp/Screenshot%202016-11-08%2009.31.13.png?dl=1" /&gt; &lt;/p&gt;

&lt;p&gt;However an HOA popped up, our plugin worked and pinged Slack through the AV website/agile-bot hookup.  To say I was discombobulated is to put it mildly :-)  I went straight to my &lt;a href="http://stackoverflow.com/questions/40233393/start-a-hangout-on-air-button-for-youtube-livestreaming-api"&gt;StackOverflow post&lt;/a&gt; on the subject to see if there had been an update from the Google engineers, but nothing there.  So, had the activity on the SO post or our discussion in the YouTube product forums prompted the Google engineers to make a change?  Or was this just another accidental change that will allow HOA buttons to work for a while, but will disappear again at some point in the future?&lt;/p&gt;

&lt;p&gt;I guess Google moves in mysterious ways &amp;hellip; what we identified yesterday was that the hangout on air button not working was very confusing for many users.  The manual update of hangout URL was a work around that helped the more experienced AV members to notify the slack community about the hangout going live, but was unlikely to be used by new users.  I admitted that until recently I had been thinking we might want to move away from trying to support synchronous meetings, but the AV community has got really active recently, with well attended scrums, and Michael and I were agreeing that synchronous meetings were very good for coordinating some issues.&lt;/p&gt;

&lt;p&gt;In our first session Michael and I had listed out some of the key problems with the HOA button change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;increased effort to start hangout on air&lt;/li&gt;
&lt;li&gt;lower likelihood of notifications (and pair partners)&lt;/li&gt;
&lt;li&gt;no telemetry (data from who&amp;rsquo;s in the hangout when)&lt;/li&gt;
&lt;li&gt;no sharing of video link&lt;/li&gt;
&lt;li&gt;if no fixed event - no notification pathway &amp;ndash;&amp;gt; pair now on each project page is basically non-functional&lt;/li&gt;
&lt;li&gt;event live as function of planned duration rather than actual activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We reviewed our vision of how the site should ideally operate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy to browse existing sessions&lt;/li&gt;
&lt;li&gt;easy to join existing sessions&lt;/li&gt;
&lt;li&gt;easy to start a new session of your own &amp;ndash;&amp;gt; notifications&lt;/li&gt;
&lt;li&gt;telemetry to give people credit for attending, allow us to analyse and improve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We listed out some short term options for improvement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more documentation on current state of system &lt;/li&gt;
&lt;li&gt;build instructions on starting hangout on air into existing interface&lt;/li&gt;
&lt;li&gt;allow manual setting of youtube link &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and some longer term options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reviewing alternatives videoconferencing software

&lt;ul&gt;
&lt;li&gt;GotoMeeting&lt;/li&gt;
&lt;li&gt;Zoom&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elearningindustry.com/top-6-open-source-web-conferencing-software-tools-elearning-professionals"&gt;Open Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;publishing a new hangout app (give us notifications and telemetry)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be great if Google hangouts was open source &amp;hellip; anyway, even yesterday I didn&amp;rsquo;t want to leap into working on something.  I also wanted to review the issues related to payment and premium plans.  CraftAcademy Sweden is still keen to work with invoices rather than credit cards, so we now had some Premium members who weren&amp;rsquo;t represented in the site correctly.  I tested on my local server that I could update them from the console like to:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CraftAcademy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked locally and I ran the same through the production Rails console.  An example of me playing fast and loose perhaps?  Would a more principled approach be to deploy a rake task, build an admin interface or even an API endpoint? CraftAcademy just graduated three students and it was trivial for me to do through the Rails console, and make the system display the students&amp;rsquo; Premium status correctly.  I thought it was important to get this set, since otherwise they would have the &amp;ldquo;Sponsor for Premium&amp;rdquo; button.  Not that anyone was likely to start throwing money at them, but good to have the database in the correct state.  As the number of CA graduates increases, we&amp;rsquo;ll want to automate this, but right now we&amp;rsquo;re cautiously expanding the domain model.  Michael and I identified a set of other issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expiration date for CA sponsorship (notifications when 1 year support ends)&lt;/li&gt;
&lt;li&gt;CA sponsorship via Stripe&lt;/li&gt;
&lt;li&gt;Further PayPal payment integration&lt;/li&gt;
&lt;li&gt;Keeping track of how many pairing hours premium F2F and Plus members have left&lt;/li&gt;
&lt;li&gt;Supporting batch payments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was pleased to have made the admin changes to the DB.  The Google Hangout API issue underlines the importance of working in small steps.  We&amp;rsquo;re feeling our way with CraftAcademy collaboration.  The number of CraftAcademy graduates getting Premium membership bundled with their bootcamp experience could explode, or could stay at steady state, or even drop off.   It would be inexpedient to invest enormous engineering effort on functionality and extending the domain model until it&amp;rsquo;s clear which way that goes.  In the meantime we need to keep knocking off small improvements.  CraftAcademy SouthAfrica were saying they&amp;rsquo;d really like to make batch payments in credit card.  Another feature.  We just had our first successful Paypal payment (7 day free trial for first paypal premium member ending).  Naturally we shouldn&amp;rsquo;t just implement every feature that every user asks for.  We&amp;rsquo;ve got to prioritise those that overlap and give us more bang for the buck.&lt;/p&gt;

&lt;p&gt;I asked Michael what he&amp;rsquo;d like to work on and he said the &amp;ldquo;manual setting of YouTube links&amp;rdquo;.  We had another AV member join the hangout and tell us that was important for her project.  It made particular sense as it was a feature that would make our events more agnostic in terms of the video recording link.  We did a quick scrum and Michael drove on that feature.  Michael threw up a new feature, and we hammered at the EventInstances controller to see if we could provide a mechanism to manually update the video link for an EventInstance.  Things got a bit sticky.  I was torn a little between refactoring the Cucumber steps and getting things done.  I encouraged Michael as driver to take the route he thought best.  He left the background EventInstance generation steps alone, but tried some simpler versions for the individual scenario steps.  That didn&amp;rsquo;t go smoothly and we saw why the original test writers had gone for executing triggers rather than pure Capybara clicks when things were getting stuck on overlapping CSS elements.&lt;/p&gt;

&lt;p&gt;There were other complexities with the app code trying to post to Twitter, and the dynamics of when and if the &amp;ldquo;hangout is live&amp;rdquo; elements were being displayed.  At the end of the session the tests were still red and the debug cycle felt a bit slow.  Over night I wondered if, as part of migrating to a new domain model, we should prefer an EventCollection entity that consists of individual Events, and remove the terms EventInstance and Hangout from the domain.  The current model has the term Event representing both repeating and single &amp;ldquo;events&amp;rdquo; which can be scrums, client meetings, pairing sessions, anything where people get together.  The current codebase and tests use the term Hangout and EventInstance interchangeably which can be confusing.  An EventInstance holds a set of data about a Google Hangout at the moment.  I suspect there are also some cases where EventInstances get clobbered in repeat events started manually by the same person.  &lt;/p&gt;

&lt;p&gt;I wondered if we might be able to pull together a more RESTful system by replacing our current Event entity with an EventCollection.  One of the Mentive students I was working with had used that aggregate approach successfully, and discussions about the AsyncVoter REST API made me think I&amp;rsquo;d like to be rebuilding parts of the WSO system more cleanly.  But how to do it one step at a time?  Perhaps introduce a placeholder term like &lt;code&gt;AtomicEvent&lt;/code&gt; to represent single meetups; get a clean REST API around that and then finally migrate it to &lt;code&gt;Event&lt;/code&gt; once the original &lt;code&gt;Event&lt;/code&gt; entity was removed?  Sounds like it could be very confusing.  And now suddenly this morning the HOA button is working again, so suddenly we can leave that part of the system and focus on payments again?&lt;/p&gt;

&lt;p&gt;Or maybe take a detour to AsyncVoter to make sure we get some sort of tracer bullet up?  Again it all comes back to how can we make this charity enterprise sustainable &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Cuaol-FS9wM"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tSQztvcBQlY"&gt;Reviewing WSO issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zp06E5u7neM"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eIc_bQxVUd8"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring FTW!</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/07/refactoring-ftw/"/>
    <id>http://blog.url.com/2016/11/07/refactoring-ftw/</id>
    <published>2016-11-07T00:00:00+00:00</published>
    <updated>2016-11-08T10:23:32+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Friday was full of pull request reviews.  I&amp;rsquo;m currently trying to keep tabs on pull requests coming in on the following projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/AsyncVoter/pulls"&gt;AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/LocalSupport/pulls"&gt;LocalSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/projectscope/pulls"&gt;ProjectScope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StrawberryCanyon/redeemify/pulls"&gt;Redeemify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/pulls"&gt;WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve started adding extra notifications to the main slack project channels about pull requests opening and closing.  We have separate automated notification channels, but I think pull requests should be highlighted.  When a pull request opens everyone involved in the project should have a look if they can, and make a comment, or just a thumbs up.  Then when a pull request gets merged in that&amp;rsquo;s a time for everyone to thank the submitter of the pull request for completing that work, and then it&amp;rsquo;s great to thank them again when the code is deployed to production.&lt;/p&gt;

&lt;p&gt;AsyncVoter has gotten really active and there&amp;rsquo;s been a lot to review in our nodejs project recently, particularly in terms of locking down how the REST api will work.  LocalSupport goes in fits and starts.  ProjectScope has a group of Berkeley students working on it, and there are weekly flurries of activity.  Redeemify has a couple of folks pushing away, and WebSiteOne only has a few people working on it.  WebSiteOne used to have a lot more developers, but I pushed to ring-fence it for only premium members, since I was worried about maintaining it in the face of too many people working on it at the same time, particularly if those people had variable levels of commitment.&lt;/p&gt;

&lt;p&gt;At least now I&amp;rsquo;m getting a handle on a codebase that isn&amp;rsquo;t too highly in flux, but there&amp;rsquo;s a lot of stuff that needs doing.  Sasha has been knocking off small tickets pretty regularly the last couple of weeks, which is awesome.  In recent months most of the larger PRs have come from myself and Michael with some notable contributions from Raoul.  There was time for some pairing Friday afternoon, and I invited Ben, my friend from our new sponsor drie.  It ended up being just Ben and myself and we ended up spending a devops sessions looking at drie deploys, and how their different products might match different AgileVentures projects.&lt;/p&gt;

&lt;p&gt;What I didn&amp;rsquo;t get onto was the refactoring of the &amp;ldquo;Sponsor a Premium User&amp;rdquo; functionality that we finally had green tests for.  With the time change my Friday meetings ended earlier than usual, and so I got a quick end of week refactoring session in as I was gagging to complete the feature to the point it could be deployed.  The big ugly view from earlier of the week got boiled down to:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @sponsored_user %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @plan %&amp;gt; Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan.free_trial? %&amp;gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; receive all their membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @plan %&amp;gt; Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan.free_trial? %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;although still too much logic for my tastes.  The main if-else block there could be replaced by a call to two different templates, although having them side by side in one file highlights the two alternatives.  I could have pushed and boiled down further, but this part of the codebase is definitely in flux, so there are diminishing returns from pushing too hard on a refactoring binge.  A lot, but not all, of the replication in this view was gone.   I keep saying that it&amp;rsquo;s critical to remember that every time you DRY something out, you also introduce a dependency.  If we start to need highly divergent language for different plans, then some of this DRYing out will need to be undone.&lt;/p&gt;

&lt;p&gt;After a duel with code climate warnings on method complexity, the charges controller that works with the above view looked like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_slug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@sponsored_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsored_user?&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_charge_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and sported a couple of new private methods&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_customer&lt;/span&gt;
    &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;stripe_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="vi"&gt;@plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan_id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsored_user?&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a new class that I left in the same file as the controller for the moment:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plan&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:plan_id&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plan_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@plan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan_id&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="no"&gt;PLANS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plan_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;free_trial?&lt;/span&gt;
    &lt;span class="n"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="no"&gt;PLANS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;'premium'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiummob'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium Mob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiumf2f'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium F2F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium Plus'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The domain entity of a &lt;code&gt;Plan&lt;/code&gt; which had previously only really existed explicitly on the Stripe servers now had a class in our local code.  I was torn between having a class and just going with a collection of functional transformations.  I guess the key thing an instance of plan gives us is the ability to refer to it repeatedly in the view without having to keep passing in the plan_id.  Otherwise it could be collection of methods in a module.  Functional programming tells us to be suspicious of state &amp;hellip; I didn&amp;rsquo;t want to agonise so long that we would delay delivering the feature.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t write tests for the Plan class.  I briefly had it in the lib directly, but Rails didn&amp;rsquo;t load it automatically and although I found a &lt;a href="http://stackoverflow.com/questions/19098663/auto-loading-lib-files-in-rails-4"&gt;stack overflow post&lt;/a&gt; with suggested fixes, I did not want to start playing with the Rails config at 6pm on a Friday.  What I was aiming for here was effectively a private class that only this controller was using.  In the same way that we wouldn&amp;rsquo;t write tests for private methods, I didn&amp;rsquo;t want to be doing TDD domain entity evolution at this point.  My objective was DRYing out the view and controller while keeping the cukes green.  I did not want to get into other design questions of PORO in lib or ActiveRecord model.  &lt;/p&gt;

&lt;p&gt;Again, all this functionality is in flux.  We&amp;rsquo;ve got a restricted set of people working on the codebase.  In a project with a larger team I&amp;rsquo;d have to button down here and make this a serious object with tests, or even explicitly make it private.  I&amp;rsquo;ll need to do one or the other when we work on this again (and start better integrating PayPal and plan upgrades).  I&amp;rsquo;m thinking of giving it a week, and perhaps devoting this week to more fixes on the Google Hangout API fiasco.  Not sure.  Either way Raoul got this all deployed over the weekend and we have Sasha&amp;rsquo;s changes up which include the banner from our new sponsor drie, and the ability for members to sponsor each other for Premium - great work Raoul!&lt;/p&gt;

&lt;p&gt;Right then, once more unto the breach dear friends!&lt;/p&gt;
</content>
  </entry>
</feed>
