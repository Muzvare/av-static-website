<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-04T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Light at the End of the Stripe Tunnel</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/04/light-at-the-end-of-the-tunnel/"/>
    <id>http://blog.url.com/2016/11/04/light-at-the-end-of-the-tunnel/</id>
    <published>2016-11-04T00:00:00+00:00</published>
    <updated>2016-11-04T22:01:37+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My hopes for a less than frustrating day were dashed as I worked through the ongoing Stripe test failures.  Michael wasn&amp;rsquo;t around and I solo&amp;rsquo;d through some different alternatives.  Rather than just burn time repeatedly in the long debug cycle of seeing if the Stripe acceptance tests would all run in batch after random tweaks, I identified some different possible options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the existing tests without sandboxing (create a @poltergeist&lt;em&gt;no&lt;/em&gt;billy tag)&lt;/li&gt;
&lt;li&gt;Slowly re-add code pieces to develop (since batch cukes are green there)&lt;/li&gt;
&lt;li&gt;Delete the sandbox caches for larger and larger sets of acceptance tests, seeing if regenerating them fixed things&lt;/li&gt;
&lt;li&gt;Use the StripeRubyMock gem as an alternative&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started with the first option reckoning that I could at least quickly test whether the existing tests would run without sandboxing.  To re-cap, the develop branch had about 10 Stripe acceptance tests that ran fine with sandboxes; working individually and in batch.  Our new feature for users sponsoring each other introduced 2 new stripe acceptance tests, neither of which did anything fundamentally different from the existing tests.  These 2 new tests ran fine individually, in a group with all the other Stripe acceptance tests, but then the entire set of Stripe tests (new and old) would fail (no Stripe iFrame appearing) when run in batch with all the other Cucumber tests.&lt;/p&gt;

&lt;p&gt;It felt to me like there must be some timing issue here.  Some race condition such as often plagues JavaScript acceptance tests.  Although this wasn&amp;rsquo;t intermittent failure - the whole thing still doesn&amp;rsquo;t make sense to me.  To try and make sense I wanted to get some other data points.  Getting the Stripe tests to run without sandboxing might allow me to exclude sandboxing as the source of the problem.  Not that sandboxing didn&amp;rsquo;t have other usability issues that I&amp;rsquo;ve blogged about recently, but when trying to solve any big problem it&amp;rsquo;s useful to run experiments on the subsets of the components to see try and narrow down the area in which the error is occurring.&lt;/p&gt;

&lt;p&gt;Removing sandboxing was not as easily said as done, as I&amp;rsquo;d previously hooked the PuffingBilly gem directly into all Cucumber Javascript tests like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;test_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;phantomjs_options: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'--ignore-ssl-errors=yes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--proxy=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;phantomjs: &lt;/span&gt;&lt;span class="no"&gt;Phantomjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;js_errors: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_driver&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist_billy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both WebSiteOne and LocalSupport have been plagued, and continue to suffer to some extent, from intermittent JavaScript acceptance test failures.  There&amp;rsquo;s a &lt;a href="https://bibwild.wordpress.com/2016/02/18/struggling-towards-reliable-capybara-javascript-testing/"&gt;good blog post&lt;/a&gt; on why this is a tricky problem.  My own take earlier in the year was that it made sense to nail down all sources of variation.  Tests that make network connections are depending on the network and 3rd party services.  Sandboxing those network connections (recording them and playing them back in test mode) using the VCR and PuffingBilly gems reduces the variability of the test, and makes it more deterministic.  Earlier this year, as part of trying to reduce the overall variability in the WebSiteOne acceptance test, Michael and I had completely re-implemented the Cucumber config and hooks for WebSiteOne.&lt;/p&gt;

&lt;p&gt;To my chagrin this had still not completely removed the occasional intermittent acceptance failure, and the generation of additional cache files on test failure or on other occasions of test variation was confusing for all developers, complicated to manage, and made some PRs unreadable due to the overload of files.  In several smaller projects I&amp;rsquo;d preferred sandboxing over stubbing with WebMock, which has it&amp;rsquo;s own issues of maintaining lots of individual hand-written network calls.  Anyhow, in order to remove the sandboxing I had to get another Capybara JavaScript driver set up.  I ran through a series of alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default (Selenium) - opened firefox (v47) browser displayed nothing&lt;/li&gt;
&lt;li&gt;Poltergeist - not working on my OSX - absolutely bizarre DB errors, with users appearing and disappearing&lt;/li&gt;
&lt;li&gt;Poltergeist with PhantomJS - Stripe tests passed, but redirects to success page did not work - underlying permissions fail?&lt;/li&gt;
&lt;li&gt;Poltergeist with PhantomJS and PuffingBilly - going back to this got green, but still failing in batch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was a frustrating hour.  I knew that with extra work I could probably get the Selenium testing working, but that headed browser approach wasn&amp;rsquo;t going to work on our CI.  The pure Poltergeist errors with data appearing and disappearing from the DB were bizarre and a big red flag.  Poltergeist with PhantomJS looked promising.  We were avoiding sandboxing, but there was likely some permissions error at some level.  I could probably find that, although I was also encountering some ambiguity about which driver was being used - how other hooks were integrating with the existing Capybara Javascript hook:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@poltergeist_no_billy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;poltergeist_no_billy&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="c1"&gt;# this is my copy of the existing @javascript hook&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wasn&amp;rsquo;t liking any of the options very much.  I thought I&amp;rsquo;d give stripe-ruby-mock a spin.  Working from the &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock/blob/master/README.md"&gt;gem README&lt;/a&gt;, &lt;a href="https://medium.com/craft-academy/keeping-it-simple-3e7d9b186015#.4rc29xv6j"&gt;Thomas&amp;rsquo; CraftAcademy blog&lt;/a&gt;, and probably most importantly the associated &lt;a href="https://github.com/CraftAcademy/sf-online-august/"&gt;CraftAcademy repo&lt;/a&gt; I got first a single Stripe acceptance test working, and then another.  All would be for nothing if I couldn&amp;rsquo;t get them running in batch.  In batch a large number of Stripe acceptance tests were still failing, but importantly the ones using StripeRubyMock were not.  I had a lifeline, a light at the end of the tunnel.  If I could convert all the Stripe acceptance tests to StripeRubyMock I might have something where the entire test suite would go green.&lt;/p&gt;

&lt;p&gt;I had created a custom &lt;code&gt;@stripe_javascript&lt;/code&gt; tag to ensure that our StripeRubyMock tests would not use PuffingBilly, while allowing the other existing tests to keep using it:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt; &lt;span class="s1"&gt;'@stripe_javascript'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
  &lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_test_helper&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;After&lt;/span&gt; &lt;span class="s1"&gt;'@stripe_javascript'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist_billy&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stop&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'session_pool'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;restart&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was not without concern for some of the other changes.  App code in the ChargesContller had to be adjusted to accommodate testing with StripeRubyMock:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stripe_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;test?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;generate_test_token&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_test_token&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_card_token&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The charges controller would now ignore the incoming stripe token from the javascript redirect, and use a StripeRubyMock generated token in test mode.  It was pretty innocuous but a different code path would run in test, compared to development and production.  This was going against another general coding guideline.  Not the end of the world, but a warning flag.  Still this was starting to seem like the most hopeful route back to a green Cucumber suite.  I also came away with a modified poltergeist driver based on the CraftAcademy code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_driver&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;js_errors: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="ss"&gt;phantomjs: &lt;/span&gt;&lt;span class="no"&gt;Phantomjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="ss"&gt;phantomjs_options: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'--ssl-protocol=tlsv1.2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--ignore-ssl-errors=yes'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another key difference was that I now had to explicitly create our Premium plans using the StripeRubyMock as part of the setup for the cuke scenarios:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following plans exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumMob&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiummob&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumF2F&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiumf2f&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumPlus&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiumplus&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^the following plans exist$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is interesting as previously the cache of VCR and PuffingBilly would contain the plan information encoded in HTTP responses from the Stripe servers.  That had ensured the Stripe servers were the single authoritative source for this information.  As it happens specifying this in the Cucumber steps makes our business logic description here more complete.  It leaves us with a data dependency, whereby we need to ensure that the plans specified in our Cucumber scenarios match those on the Stripe servers.  Another heuristic red flag, but the prospect of a green test suite was driving me forward.  I wasn&amp;rsquo;t quite there yet, our update card details was failing, and we needed more changes to how we created a Premium user for testing purposes:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt; &lt;span class="sr"&gt;/^I am logged in as( a premium)? user with (?:name "([^"]*)", )?email "([^"]*)", with password "([^"]*)"$/&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;premium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

  &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                                           &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_card_token&lt;/span&gt;
                                       &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="s1"&gt;'premium'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subscription: &lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A card token from the Stripe test server would no longer work and the fix was using the stripe test helper to generate a card token.  This test code was super ugly, and I was still really bothered by the factories being shared between cukes and specs.  Anyhow, I also had to modify the app code for updating cards, because we were now generating a different kind of error.  I added a &lt;code&gt;NoMethodError&lt;/code&gt; to the update card error handling:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def update
    customer = Stripe::Customer.retrieve(current_user.stripe_customer_id) # _token?
    card = customer.sources.create(card: stripe_token(params))
    card.save
    customer.default_card = card.id
    customer.save
  rescue Stripe::InvalidRequestError, NoMethodError =&amp;gt; e
    logger.error "Stripe error while updating card info: #{e.message} for #{current_user}"
    @error = true
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we were finally all green! Although I did still get an intermittent fail on the very last build on CI at the end, so this isn&amp;rsquo;t over JavaScript Acceptance tests (shakes fist)!  In summary though the full test suite was green for me locally, and after a re-build on semaphore the build passed.  StripeRubyMock was working for us, and I don&amp;rsquo;t have much appetite for burning more time on the complete sandboxing alternative.  What&amp;rsquo;s frustrating is how much time that goes into this that could be going into refactoring the code for maintainability or improving the user interface experience.  However with the test suite green, we can potentially refactor with confidence (until the next time!).&lt;/p&gt;

&lt;p&gt;My concerns about RubyStripeMock is will it be maintained and stay up to date with the Stripe API itself?  To get things to pass I had to change app code that now hasn&amp;rsquo;t been tested in production.  Thomas has updated &lt;a href="https://medium.com/craft-academy/keeping-it-simple-3e7d9b186015#.4rc29xv6j"&gt;his blog post&lt;/a&gt; to talk about using RubyStripeMock completely network independently.  Since Stripe told me they are happy with a few hits from tests, and that removing network dependency has not fixed our intermittent failures I&amp;rsquo;m less concerned about that, than just having code paths that operate in production but don&amp;rsquo;t run in test.  I changed &lt;code&gt;customer.cards&lt;/code&gt; to &lt;code&gt;customer.sources&lt;/code&gt; in the app code to get the RubyStripeMock acceptance tests to work.  I will need to use the StripeRubyMock ability to switch to live tests against the Stripe servers to test that still works:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inclusions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:live&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toggle_live&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Running **live** tests against Stripe..."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The advantage of a full VCR/PuffingBilly sandbox, is that you are stubbing at the network level.  Your app is effectively running in the exact same environment as it would with a live network connection.  You can dump the sandbox at any time to re-create an accurate network sandbox.  However it becomes challenging with a complex service like Stripe that&amp;rsquo;s trying to be secure and is using a high degree of indeterminacy in terms of the network connections it makes.  The sandbox cache files have to be checked into git to ensure everyone gets a benefit from the sandbox, so test failures or complex system like Stripe can lead to challenging git churn.  Not checking in those files would be an alternative - CI would still hit live network servers, and on second and subsequent runs developer machines would avoid re-hitting the live network, but then network fails could be encoded into caches.  I starting to think sandbox caches are another challenging source of variability when used with services like Stripe.&lt;/p&gt;

&lt;p&gt;In a final analysis it&amp;rsquo;s all about trading off these different heuristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep test code as close to production code as possible&lt;/li&gt;
&lt;li&gt;Keep test environment as close to production environment as possible&lt;/li&gt;
&lt;li&gt;Avoid hitting 3rd party servers during test&lt;/li&gt;
&lt;li&gt;Ensure development flow is comprehensible and manageable for developers on your team&lt;/li&gt;
&lt;li&gt;Keep your full test suite green&lt;/li&gt;
&lt;li&gt;Keep the running time of your test suite down to avoid delayed debug cycle hell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and various others.  None of these heuristics always trumps all the others.  As Kent Beck says, &amp;ldquo;it depends &amp;hellip;&amp;rdquo;.  I say, keep looking for the light at the end of the tunnel :-) &lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fDUd9N5iDTA"&gt;Solo on WebSiteOne part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hz_i4DagxkY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iaRDd35qF_g"&gt;Solo on WebSiteOne part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Frustratingly Slow Debug Cycle</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/03/frustratingly-slow-debug-cycle/"/>
    <id>http://blog.url.com/2016/11/03/frustratingly-slow-debug-cycle/</id>
    <published>2016-11-03T00:00:00+00:00</published>
    <updated>2016-11-03T20:28:32+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Michael had lots of great ideas about tracking people through the site today, but I wanted to quickly push out the &amp;ldquo;sponsor other users&amp;rdquo; feature.  I was following the logic from Monday, where dashing out a PayPal endpoint had opened up some payment streams.  I had one person waiting to use the sponsor others, and I was promising myself a phase of consolidation once that was done.  In fairly short order we stamped out some cucumber scenarios:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Allow Users to Sponsor other members
  As a user
  So that I can help someone else get premium services
  I would like to be able to pay for their premium service

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following users exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;github_profile_url&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_sign_in_ip&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;alice@btinternet.co.uk&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;http://github.com/AliceSky&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User upgrades another user from free tier to premium
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"you have sponsored Alice Jones as a Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; non logged in user upgrades another user from free tier to premium
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"you have sponsored Alice Jones as a Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which could be more declarative, but they were good enough for now.  We then stamped out some even messier code to get them green.  This was all me.  I was following my &amp;ldquo;get it green, THEN refactor&amp;rdquo; mantra of the previous week.  Just to show you how messy some things were, take a look at this view:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @user.present? &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; current_user != @user %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan == 'premium' %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiummob'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium MOB Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium mob membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiumf2f'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium F2F Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium f2f membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium PLUS Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium plus membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan == 'premium' %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiummob'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium MOB Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium mob membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiumf2f'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium F2F Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium f2f membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium PLUS Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium plus membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh, business logic in the view, lots to DRY out, and now I look at it again, some mistakes in wording.  However, all those changes would be fairly easy to make.  The danger is that we don&amp;rsquo;t get to them.  Michael and I went to the &amp;ldquo;Kent Beck&amp;rdquo; scrum and changed roles.  The cukes that had been green for me were now failing for Michael, failing on CI, and failing when I pulled them back onto my machine.&lt;/p&gt;

&lt;p&gt;It seemed the full set of Premium related features was failing when run in full batch mode (Stripe iFrame not appearing), but would work when run individually, or from a set in their own folder (i.e. &lt;code&gt;cucumber features/premium/*&lt;/code&gt;).  Michael was then also getting individual failures related to a re-used Stripe token.  We were in a bit of a mess and burnt the best part of an hour investigating.  More importantly we weren&amp;rsquo;t doing any refactoring of the messy app code!&lt;/p&gt;

&lt;p&gt;The functionality was working when we run the site manually.  So frustrating.  Trying to push out something to receive some money, that works manually, but the feature tests don&amp;rsquo;t pass due to some odd bug, which turns into a massive time sink.  I wanted to start trying the &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock"&gt;stripe-ruby-mock&lt;/a&gt; which the CraftAcademy folks had had some success with.  It was not necessarily a snap fix, but I was starting to really hate all the many fixture files that came with sandboxing complex network interactions.  Occasional cache leaks would mean that developers would suddenly find a load of extra files on their file system.  Pull requests for new features would have 112 instead of 12 changed files.  Maybe the PR display on GitHub could be adapted to handle that, but I was really starting to feel this was all more trouble than it was worth.&lt;/p&gt;

&lt;p&gt;Michael was keen to understand these errors and these tests.  We got down into the PuffingBilly config where I remembered there was this additional step to ignore params on a unique URL that Stripe interactions generated.  I got the tests green again, but then they still failed in batch.  Also, Stripe had told us that they were happy with a load on their test servers that was &amp;ldquo;within reason&amp;rdquo;.  So this morning I tried taking the VCR and PuffingBilly caches off the tests, which would make our tests sensitive to network failures, just to see if that could get things passing in batch; but that still fails.  The test needs JavaScript and I think we have puffing billy hardwired in to all JS tests at the moment.  I could remove that and maybe I could get all the tests passing, but then again &amp;hellip;&lt;/p&gt;

&lt;p&gt;One of the biggest issues here is the slow debug cycle.  If the failures only occur in full batch then we have to run the entire cucumber suite, which takes ten minutes.  That might not seem like a lot, but it burns up time.  I&amp;rsquo;ve always seen that as a real red flag.  Being stuck with a slow debug cycle is asking for trouble.  Do anything you can to reduce the amount of time before you get feedback on whether a change you make is working or not!  I think the next thing to try is to create a @no-billy tag to opt out these scenarios from headless browser javascript caching to see if that will pass.  Other options include the stripe-ruby-mock gem, or just not having tests on the payment portions, which I&amp;rsquo;ve heard some people advocate.  Fingers crossed for a less frustrating session today &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=boCPUJ3sdlE"&gt;Pairing on WebSiteOne, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=20ZeJ9FcOxA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eAdPTF5A5O8"&gt;Pairing on WebSiteOne part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Documentation Debt</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/02/documentation-debt/"/>
    <id>http://blog.url.com/2016/11/02/documentation-debt/</id>
    <published>2016-11-02T00:00:00+00:00</published>
    <updated>2016-11-03T20:26:08+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Following on from the previous day I got a &lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; together for the AsyncVoter project.  I&amp;rsquo;d jumped into an AsyncVoter pairing session immediately after the Martin Fowler scrum.  Progress was being made with Cucumber, but in contrast to the day before, there was talk of spending more time working out the right way to work with CucumberJS.  I recommended that if we just had something working then put adjusting it into a refactoring ticket and get a green PR in, but that also it was up to the project members to make their own decision.  I think they ultimately took my advice and we have a &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/40"&gt;PR&lt;/a&gt; ready to merge.  Note: it took another day to merge, and in the meantime the developers refactored the Cucumber and produced a much cleaner solution.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a strange ongoing balance between refactoring things so that they&amp;rsquo;re right, and ensuring that PRs get merged quickly and don&amp;rsquo;t serve as a block for other developers trying to build on your work.  My rule of thumb is keep the PRs super small and make refactoring tickets.  Of course those refactoring tickets need to be addressed quickly, ideally getting votes taken on them ASAP.  Poor design decisions can get locked in when a lot of people build on them, but in a project with a high churn of developers and unpredictable availability, long running PRs can lead to a lot of work being thrown away.  I don&amp;rsquo;t think there&amp;rsquo;s any magic solution.&lt;/p&gt;

&lt;p&gt;I went ahead and tried to codify some of this in &lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.  I think it&amp;rsquo;s an improvement over some other CONTRIBUTING.mds I&amp;rsquo;ve written, but I think we need some images to break it up.  On the same note I started adding some documentation to the &lt;a href="https://github.com/AgileVentures/AgileVentures"&gt;AgileVentures/AgileVentures&lt;/a&gt; repo.  I&amp;rsquo;d had a quick guide to AsyncVoting, which I threw in there.  We&amp;rsquo;d previously only been using this repo as a place to have issues that were AV wide.  The repo wasn&amp;rsquo;t really intended for code.  John had thrown in some &lt;a href="https://github.com/AgileVentures/AgileVentures/blob/master/features/new_developer.feature"&gt;scenarios for new developers&lt;/a&gt; which connects to the key document I wanted to put in there, which was a &lt;a href="https://github.com/AgileVentures/AgileVentures/blob/master/STARTING_A_NEW_PROJECT.md"&gt;starting new projects document&lt;/a&gt;.  I managed to get one video embedded in there which breaks up the flow a little &amp;hellip;&lt;/p&gt;

&lt;p&gt;Maybe these materials should all be going into documents in our main site, like our &lt;a href="http://www.agileventures.org/getting-started"&gt;Getting Started document&lt;/a&gt;.  I just edited that to link to the start your own project page on GitHub.  The problem I have with the editable static pages throughout our site is that they don&amp;rsquo;t support markdown.  I&amp;rsquo;m just totally addicted to markdown; I write everything in it.  I love how it looks on GitHub.  I love that on GitHub we can get updates via pull requests from anyone with a GitHub account and we can use GitHub&amp;rsquo;s powerful teams and permissions system to manage direct access where needed.  Anyway, so much more work needed - updating our UX and all our instruction documents to reflect how the Google Hangout API has changed etc.&lt;/p&gt;

&lt;p&gt;When users are saying things like &amp;ldquo;I don&amp;rsquo;t know how to get a project started&amp;rdquo;, I can&amp;rsquo;t be spending time routing around creating static pages and working with a WYSIWYG system that requires me to click buttons and open windows to add hyperlinks.  I want all link-like things automatically linked, and markdown links to allow me to throw in references without breaking stride.  I can so easily create new files through the GitHub UI:&lt;/p&gt;

&lt;p&gt;&lt;img alt="animation of creating new file on GitHub repo" src="https://www.dropbox.com/s/c9nywqbxw638mw9/Screencast-2016.11.02-22.17.gif?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;For me GitHub just feels natural whilst most everything else feels cumbersome.  Of course every piece of documentation we create leads to documentation maintenance debt.  We&amp;rsquo;ve made many things editable to everyone on AgileVentures, but very few realise they can edit, and the big advantage of GitHub is that even if people don&amp;rsquo;t realise they can sometimes edit directly, at least there&amp;rsquo;s a higher chance they&amp;rsquo;ll understand they could contribute changes through a pull request.&lt;/p&gt;

&lt;p&gt;In the afternoon Michael and I dived into some performance issues on WebSiteOne.  I really wanted to keep working on the PayPal functionality and the sponsor other members feature that might bring in more cash flow, but the events page giving 500 errors was really not good.  We started analysing the page loads.  It seemed that on production a good eight seconds was spent rendering the view.  It seemed like we had an N+1 query where every little event element made an additional database query to ask what the latest hangout was for an event and checking if it was live.  We spent a while trying to modify the underlying query with &lt;code&gt;includes&lt;/code&gt; to pull in all the hangout info in the first query rather than one at a time.  We didn&amp;rsquo;t have much success.  The base query was complicated by working with the IceCube gem pulling in repeating events.  It might have worked if we&amp;rsquo;d created a scope, but rather than diving deep on that, I realised there really was no need to check for the liveness of an event that wasn&amp;rsquo;t taking place on the current day, so we just modified the view to check if the event was today, and saved ourselves a ton of database queries into the bargain.  It also removed an associated error that when an event was live, all the future events in the sequence also showed as live.  I dashed off a quick &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1378"&gt;pull request&lt;/a&gt; and we&amp;rsquo;ll see if it has a positive impact on production.  We definitely got a speed up locally.&lt;/p&gt;

&lt;p&gt;It was time to jump into a busy &amp;ldquo;Kent Beck&amp;rdquo; scrum with 8 folks reporting on where they were up to.  I really felt like I was spinning plates as I was recording an episode of Ruby Rogues right off the back of the scrum.  I was probably talking on x3, but we managed to dash off a vote on a &lt;a href="https://www.pivotaltracker.com/story/show/122459341"&gt;LocalSupport&lt;/a&gt; story, particularly since we had two MOOC students in the scrum wanting to complete their Open Source assignment.  I was on time to talk to the Ruby Rogues about the AgileVentures mission and it was a major buzz, and then buzz crash 90 minutes later as I tried to bring myself down for an evening with the family.  A busy day!  I spent another hour later on reviewing pull requests.  Still not sure if I&amp;rsquo;m focusing on the right things.  The Premium framework is designed to have me focus on PRs from those who are sponsoring AV.  I still feel like I&amp;rsquo;m drowning in requests sometimes :-) How will we scale this?  Can I get it sustainable before I get distracted by the need to take additional paid work?  Stay tuned to this blog to find out :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CpHdhYFok80"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RkgMoF8CmD8"&gt;Pairing on AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3YA0nG3-BY"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=f5BReS4QDZE"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Related Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/dergachev/4627207"&gt;Quickly make animated gifs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Different Strokes for Different Folks</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/01/different-strokes/"/>
    <id>http://blog.url.com/2016/11/01/different-strokes/</id>
    <published>2016-11-01T00:00:00+00:00</published>
    <updated>2016-11-01T21:38:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today was a series of intense work outs.  The clocks went back in the UK meaning that we were back in UTC time, so standups broke the day up at 10:30am and 3:45pm.  The &amp;ldquo;Martin Fowler&amp;rdquo; scrum was almost full, with folks from both the MetPlus and AsyncVoter projects.  We had an &lt;a href="https://www.youtube.com/watch?v=AfsoOtqv0eg"&gt;&amp;ldquo;AsyncVoter Catch Up&amp;rdquo;&lt;/a&gt; immediately after the scrum, which lasted over an hour and we had a good debate over three issues, specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should be using Cucumber (difficult setup)&lt;/li&gt;
&lt;li&gt;Do we need more development of the Story schema&lt;/li&gt;
&lt;li&gt;Shouldn&amp;rsquo;t we push on to creating the Vote model?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Various people had been working on adding CucumberJS over the weekend, and it seemed that there was concern that Cucumber was just replicating our existing integration test on the RESTful API for the Story model and that it wasn&amp;rsquo;t moving us forward, particularly to the extent that it was proving difficult to set up.  I had strong feelings here and knew that I could easily end up dominating the conversation.  Having clarified that these were the three issues I went round everyone in the meeting, starting with the least outspoken folks to make sure that we heard their point of view before more outspoken folks like myself - I am guilty as charged! :-) &lt;/p&gt;

&lt;p&gt;There was a variety of viewpoints and I&amp;rsquo;m really glad we got them all in.  Some people were in favour of Cucumber, others against, and I think everyone was keen to move on.  Michael and I countered the point that Cucumber was pure replication of the existing integration tests by saying that yes, it was, and even though we didn&amp;rsquo;t have a non-technical client, the key value of the Cucumber stories would be making it easier for new developers and ourselves in the future to understand why particular features of the code were there.  We also agreed that if we couldn&amp;rsquo;t quickly get Cucumber working we&amp;rsquo;d need to drop it.&lt;/p&gt;

&lt;p&gt;I pulled in some of the spikes from the weekend and pretty soon we had something working.  The key confusion had been about what testing model to use in combination with CucumberJS.  The AsyncVoter mob had been coming together and then splintering.  I think between them they had all the things they needed to move forward, but it was partly a confidence issue.  Just to give you a flavour, here&amp;rsquo;s an example of the existing integration test:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET /stories'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;chai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/stories'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which was paralleled by a Cucumber story like so:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Testing Cucumber
    &lt;span class="nf"&gt;When&lt;/span&gt; I make a GET request the response status code should be &lt;span class="s"&gt;"200"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we got a &amp;ldquo;tracer bullet&amp;rdquo; of this working with a step definition like so:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I make a GET request the response status code should be "&lt;/span&gt;&lt;span class="se"&gt;([^&lt;/span&gt;&lt;span class="sr"&gt;"&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;"$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;chai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/stories'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"res status was "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;

     &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The crucial thing here was that this would fail correctly.  We weren&amp;rsquo;t yet using nice chai assertions, but there were &lt;a href="https://github.com/domenic/chai-as-promised"&gt;libraries&lt;/a&gt; that would help us with that.  &lt;/p&gt;

&lt;p&gt;The other thing I emphasised again was that we wanted to be very careful making changes to the functionality and model schema that weren&amp;rsquo;t driven by high level user stories that had gone through the estimation process.  I&amp;rsquo;ve burned too many hours in projects suffering from feature creep not to make that point.  That said, I also underlined that to me the core of Agile is that the team reflects regularly on what works for them, and tries out changes.  BDD, TDD, Cucumber, pairing, mobbing, user stories, estimating are all on the table, and can be removed or tinkered with if the team thinks it&amp;rsquo;s a good idea to make a change.  The way I channel Agile is that there are a lot of group and coding processes that can give us value, so it&amp;rsquo;s great to start with a few tried and tested procedures that you are comfortable with.  At the same time allow the team to evolve its own style, but don&amp;rsquo;t allow the baby to be thrown out with the bathwater.  After a tinker or a change, see how things go.  Reflect after 1 week, 2 weeks, a month.&lt;/p&gt;

&lt;p&gt;It was a good session, and after lunch I jumped into a pairing session with Michael on WebsiteOne.  We had a good chat about pairing techniques and how to work together effectively.  There was so much to do on WebsiteOne.  There were performance issues emerging on the events page.  The fixes that I had got in for hangouts needed follow up and new UX flow to match the post Hangout Button API switch off reality.  However we have to be sustainable, and I let the money lead us.  I had one potential Premium signup if we had PayPal in place.  All sorts of other fixes were certainly needed, but if I don&amp;rsquo;t bring in enough money I&amp;rsquo;ll be back to being distracted by a closed-source 9-5 in January; so that&amp;rsquo;s the heuristic I&amp;rsquo;m working on.  &lt;/p&gt;

&lt;p&gt;The AsyncVoter and LocalSupport projects seem to have more interested parties at the moment, meaning that we hadn&amp;rsquo;t yet voted on the &lt;a href="https://waffle.io/AgileVentures/WebsiteOne/cards/580787b7bbf5b55b01565370"&gt;PayPal story&lt;/a&gt;.  In another context the absence of estimation would stop me from working on the ticket, but I think you also have to know when to ignore guidelines.  Michael and I spent a while exploring the PayPal options, discovering that they support recurring subscription payments.  It became clear pretty quickly that we could actually get a test PayPal button up without anything like the integration we needed for Stripe:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://www.paypal.com/cgi-bin/webscr"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"cmd"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"_s-xclick"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hosted_button_id"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"N5R9T269YU7XC"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.paypalobjects.com/en_GB/i/btn/btn_subscribe_LG.gif"&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"PayPal – The safer, easier way to pay online!"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.paypalobjects.com/en_GB/i/scr/pixel.gif"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PayPal button tools allow you to create a subscribe button in association with a PayPal business or charity account.  I had already set up an AgileVentures charity account on PayPal, so it was just a question of copying the above code into an appropriate location.  We tried putting it in a static page, but some important tags got filtered out, so we slapped it into an extra endpoint on the already abused &lt;code&gt;ChargesController&lt;/code&gt;, wrapped it in a cucumber test (checked it failed when the button was missing) and got it out.  Michael was suggesting adding a redirection endpoint, but the next scrum was coming up and I had a meeting with a sponsor, so I wanted to get to the point where this was up and we could test if it would work, and more importantly, if people would use it.  If we could validate those two, then it would be worth investing more time.&lt;/p&gt;

&lt;p&gt;Michael&amp;rsquo;s questioned whether I go too close to the metal here.  It&amp;rsquo;s like extreme Agile.  You could argue that if you&amp;rsquo;re going to take someone&amp;rsquo;s money then you should be doing a lot more work to make everything perfect and just so.  I&amp;rsquo;d love to have the resources to throw at that.  We started the Stripe integration at absolute bare bones, and as people signed up and made comments about things that looked odd, we fixed those things.  I plan to do the same for PayPal.  Raoul got the new feature out super fast and we got our first sign up.  Now I can be confident that more time investing in redirection end-points and tweaking button colour schemes is time being spent in the context of a revenue stream.&lt;/p&gt;

&lt;p&gt;On reflection a great day.  The Paypal addition was super simple, and ironically I think we might have moved faster six months ago if we&amp;rsquo;d started with Paypal and not Stripe, but now we have both and that&amp;rsquo;s great.  I retrospectively assigned a &amp;ldquo;1&amp;rdquo; to the PayPal story because that&amp;rsquo;s what it had been, and resolved to get a CONTRIBUTING.md page up for the AsyncVoter project.  I hope I won&amp;rsquo;t be crucified as a hypocrite, but I really do believe this Agile idea of &amp;ldquo;no one size fits all&amp;rdquo;.  Every project is different.  Every team needs to adjust its processes to suit circumstances.  I&amp;rsquo;m going to push AsyncVoter towards more voting and estimating before stories are started to avoid people stepping on each other&amp;rsquo;s toes.  WebSiteOne is quieter also because it&amp;rsquo;s a priority project, so fewer people are eligible to work on it, but if we can get AsyncVoter automation in place maybe we can get more stories estimated faster for WebSiteOne; the two projects will synergise and it will be win-win for everyone! &lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/C-E_5uj-YgQ"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AfsoOtqv0eg"&gt;AsyncVoter Catch Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=zVS_tyX3Lq8"&gt;Pairing on WebsiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=IK8O5U4lmfg"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Crunch Time</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/31/crunch-time/"/>
    <id>http://blog.url.com/2016/10/31/crunch-time/</id>
    <published>2016-10-31T00:00:00+00:00</published>
    <updated>2016-11-01T21:34:39+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It was crunch time.  No answer from Google on the Hangout Button API.  It was dismantle our events framework or make some changes to the manual update functionality that would allow some parts of joining an event to start working again.  The problem was that even though our hangout plugin was automatically loaded into Hangouts started via YouTube, that hangout would only load for people who had previously run a successful AgileVentures hangout, and even then was now not set to communicate back to the AgileVentures&amp;rsquo; server.&lt;/p&gt;

&lt;p&gt;The current architecture would send notifications about a hangout on Slack and provide a link to that hangout on the AgileVentures&amp;rsquo; site &lt;em&gt;if&lt;/em&gt; the hangout was started from a button on the AV site, and our custom plugin was loaded into the hangout with the right data payload.  Maybe we could adjust the plugin to be &lt;a href="https://developers.google.com/+/hangouts/publishing"&gt;installable&lt;/a&gt; into a YouTube started hangout and then connect back to our server to support the notifications and link display.  Certainly apps like &lt;a href="https://twitter.com/_madeye"&gt;MadEye&lt;/a&gt; used to work like that, but they&amp;rsquo;ve shut down and who knows how long Google will continue supporting the Hangout Plugin ecosystem.  It was clear from the discussions on Thursday that it made sense to start by enabling users to manually specify the hangout URL; have that act of manual specification lead to Slack notifications, and keep the links to the hangout on AgileVentures live for the duration the event.&lt;/p&gt;

&lt;p&gt;&lt;img alt="example of a live event link in AV" src="https://www.dropbox.com/s/5vseylfvnfeufd5/Screenshot%202016-10-31%2009.46.02.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The manual update of the URL had been broken for repeating events; a bug I had fixed earlier in the week.  Now the trouble was that following a manual update the event would only stay &amp;ldquo;live&amp;rdquo; for 2 minutes.  As Michael pointed out this was because when the whole system was working the hangout plugin would be sending back telemetry every 2 minutes and would keep the event &amp;ldquo;live&amp;rdquo;.  Effectively we wanted the site to be able to display &amp;ldquo;live&amp;rdquo; events accurately, so that people thinking about joining would be receiving accurate information about whether to expect others in the hangout.  All this was still short of my imagined ideal set up where you are able to see who is in a live hangout before you join.  This functionality was briefly available on the helpdesk hangouts we used to have in the &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC, however it never worked for Hangouts on Air.  If the Google Hangout API had stayed stable, it&amp;rsquo;s something we might have been able to add fairly soon.  As it is now we&amp;rsquo;re just scrambling to keep existing features running.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;rsquo;m deluding myself about this, but I really do imagine that an infrastructure that allowed you to browse a set of collaborative events, seeing a preview of what is going on and who is participating, could recreate some of the wandering, networking aspect of an unconference or similar, but support it completely remotely. (maybe I should do a UI mockup &amp;hellip;).  Anyway, let me tell you how I fixed the manual URL update to support &amp;ldquo;live for the duration&amp;rdquo; and Slack notifications.  I started with a cucumber test, splitting the existing edit hangout URL tests into a separate feature file so that I could reduce the dependencies between the background steps.  Long cucumber files with multiple scenarios relying on the same set of background set up start to feel almost as dangerous as tests relying about a large set of fixtures.  Here&amp;rsquo;s the new feature file header:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Manual Edit of Hangout URL
  As a person involved in an event
  So that I can ensure everyone can access the correct link to join an event
  I would like to have means of editing the hangout URL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s the smaller(!) set of background steps I finally converged on:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;Given the date is "2014-02-04 06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;59&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="err"&gt;And following events exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;start_datetime&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;time_zone&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats_every_n_weeks&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;repeats_weekly_each_days_of_the_week_mask&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Daily&lt;/span&gt; &lt;span class="n"&gt;scrum&lt;/span&gt; &lt;span class="n"&gt;meeting&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014/02/04&lt;/span&gt; &lt;span class="n"&gt;07:00:00&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;15&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;                       &lt;span class="p"&gt;|&lt;/span&gt;                                           &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Repeat&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Daily&lt;/span&gt; &lt;span class="n"&gt;scrum&lt;/span&gt; &lt;span class="n"&gt;meeting&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014/02/03&lt;/span&gt; &lt;span class="n"&gt;07:00:00&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;15&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;weekly&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;                     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;15&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="err"&gt;And the following hangouts exist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Start&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Title&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Project&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Category&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Event&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;EventInstance&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Youtube&lt;/span&gt; &lt;span class="nv"&gt;video&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2012-02-04&lt;/span&gt; &lt;span class="n"&gt;07:00:00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;HangoutsFlow&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;WebsiteOne&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Repeat&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;http://hangout.test&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;QWERT55&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014-02-04&lt;/span&gt; &lt;span class="n"&gt;07:02:00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014-02-05&lt;/span&gt; &lt;span class="n"&gt;07:00:00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;HangoutsFlow&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;WebsiteOne&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Repeat&lt;/span&gt; &lt;span class="n"&gt;Scrum&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;http://hangout.test&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;QWERT55&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;2014-02-05&lt;/span&gt; &lt;span class="n"&gt;07:03:00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I have Slack notifications enabled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are irritatingly long at the moment partly due to the need to specify the &lt;code&gt;repeats_every_n_weeks&lt;/code&gt; and &lt;code&gt;repeats_weekly_each_days_of_the_week_mask&lt;/code&gt; fields on Events.  Trying to move fast I wasn&amp;rsquo;t about to start refactoring that, although I&amp;rsquo;d love to rewrite both of the above &lt;code&gt;following entities exist&lt;/code&gt; steps to avoid using factories that are shared with our specs, and make the whole thing more readable.&lt;/p&gt;

&lt;p&gt;I drove from the simpler non-repeating event situation:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="nt"&gt;@javascript&lt;/span&gt;
  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL and ensure event stays live
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I open the Edit URL controls
    &lt;span class="err"&gt;And I fill in "hangout_url" with "http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//test.com"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click on the Save button
    &lt;span class="err"&gt;Then I should see link "Join now" with "http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//test.com"&lt;/span&gt;
    &lt;span class="err"&gt;And I jump to one minute before the end of the event at "2014-02-04 07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;00"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I navigate to the show page for event &lt;span class="s"&gt;"Scrum"&lt;/span&gt;
    &lt;span class="err"&gt;Then I should see link "Join now" with "http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//test.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally this was failing due to no updates from the plugin, and so I dropped to the RSpec level and drove the creation of a new field on EventInstance called &lt;code&gt;url_set_directly&lt;/code&gt; to serve as a flag to indicate that the hangout URL had been set manually. I&amp;rsquo;d been struggling with the domain entity name of EventInstance, which we use to represent a Hangout, and the names are used interchangeably throughout the codebase.  I had been thinking we should consolidate on Hangout, but actually now the future of Hangouts is up in the air, EventInstance starts to feel like the better choice, although surely there must be a better term?  Anyhow, don&amp;rsquo;t get sidetracked making domain model tweaks when you&amp;rsquo;re trying to get a fix into production!  I RSpec&amp;rsquo;d in the EventInstance spec like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;EventInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'has url_set_directly default to false'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url_set_directly&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_falsey&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'hangout_url is present and is not finished'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hangout_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;
      &lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hoa_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'anything'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'url manually overridden'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url_set_directly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'reports live if the link is older than 2 minutes, and event duration not expired'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:within_current_event_duration?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10:02:01 UTC'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hangout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;live?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which naturally failed since there was no such field as &lt;code&gt;url_set_directly&lt;/code&gt;, which lead me to generate this migration:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddUrlSetDirectlyColumnToEventInstance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:event_instances&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:url_set_directly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And made the following changes in the EventInstance class:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;live?&lt;/span&gt;
    &lt;span class="n"&gt;started?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hoa_status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'finished'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updated_within_last_two_minutes?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;manually_updated_event_not_finished?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;manually_updated_event_not_finished?&lt;/span&gt;
    &lt;span class="n"&gt;url_set_directly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;within_current_event_duration?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The spec&amp;rsquo;s passed, although not the cukes.  Notice I&amp;rsquo;d stubbed the EventInstance (hangout) in the spec to allow calling &lt;code&gt;within_current_event_duration?&lt;/code&gt; on EventInstance objects. One usually doesn&amp;rsquo;t stub methods in the object under test, but here I was planning to delegate that call straight out to a collaborator. I wanted to be able to ask that of an EventInstance instance, and I could drive adding that with another spec for a delegation:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;EventInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;delegate_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:within_current_event_duration?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the code to make that spec green was:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventInstance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;

  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:within_current_event_duration?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: :event&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be really tidy to say that then the cukes went green, but there was an additional change in the view (to set the url&lt;em&gt;set&lt;/em&gt;directly flag) and then a good hour of getting lost in the time elements of Event, the IceCube scheduling gem etc.  Ultimately I think it was all down to slight incorrectness in the way I was setting the dates in the Cucumber steps.   Those sorted out, everything was passing, and I got a &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1370"&gt;PR&lt;/a&gt; in, which Raoul deployed and we tested in staging.  It seemed to keep the event live, but Slack notifications were not going through.  That took the addition of several more parameters to the view, and another &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1372"&gt;PR&lt;/a&gt; which ultimately worked.  I&amp;rsquo;d definitely gone over budget with the time on this, I was not comfortable with some of the compromises I had made on the Cucumber steps, but I had something working that would allow João to run the Pacific Rim scrum in such a way that with a single manual step he&amp;rsquo;d be able to notify everyone on Slack, and the links on the AV site would stay live for 15 minutes to let people into the Scrum.&lt;/p&gt;

&lt;p&gt;The set up also seemed to work at least partially for some less experienced Scrum masters over the weekend, but more support and scaffolding is clearly needed.  I also think that &lt;code&gt;url_set_directly&lt;/code&gt; needs to be a date rather than a flag, since I expect some repeating events may now say &amp;ldquo;live&amp;rdquo; incorrectly &amp;hellip; although maybe events all should say live for their duration? We would just need some kind of popup message in the hangout for people entering to let them know that no one else is there yet and that&amp;rsquo;s okay, and people could still meetup.  Of course Hangouts can&amp;rsquo;t be re-broadcast &amp;hellip; is it worth pursuing a Hangout plugin to handle the new setup or will work invested there have to be thrown out when/if Google completely sunsets Hangouts?&lt;/p&gt;

&lt;p&gt;It often feels like Hangouts is an engineeering black hole.  Perhaps now it&amp;rsquo;s time to switch focus onto adding PayPal payment support, and allowing people to sponsor each other&amp;rsquo;s Premium memberships on AgileVentures.  I have the feeling we could start receiving payments from at least two people if those two features were in place, so perhaps that&amp;rsquo;s the best focus?  In the meantime I could get some emails off to all the Hangout alternatives with a list of our needed features, e.g. recordability, URL to conference etc. &amp;hellip; On to the next Crunch Time!&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nJVeelkuoGw"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Opportunity in Disguise</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/28/opportunity-in-disguise/"/>
    <id>http://blog.url.com/2016/10/28/opportunity-in-disguise/</id>
    <published>2016-10-28T01:00:00+01:00</published>
    <updated>2016-11-01T21:34:39+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The new plan payment end points are winding their way to production, and I stepped back to the AsyncVoter code (which was now green) following a mob session with Michael, Raphael and Alex yesterday.  I wasn&amp;rsquo;t there so apologies if I left anyone out.  I know Joao, Junior and Chaiwa are following things closely.  The clear difference for me between a Node/Express app and a Ruby/Sinatra app is that I can pretty much fix any problem very fast in the latter.  I&amp;rsquo;ve done Node/Express here and there over the years, but nothing like the volume I have in Ruby.  Raphael also talked about things being slow going in their session, but they&amp;rsquo;d got everything green.  I think ultimately it had come down to making sure the correct database setup was going on in the &lt;code&gt;server.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mongoose'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mongodb://localhost/asyncvoter'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'connection error:'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// we're connected!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Connected correctly to server"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/2f42dee39c727cd5b6e849ac955a818bc0faa6ae/bin/server.js"&gt;https://github.com/AgileVentures/AsyncVoter/blob/master/bin/server.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the kind of thing where I would benefit from some &lt;a href="http://philipmjohnson.org/essays/athletic-software-engineering.html"&gt;athletic&lt;/a&gt; coding repetitions (reps).  I used to do those a lot with the students at Makers Academy, following from Philip Johnson&amp;rsquo;s Athletic Software Engineering concept, where you repeat the same exercise over and over, building in muscle memory and getting your task completion time down.  So for example I&amp;rsquo;ve repped generating a Sinatra app many many times, and a PORO domain model with RSpec hundreds of times.  We can also refer to these things as coding kata.  Often kata are just in the plain programming domain, but I think there&amp;rsquo;s a lot to be said for &amp;ldquo;infrastructure&amp;rdquo; kata that involve repeatedly building a Sinatra or Express app from scratch.  You encounter all the setup errors outside the context of trying to get something else done, which makes them less stressful.&lt;/p&gt;

&lt;p&gt;Anyway, it has been a year or so since I was repping on node/express so it was great the others had sorted the database issues in a mob session while I was kicking out the premium plan payment endpoints for our Rails app in a solo session.  In the review session I pulled the code onto my machine and everything pretty much worked except a Rails app I still had running on port 3000 blocked the tests, leading to a new &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/15"&gt;issue&lt;/a&gt; for the project.  So we got the PR patched up and our first feature completed for AsyncVoter.  While we were waiting for the CI to pass we got a couple of general discussion points out of the way.&lt;/p&gt;

&lt;p&gt;One was the domain model terminology, where we were thinking to rename &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/16"&gt;&amp;ldquo;Stories&amp;rdquo; to &amp;ldquo;Ballots&amp;rdquo;&lt;/a&gt;.  I dashed off a quick domain model:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users cast individual Votes, on Ballots that concern Stories. Stories are uniquely identified by a URL, and will often have a Name, which is also the Name of the Ballot. The result of a Ballot will be when all the Users&amp;rsquo; votes are the same, e.g. all 1s, all 2s, or all 3s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I proposed that we didn&amp;rsquo;t need explicit User or Story domain entities at this point, and that going simplicity first, we could probably get away with a single Ballot having a set of associated Votes.  We&amp;rsquo;ll see if that gets adopted.  The other question was the cool Uncle Bob architecture that Joao had put in the spike where all the code was organised by domain entities.  It had the downside that some folks had been confused by the lack of a &amp;ldquo;standard&amp;rdquo; Express structure, with separate folders for models, controllers etc.  We opened a &lt;a href="https://github.com/AgileVentures/AsyncVoter/issues/17"&gt;ticket&lt;/a&gt; for that.  It seemed like people didn&amp;rsquo;t care too much either way and we agreed that if anyone felt strongly enough they could do a PR to adjust the structure, but do it before the project got too big.&lt;/p&gt;

&lt;p&gt;So, lovely green shoots in the AsyncVoter project, although it may still be a little time before the logistical overhead of running asynchronous votes for other projects will actually be reduced.  Still, no crazy rush now that we&amp;rsquo;re rotating who&amp;rsquo;s running the asynchronous votes in LocalSupport and WebSiteOne.  In the process we&amp;rsquo;re familiarising everyone with the process of asynchronous voting.  Avoiding the synchronous meetings that no one seems to enjoy; providing a lightweight mechanism for people to get involved in projects; leaving a visible trail of discussion in the Slack channels so the project activity is clearly visible.  All good really.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s in stark contrast to the ongoing absence of the Google Hangouts API.  The switch to YouTube Live does not prevent us from starting Hangouts on Air, which we can still do, we just can&amp;rsquo;t seem to do it programmatically.   There has been no response from Google in the three days since I posted my &lt;a href="http://stackoverflow.com/questions/40233393/start-a-hangout-on-air-button-for-youtube-livestreaming-api"&gt;SO question&lt;/a&gt; and reading the YouTube live documentation it seems like it&amp;rsquo;s focused on supporting those who want to start a video stream from their desktop, not start a Hangout where multiple people can congregate to collaborate.&lt;/p&gt;

&lt;p&gt;We started to brainstorm the alternatives: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.twitch.tv/"&gt;twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://agileventures.slack.com/apps/A0F827L3S-room"&gt;room (for slack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(other slack meeting tools - &lt;a href="https://agileventures.slack.com/apps/search?q=video"&gt;I see 20+&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zoom.us"&gt;zoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gotomeeting.co.uk/"&gt;gotomeeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.livecoding.tv/developer/applications/webrt"&gt;live coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build our own - &lt;a href="https://webrtc.org/"&gt;WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to evaluate each of these in terms of what we need for AgileVentures, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;telemetry (plugins)&lt;/li&gt;
&lt;li&gt;stability&lt;/li&gt;
&lt;li&gt;recordable&lt;/li&gt;
&lt;li&gt;access via URL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our AgileVentures Karma system is based on giving people credit for attending events, so we need telemetry.  The whole thing has to be stable, as it is difficult enough to get people together in a hangout.  When the technology is dodgy it&amp;rsquo;s a huge barrier, and we&amp;rsquo;re also committed to recording as part of our open development philosophy.  Also having a URL that will take you to the video conference makes it hugely easy to share with others to get them into the conference.  &lt;/p&gt;

&lt;p&gt;Maybe we will have to end up compromising on one or all of these in order to continue.  At the moment we are limping along manually creating hangouts via the live events interface.  We are bleeding in terms of MOOC students not having support to easily creating pairing hangouts, and people finding it harder to join scrums.  The problems can be itemised as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;manual work for scrum masters (posting links to slack etc.)&lt;/li&gt;
&lt;li&gt;no telemetry from hangouts (within Google button API our plugin no longer communicates to server)&lt;/li&gt;
&lt;li&gt;descriptions of how to start pairing sessions now incorrect - MOOC folks and many projects folks confused - unable to connect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We came up with the following short term solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adjust WSO functionality to better support manual adding of link to hangout (?) (URL) &amp;ndash;&amp;gt; ping slack (reduces some manual work)&lt;/li&gt;
&lt;li&gt;adjust WSO functionality to stay alive without telemetry&lt;/li&gt;
&lt;li&gt;add instructions for copying across URL&lt;/li&gt;
&lt;li&gt;hangout plugin - add ability to specific data to send telemetry back (will only work for people who previously ran hangout with plugin) &amp;ndash;&amp;gt; no way to now inject hangout plugins?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and also had a few out of the box ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on asynchronous stuff? e.g. scrums in text chat in slack? or something&lt;/li&gt;
&lt;li&gt;revenue stream from ads on youtube&lt;/li&gt;
&lt;li&gt;can we use the live event interface to start a hangout with selenium or something?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It felt good to be able to review all the issues in a group.  The sensible thing seemed to be to focus on the first three items in the short term solutions above.  Good support for manual URL addition would not tie us to Hangouts, which of course might completely disappear.  If only they were open source!  The key fundamental is really to be able to share a URL to the video conference through the various media that people are connected with.   I&amp;rsquo;ll try and get to the manual URL hangout fixes today, and then next week we can keep evaluating all the alternatives.  It might also be time to focus on allowing people to start hangouts from Slack where the activity is watchable, repeatable and copyable.  It offers a much more lightweight learning mechanism than a web interface.  Real time text chat really has the huge advantage over the web that you can immediately ask folks how they did anything, whether that&amp;rsquo;s starting or voting in an Asynchronous vote, how they started a hangout etc &amp;hellip;  &lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s been so great to see this week is the AgileVentures members working hard to get round the problems, helping each other, brainstorming solutions.  Maybe this truly is an opportunity in disguise &amp;hellip; Okay, time to code! &lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyLL5_QxLkU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zmt8FjqMTLE"&gt;AsyncVoter Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DyLL5_QxLkU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
