<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-29T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Ducking and Diving</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/29/ducking-and-diving/"/>
    <id>http://blog.url.com/2016/09/29/ducking-and-diving/</id>
    <published>2016-09-29T01:00:00+01:00</published>
    <updated>2016-09-29T20:51:17+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So having partially recovered from the cold I was able to pair program again today.  Interleaving work on the Karma calculation and the premium memberships, we now had an outstanding PR for premium upgrade buttons, so we ducked back to the Karma work of the previous week where we had got tangled up in all sorts of trouble with legacy tests, factories and objects.  The ardour of frustration had cooled.  I was not now in such a hurry to &amp;ldquo;solve&amp;rdquo; the problem.  I think that really helped.  We&amp;rsquo;d broken up the follow on refactorings into two tickets; one to get the karma total out of the user table, and the other to transfer all the rest of the intermediate calculations into the Karma model itself.&lt;/p&gt;

&lt;p&gt;We started on removing karma from the user table.  The approach here was just to create the migration and see what errors we flushed out:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoveKarmaFromUserTable&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;remove_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:integer&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was torn about this sort of hacky approach, versus the other ticket which would see us refactoring away the KarmaCalculation service.  Still that bigger refactoring had more to go wrong, so it made sense to take the simpler step first.  Well maybe it wouldn&amp;rsquo;t be simpler, but we needed to flush out any unknowns before we went on to the bigger refactoring.  It also felt good to be removing something from the bloated user table.&lt;/p&gt;

&lt;p&gt;So we proceeded with the migration and flushed out the following 16 failures in the specs:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rspec ./spec/views/users/index.html.erb_spec.rb:48 # users/index.html.erb renders User name link with href
rspec ./spec/views/users/index.html.erb_spec.rb:41 # users/index.html.erb should display a list of users
rspec ./spec/views/users/index.html.erb_spec.rb:91 # users/index.html.erb display user status there should be 4 green dots
rspec ./spec/views/users/index.html.erb_spec.rb:85 # users/index.html.erb display user status display green dot for online users
rspec ./spec/views/users/index.html.erb_spec.rb:97 # users/index.html.erb display user status do not display green dot for offline users
rspec ./spec/views/users/index.html.erb_spec.rb:103 # users/index.html.erb display user status displays the user's status with a speech bubble
rspec ./spec/views/users/index.html.erb_spec.rb:18 # users/index.html.erb advanced filtering should display an advanced filter form
rspec ./spec/views/users/index.html.erb_spec.rb:32 # users/index.html.erb advanced filtering timezone select is populated with titles
rspec ./spec/views/users/index.html.erb_spec.rb:25 # users/index.html.erb advanced filtering projects select is populated with project titles
rspec ./spec/views/users/index.html.erb_spec.rb:62 # users/index.html.erb renders the users count in the sentence above shows different sentence if invalid users count
rspec ./spec/views/users/index.html.erb_spec.rb:56 # users/index.html.erb renders the users count in the sentence above has valid users count
rspec ./spec/controllers/users_controller_spec.rb:10 # UsersController#index should assign the results of the search to @users
rspec ./spec/services/karma_calculator_spec.rb:10 # KarmaCalculator for new members should assign 0 karma points to members who have not yet been created
rspec ./spec/services/karma_calculator_spec.rb:23 # KarmaCalculator for existing members for old members should assign karma points to members
rspec ./spec/services/karma_calculator_spec.rb:34 # KarmaCalculator for existing members for members attending hangouts gives points for hangout participation
rspec ./spec/views/layouts/application.html.erb_spec.rb:73 # layouts/application.html.erb should return 200 for all link visits
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which were all variations on the expected error message of:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;column users.karma_points does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We started by fixing up the Karma controller so that it switched its references from &lt;code&gt;user.karma_points&lt;/code&gt; to &lt;code&gt;user.karma.karma&lt;/code&gt;.  That latter looked silly so we switched it to &lt;code&gt;user.karma.total&lt;/code&gt; with another migration:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RenameKarmaKarmaToTotal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;rename_column&lt;/span&gt; &lt;span class="ss"&gt;:karmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:total&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reaching through from one object into another like &lt;code&gt;user.karma.total&lt;/code&gt; is a Demeter violation.   We shouldn&amp;rsquo;t know or assume too much about the objects we are collaborating with, but we knew our next ticket was going to refactor away the KarmaCalculation service, so we didn&amp;rsquo;t want to get pulled in to fixing that immediately.  After getting the KarmaCalculation specs to pass we had a few views to update to use &lt;code&gt;user.karma.total&lt;/code&gt; instead of &lt;code&gt;user.karma_points&lt;/code&gt; and they were soon passing.  The user controller needed a slightly more complex change from:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;per&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allow_to_display&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;karma_points: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;per&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:titles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allow_to_display&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'karmas.total DESC'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to cope with the fact that we were now ordering the main user view based on a field in another table.  That done, all the specs were passing, and we ran the cukes to see if any of the features were broken. Before we did that I had half a mind to start deleting the view specs that were failing, and even the controller specs.  I&amp;rsquo;ve lost any motivation to write view and controller specs that effectively unit test parts of the view and controller in isolation.  It feels like the features and integration tests will check that logic, and that &amp;ldquo;unit&amp;rdquo; tests of controllers and views encourage logic to appear in those areas when all complex stuff should be being pushed into models, services, gems and remote services where possible.  That&amp;rsquo;s what we&amp;rsquo;ve done with some success in our work on ProjectScope.&lt;/p&gt;

&lt;p&gt;However, the fixes for the specs had been relatively simple, and the fear of deleting something that might have use in the future (dangerous paranoia?) kept me from hacking and slashing.  The idea of more extensive unit tests of controllers and views is that they can find you problems faster than the slow running acceptance tests.  Ironically our acceptance tests don&amp;rsquo;t take much longer to run than our specs, and anyway for all this to work you need to trust that your specs are testing the right things.  In fact we did get a failure in the cukes, which was related to the way we were setting up our default user objects - there was no Karma object associated with them by default, so calling &lt;code&gt;user.karma.total&lt;/code&gt; was failing with no method &lt;code&gt;total&lt;/code&gt; on nil object.  Our Demeter violation was biting us.&lt;/p&gt;

&lt;p&gt;Now we could have been less confident and fixed this with &lt;code&gt;user.karma.try(:total)&lt;/code&gt; or even the new ampersand dot syntax &lt;code&gt;user.karma&amp;amp;.total&lt;/code&gt;, but given that we were already uncomfortable with the Demeter violation, we went another, perhaps more confident, route.  We TDD&amp;rsquo;d a new method on the User object:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#karma_total'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns 0 when user initially created'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma_total&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'once associated karma object is created'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;karma: &lt;/span&gt;&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns non zero'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma_total&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Effectively we created the sort of method we had before, i.e. &lt;code&gt;karma_points&lt;/code&gt; but called it &lt;code&gt;karma_total&lt;/code&gt;, and the user object could now confidently return the Karma total under any circumstances:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;karma_total&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much more confident, and now everything was green.  For a long time I&amp;rsquo;ve been talking about how much I like Objective-C&amp;rsquo;s set up where calling a method on nil just results in nil.  The ampersand dot in Ruby promises that much, but now I&amp;rsquo;ve been infected by Avdi&amp;rsquo;s &amp;ldquo;confidence&amp;rdquo; meme.  I also just watched this talk by Peter Bhat Harkins, which was almost going to be called &amp;ldquo;kill nil&amp;rdquo;:&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tg3YjMqWNj0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;and I&amp;rsquo;m starting to see nil as evil.  Well at least something to address by avoiding passing it around rather than using &lt;code&gt;try&lt;/code&gt; or ampersand-dot which screws with our readability.  Anyhow we&amp;rsquo;d managed to follow a drive-by methodology, doing the minimum work necessary to get our pull request out.  We&amp;rsquo;d fixed the Demeter violation for &amp;ldquo;getting&amp;rdquo; Karma where it was breaking our feature tests, but we left the Demeter violation for &amp;ldquo;setting&amp;rdquo; Karma in the KarmaCalculation service, which we were planning to refactor in the next ticket.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d finished early so we got in some quick PRs to upgrade to Ruby 2.3.1, remove some old Vagrant scripts and started on a new ticket for improving hangout telemetry.  A reasonable afternoon&amp;rsquo;s work.  We&amp;rsquo;d ducked and dived and at the end of it I felt we&amp;rsquo;d taken a reasonable middle road down the profusion of coding and project heuristics that infest my mind.  Let&amp;rsquo;s see what tomorrow brings :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fPGJ5lon92M"&gt;Pairing Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r6pWaOVKyRM"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Fallow Day</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/28/fallow-day/"/>
    <id>http://blog.url.com/2016/09/28/fallow-day/</id>
    <published>2016-09-28T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today was a fallow day.  I&amp;rsquo;d been knocked back with a fever, sore throat and tummy trouble from the latest virus doing the rounds at my kids &amp;ldquo;Virus Exchange Camps&amp;rdquo;, &amp;hellip; sorry, I mean schools.  I&amp;rsquo;ve no idea if anyone else talks about fallow days, but there&amp;rsquo;s this expression about leaving a field to go fallow.  In crop rotation you plant different crops in each field each year and then don&amp;rsquo;t plant anything every few years to avoid exhausting the soil.  I came up with the expression during my Ph.D. to mark those days when I didn&amp;rsquo;t seem to get anything productive done - usually because I was sick, or more commonly, slightly hung-over.&lt;/p&gt;

&lt;p&gt;So I had spent most of the morning asleep, and didn&amp;rsquo;t have the energy to pair, did a bit of admin work - catching up on a few long outstanding things - and later in the day I managed to spend a little time coding in node/express/mongo to see if I could get a little something set up that might form the basis of the async voting bot, or planning poker agent that we had been thinking about.  Let me explain, planning poker is this process of simultaneously voting on the complexity/difficulty of a task in a meeting.  So the task might be, add a new data report to the statistic page, and you might have 5 people and they would do like rock, paper, scissors with their fingers, except with numbers, e.g. 1, 2 or 3 and then the five people would all show their fingers at the same time and you&amp;rsquo;d get votes for say 1, 2, 2, 2, 3, and then you might ask the people voting against the majority why they thought that things were more or less complicated and then after some limited discussion you might revote or the outliers will agree to match the majority.&lt;/p&gt;

&lt;p&gt;The value generated from that voting can then be attached to a ticket associated with an issue, and then that gives someone who&amp;rsquo;s going to start on that task an idea of what they are taking on.  It also allows tools like Pivotal Tracker to help with estimating when a variety of tasks will be completed.  Another central part of the voting is that it exposes differences in assumptions between team members, and provides a structured way to get to the bottom of them relatively quickly.  We&amp;rsquo;ve been doing online synchronous voting in AgileVentures projects for a long time.  We tend to use a hangout to coordinate the meeting and then do the simultaneous voting in chat.  You can often see the traces of this in the different AgileVentures chat rooms on Slack, particularly since we realised that the Google Hangout chat didn&amp;rsquo;t persist.&lt;/p&gt;

&lt;p&gt;Scroll forward, there are some projects where it&amp;rsquo;s difficult to get people together at the same time, even in a remote hangout.  Also voting on a load of tasks, one after the other, can be somewhat tedious, so we&amp;rsquo;re now experimenting with asynchronous remote voting, and for the last two weeks I&amp;rsquo;ve been playing the part of a hypothetical chatbot for the LocalSupport and WebSiteOne projects where I post something like this in the relevant Slack channel:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel new async vote on "make doit mentions in map key be hyperlinks" https://www.pivotaltracker.com/story/show/122461371, discuss here, or in ticket and then DM me your vote of 1 2 or 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then I&amp;rsquo;ll get individual DMs from developers like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Vote for https://www.pivotaltracker.com/story/show/122461371:   1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or sometimes with a bit of explanation&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.pivotaltracker.com/n/projects/742821/stories/122461371 seems like a 2, because it requires a bit of front-end and a bit of back-end, which means testing on both those fronts too
i’m not sure who wants to do this story, but my coworker seems interested in pairing with me on it
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I guess the hyperlinks issue  for "do-it" is not your run of the mill "link_to" type. It will involve JS so if that s the case I say 3.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and there might be some discussion in the ticket itself, but as I get votes I&amp;rsquo;ll post into the Slack channel like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@here we have 2 votes for "make doit mentions in map key be hyperlinks" https://www.pivotaltracker.com/n/projects/742821/stories/122461371
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I might also prompt the channel if we don&amp;rsquo;t get any updates for a while:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel we have two votes on https://www.pivotaltracker.com/story/show/122461371, we need one more vote to move forward - discuss here, or in ticket and then DM me your vote of 1 2 or 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then once I have a sufficient number of votes (currently 3) I post the results to the channel:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel vote on https://www.pivotaltracker.com/n/projects/742821/stories/122461371 "make doit mentions in map key be hyperlinks" complete - @decareano 3, @johnnymo87 2, @marouen 1 - I'm just imagining that this is just a simple `link_to` or am I missing something - @johnnymo87 @decareano any thoughts on why this is more complex than a 1?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then we have a discussion in the Slack channel (or it could be in the ticket):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tansaku, did you read my comment in my vote? I had the same thought as @marouen but in reverse. Anyway, if it's a link_to my vote is 1.
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@decareano thanks for your vote - we now have two votes of 1 for https://www.pivotaltracker.com/story/show/122461371 "make doit mentions in map key be hyperlinks" and a 2 from @johnnymo87 - @johnnymo87 happy to revise to 1 or is there some aspect of this we've missed?
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;oh, i thought that part of the UI was done in js. But I looked it up, and it’s not. I’ll revise to a 1, @tansaku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I set the estimate on the ticket and we start again:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;okay @here so that story is unanimous as a 1

@channel we have a new async vote on https://www.pivotaltracker.com/story/show/131062023 "Refactor Build marker service" - please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer :slightly_smiling_face:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that was kind of a trivial example, but actually that vote did expose some misconceptions about the ticket in question.  I think these async votes are quite good for those projects where the team members can&amp;rsquo;t make the synchronous hangouts.  There is a fair amount of logistical overhead for me running it (which could be automated into a bot) and also since I&amp;rsquo;m the &amp;ldquo;bot&amp;rdquo; it&amp;rsquo;s a bit unfair for me to vote.  If we had this all automated I could vote too, and things could proceed a little faster.  Although of course we have to consider the time it takes to automate, and whether the automating would throw the baby out with the bathwater.&lt;/p&gt;

&lt;p&gt;Others have already expressed concern that the asynchronous nature of the vote would remove the critical discussion portion that happens in the synchronous meetings.  It may be we are losing something, but by running this demo with me as bot, we certainly continue some level of discussion.  Another concern is that switching to a bot, people would not be as expressive to the bot as they are to me, as bot.  A sort of human-y thing.  One solution to that might be to dress the bot up as me, which is what we do for pinging hangout notifications where the bot takes on the logo of whoever starts the hangout.&lt;/p&gt;

&lt;p&gt;Unfortunately I think Slack still does not support bot DM-ing.  At least you can DM, but then all the responses go to the slack bot channel - you can&amp;rsquo;t quite continue a one on one conversation with a bot.  Anyway, the process has also allowed me to tweak the &amp;ldquo;interface&amp;rdquo;, in that chats with developers have raised a few points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always include a link to the ticket in any post&lt;/li&gt;
&lt;li&gt;Always include the title of the ticket in any post&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s helpful to include instructions for newcomers like: &amp;ldquo;please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I&amp;rsquo;ve validated that the functionality is getting some use.   So with all that in mind I started looking at test driving a Node/Express app.  I&amp;rsquo;m pretty sure I could write something faster in Ruby/Sinatra, but there&amp;rsquo;s also this idea that we need to diversify the apps we&amp;rsquo;re using in AgileVentures to appeal to a wider range of developers.  Also after our AgileBot experiences, I&amp;rsquo;m keen to see if stripping away Hubot and CoffeeScript, whether a plain Node/Express app will be more manageable.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve TDD&amp;rsquo;d Node/Express before, but it&amp;rsquo;s been a year or so, and I want to be up with the best practices, so I was having a look around for tutorials and things.  I found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://devcenter.heroku.com/articles/mean-apps-restful-api&lt;/li&gt;
&lt;li&gt;https://semaphoreci.com/community/tutorials/a-tdd-approach-to-building-a-todo-api-using-node-js-and-mongodb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now interestingly the Heroku one was appealing because getting something up onto a stable endpoint is critical, but it wasn&amp;rsquo;t TDDd, so I went for the latter, which I ultimately got working, but was a bit disappointing, because it wasn&amp;rsquo;t actually TDD.  It had tests, yes, but the functionality was not test driven.  I notice now that SemaphoreCI is paying $200 a pop for people to write tutorials &amp;hellip; In the author&amp;rsquo;s favour, they did link to the complete code at https://github.com/rajzshkr/todoapi, which is what allowed me to get things working.  The tutorial itself was flawed on the following points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;different code from the working example&lt;/li&gt;
&lt;li&gt;tests introduced after the code they were testing, i.e. not TDD&lt;/li&gt;
&lt;li&gt;bits of code in tutorial not associated with particular files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of working through the tutorial I did get mongodb installed and running, discovered some &lt;a href="https://expressjs.com/en/guide/debugging.html"&gt;express debugging tricks&lt;/a&gt;, and spent most of my time working out that the Postman Chrome plugin that I was using to test the POST endpoint needed to provide a raw post body to be handled by this app; form-data and x-www-form-urlencoded options just showing up as a blank body.  Frustratingly that last item burned the time I might have used deploying to Heroku.  So by the end I was looking at a more delineated app structure than I had previously seen with express, involving models from Mongoose (MongoDB Schema module), and controllers and a router, all in separate files.  Ironically I don&amp;rsquo;t know how widespread that particular layout is, although if I know the node ecosystem, there may not be any accepted standard yet.&lt;/p&gt;

&lt;p&gt;The tutorial itself didn&amp;rsquo;t actually provide any end to end tests, only unit tests.  The repo showed a controller test and an end to end test (they called it integration) using the supertest module.  I found some other blogposts on that and on an alternate testing module called hippie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://www.joyent.com/blog/risingstack-writing-testable-apis-the-basics&lt;/li&gt;
&lt;li&gt;http://developers.redhat.com/blog/2016/03/15/test-driven-development-for-building-apis-in-node-js-and-express/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was reflecting that perhaps that&amp;rsquo;s where I should have started with a slack bot, and I found a tutorial on that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but we&amp;rsquo;re over our integration limits for our AV slack, and I started to think that rather than worrying about the technical details, I should get the engine for the bot working, independent of any of the interfaces (InsideOut again), and so I finished up with writing down some stories about the system, which you already understand because the first part of this blog lays them out, but just in case you&amp;rsquo;re interested, here were my summary notes from the day&amp;rsquo;s hacking:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;planning poker bot&lt;/p&gt;

&lt;p&gt;/bot vote &lt;ticket url&gt; # optional ticket url&lt;/p&gt;

&lt;p&gt;&amp;ndash;&amp;gt; announces - we have async vote on ticket url (first from repo if not specified) &amp;ldquo;title&amp;rdquo;, please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer :slightly&lt;em&gt;smiling&lt;/em&gt;face:&lt;/p&gt;

&lt;p&gt;then needs to be able to receive inputs from people - slack DMs? or expose web interface (could do react there?) and then post back to slack &amp;hellip;&lt;/p&gt;

&lt;p&gt;whole thing could be non-slack to start with to reduce complexity?&lt;/p&gt;

&lt;p&gt;people vote on tickets&lt;/p&gt;

&lt;p&gt;so we have an AsyncVote, which consists of a ticket with a title and url, and then there are a number of votes, which have a value, and come from an individual and might have an explanation, and when the number of votes reaches a set value (e.g. 3) then the full results are revealed, and the ticket value is set if there is agreement, or we prompt more discussion &amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I&amp;rsquo;ve come round to thinking should I just TDD something in node that will operate on the command line, and then build some different interfaces on top of it?  I&amp;rsquo;d love to have time to do both a node/express and a ruby/sinatra version to show the complete parallels and/or lack of them between the two &amp;hellip; let&amp;rsquo;s see when I have another fallow day :-)&lt;/p&gt;

&lt;p&gt;Related Code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tansaku/planning_poker_bot"&gt;https://github.com/tansaku/planning&lt;em&gt;poker&lt;/em&gt;bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Dodging a Bullet</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/27/dodging-a-bullet/"/>
    <id>http://blog.url.com/2016/09/27/dodging-a-bullet/</id>
    <published>2016-09-27T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So Monday was the day to see if our new domain model components would ease the process of delivering a new feature. As warm up I did a quick refactoring requested by Raoul on our Karma calculation changes.  There was the possibility of re-using some cucumber steps.  We&amp;rsquo;d submitted the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run rake task "([^"]*)"$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;    
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for calculating karma points$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"karma_calculator"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and Raoul was suggesting re-using the the first step.  Looking it over I actually modified it to the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for calculating karma points$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"karma_calculator"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for fetching github commits$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"fetch_github_commits"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the idea that the high level cucumber scenarios should be as readable English as possible, preferring &lt;code&gt;When I run the rake task for calculating karma points&lt;/code&gt; to &lt;code&gt;When I run the rake task for &amp;quot;karma_calculator&amp;quot;&lt;/code&gt;.  Trivial?  Maybe.  I&amp;rsquo;m conflicted.  These are related to cucumber stories we have in our dev-ops section which I&amp;rsquo;m hoping provides some testable documentation of the operational aspect of the application that&amp;rsquo;s used by app admins rather than end users.  I&amp;rsquo;m also going with not re-using step-definitions within step-definitions.  Two more heuristics there to add to the list.&lt;/p&gt;

&lt;p&gt;I mention this warm up partly because I feel like there&amp;rsquo;s clean up for the Cucumber stories we wrote on Monday.  As it happens, Raoul approved that above change and merged the new Karma calculation PR in, making it possible that we could get started on refactoring work there.  But anyhow, here, ultimately, are the Cucumber scenarios that defined our Monday&amp;rsquo;s work:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User is on free tier and looking at own page
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User is on free tier and looking at other persons profile page
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User upgrades to premium from free tier
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We didn&amp;rsquo;t get to these all at once.  We&amp;rsquo;d put the fruits of our InsideOut work aside (the new domain elements Subscription and PaymentSource) and reverted to OutsideIn.  This was the set of experiences we wanted for the end user, in association with the &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1261"&gt;ticket&lt;/a&gt; we were working on. We&amp;rsquo;d actually started with two scenarios, one about upgrade to premium and the other about upgrade to premium plus, and in my mind had been the idea that we would ultimately make both types of upgrade work using our new domain entities.&lt;/p&gt;

&lt;p&gt;However that was actually scope creep off the ticket, and in fact there was a chunk of work specific to the ticket (upgrade from basic to premium) that could be implemented in the existing system without any reference to the new domain entities, so we got that done.  It was mainly a change to the view to add a report about the user&amp;rsquo;s current membership status, and an upgrade button:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if current_user &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; current_user == presenter.user %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= current_user.membership_type %&amp;gt; Member&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% unless current_user.membership_type == 'Premium' %&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charges_path(plan: 'premium') do %&amp;gt;
                  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
                          &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
                          &lt;span class="na"&gt;data-description=&lt;/span&gt;&lt;span class="s"&gt;"A month's subscription"&lt;/span&gt;
                          &lt;span class="na"&gt;data-amount=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt;
                          &lt;span class="na"&gt;data-currency=&lt;/span&gt;&lt;span class="s"&gt;"GBP"&lt;/span&gt;
                          &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt;
                          &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Premium Membership"&lt;/span&gt;
                          &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

              &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m itching to pull this into a partial (&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1306"&gt;refactoring ticket&lt;/a&gt;), and I also worry we&amp;rsquo;re not being confident enough with our logic - of which there is also too much in the view.  Devise&amp;rsquo;s &lt;code&gt;current_user&lt;/code&gt; method is maybe the source of our timidity, since if no one is logged in, it returns nil.  Perhaps it would be better if it returned an AnonymousUser object.  Michael started looking into how we might override it, but I demurred, writing an email to Stripe about our new approach of locking the data-locale to &amp;ldquo;en-US&amp;rdquo;.  All that was actually after we&amp;rsquo;d dropped to the RSpec level to create the necessary supporting operations for the view fragment above.  Let&amp;rsquo;s just take a look at them:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#membership_type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns membership type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Basic'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'premium member'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

      &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;stripe_customer: &lt;/span&gt;&lt;span class="s2"&gt;"sdfdfds"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns premium'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="n"&gt;membership_type&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Basic"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="s2"&gt;"Premium"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally a little addition to the charges controller, so that when users sign up for premium their customer id is stored in the user table:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="vi"&gt;@plan&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_charge_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upshot of which was that using only the existing aspects of the system the premium users would see their status on their profile page, and non-premium users would see the upgrade button.  It was all working without the aid of the new domain entities.  As I mentioned above, Michael and I had other concerns with our implementation, but with my eye on the clock I suggested we get this in as a pull request, and then use the new domain entities to support work on a subsequent &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1303"&gt;ticket of allowing premium users to upgrade to premium plus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had other conflicts dripping out of me, such as whether we should be testing Stripe differently (webmock?) and whether we should be making our scenarios more declarative.  I guess part of the challenge with our increasing list of heuristics for good coding and good project management is that it can feel like you are being pulled in multiple directions at once, and you can be forgiven for a kind of paranoia about which really is the most important issue to work on first.&lt;/p&gt;

&lt;p&gt;Submitting the PR for just the above code involved pulling out the commits for the new domain model entities.  One thing that was easy to prioritise for me was to put only the smallest set of necessary elements in the pull request.  I didn&amp;rsquo;t want Raoul&amp;rsquo;s to get distracted during his code review by having a set of un-used domain entities in the incoming code.  Michael found a &lt;a href="http://stackoverflow.com/a/1994491/316729"&gt;cool technique for cherry picking a set of commits&lt;/a&gt; and we got in a PR with just the code above, and moved the domain entities onto a new branch associated with the ticket for creating the premium plus upgrade button.  Will we fall foul of premature refactoring?  Or did we just dodge a bullet?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty clear to me that the current stripe_customer field on user can&amp;rsquo;t support information about different membership plans.  Hopefully our InsideOut work will bear fruit in the next session!  Would it be too much to hope that we&amp;rsquo;ll have dodged one bullet and be ready to unleash some of our own? :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UprAXzePQmo"&gt;Pairing on the above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JPvkCffsHOo"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Confident Coding</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/26/confident-coding/"/>
    <id>http://blog.url.com/2016/09/26/confident-coding/</id>
    <published>2016-09-26T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Friday I tried to improve on Thursday.  I proposed to Michael that we try to rotate driver/navigator roles more frequently and that we put aside the work on the Karma calculation; instead focusing on the domain model for the Premium members.  Michael had solo&amp;rsquo;d the creation of a cuke for a new Karma calculation rake task that would complement removing the &lt;code&gt;after_validation&lt;/code&gt; hook from the User object.  Part of me was desperate to continue battling with the Karma calculation, but I convinced myself it would be better to leave that as a PR, get feedback from Raoul in the meantime, and not continue building on that part of the system until the PR was merged.&lt;/p&gt;

&lt;p&gt;I think I was slowly &lt;a href="https://blog.craftacademy.se/let-go-of-the-banana/"&gt;letting go of a banana&lt;/a&gt; which is sometimes very challenging when you are a simple monkey like me; but I was coming to the conclusion I should put down that banana containing coconut and get some distance from it.  That coming back to it in a few days might yield some better approaches.  Or at least the realisation that the path I thought was the good one, really was a good one; or that something more important might come up in the meantime :-)&lt;/p&gt;

&lt;p&gt;So we switched to the Premium members, and again I noticed we didn&amp;rsquo;t have tickets for several things that we&amp;rsquo;d been thinking about.  Specifically &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1299"&gt;refactoring Stripe components out of the user table&lt;/a&gt; and &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1300"&gt;automating Premium benefits&lt;/a&gt;.  I wanted to take a leaf out of Avdi Grimm&amp;rsquo;s &amp;ldquo;Confident Ruby&amp;rdquo; book and impose a solid narrative on the next piece of work we would do.  We&amp;rsquo;d been tripped up badly the day before with legacy factories, tests and models, so I thought we needed a bit of relatively smooth sailing to boost our spirits.&lt;/p&gt;

&lt;p&gt;Smooth sailing can never be guaranteed of course.  You never know when a bug in a new version of a library is going to lead you up the garden path (VCR!), although if you can release your grip on the bananas then you might avoid being pulled too far off track.  Still, Avdi makes a point about a &amp;ldquo;MacGyver Method&amp;rdquo; where you end up just using the tools that are lying around rather than telling the story you want to tell.  That happened to us with the legacy components in the Karma system where we burned a lot of time deciphering those components, rather than telling the story we wanted to about Karma.&lt;/p&gt;

&lt;p&gt;So we started with the domain model for the Premium members.  This is uncharacteristic for me.  I&amp;rsquo;m usually all about defining the acceptance tests based on customer stories, and extracting the domain model later.  Outside-in, rather than Inside-out.  In my defence we&amp;rsquo;d done Outside-in when driving the creation of the credit card payment functionality for Premium and PremiumPlus subscriptions.  We&amp;rsquo;d already validated that at least a few people would pay for premium services.  I&amp;rsquo;m suspicious of extensive domain models in a context when it&amp;rsquo;s not clear that the domain is of interest to anyone.  Since validating the model, I wanted to start integrating Premium through the site more extensively, and that seemed like a good time to get our domain assumptions written out.&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t necessarily the best place to start, but we were looking at the DB schema considering the different parts we could pull out of the User model:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;force: :cascade&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"encrypted_password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"reset_password_token"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"reset_password_sent_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"remember_created_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;  &lt;span class="s2"&gt;"sign_in_count"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"current_sign_in_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"last_sign_in_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"current_sign_in_ip"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"last_sign_in_ip"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"created_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s2"&gt;"updated_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"first_name"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"last_name"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt;  &lt;span class="s2"&gt;"display_email"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"youtube_id"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"slug"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt;  &lt;span class="s2"&gt;"display_profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;float&lt;/span&gt;    &lt;span class="s2"&gt;"latitude"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;float&lt;/span&gt;    &lt;span class="s2"&gt;"longitude"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"country_name"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"city"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"region"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"youtube_user_name"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"github_profile_url"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt;  &lt;span class="s2"&gt;"display_hire_me"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;     &lt;span class="s2"&gt;"bio"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt;  &lt;span class="s2"&gt;"receive_mailings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;  &lt;span class="s2"&gt;"karma_points"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"country_code"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;  &lt;span class="s2"&gt;"timezone_offset"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;  &lt;span class="s2"&gt;"status_count"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;   &lt;span class="s2"&gt;"stripe_customer"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Part of our recent focus had been on how we could reduce bloat on this table.  Adding the &lt;code&gt;stripe_customer&lt;/code&gt; field had made us feel a little queasy.   However actually moving payment info or Karma wasn&amp;rsquo;t going to reduce bloat.  A real impact would require pulling out an Address or SignIn class.  Yet it wasn&amp;rsquo;t clear that either of those latter two would yield any short-term business value.  It&amp;rsquo;s a bit like a game of Jenga.  There are some parts of the structure that if you pull at will cause a lot of blocks to come crashing down.  At least pulling out the payment and premium elements to other models would allow those parts of the system to evolve without further increasing the technical debt associated with the User table.&lt;/p&gt;

&lt;p&gt;Maybe we should have been using whiteboard software or pencil and paper, but I found myself writing the following with a few changes coming here and there:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;subscriptions&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;  &lt;span class="s2"&gt;"user_id"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;  &lt;span class="s1"&gt;'type'&lt;/span&gt;  &lt;span class="c1"&gt;# premium, premiumplus&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt; &lt;span class="s1"&gt;'payment_source_id'&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt; &lt;span class="s1"&gt;'current'&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt;  &lt;span class="s2"&gt;"signed_up_at"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s1"&gt;'cancelled_at'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;payment_source&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;  &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="c1"&gt;# stripe, craft_academy&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;  &lt;span class="s1"&gt;'payment_id'&lt;/span&gt; &lt;span class="c1"&gt;# stripe =&amp;gt; stripe id ; craft_academy =&amp;gt; ??&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="s1"&gt;'expires_at'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the video to follow how this evolved from one model to three models and then back to two.  However I did feel uncomfortable that we were being too specific at this level of ruby database instructions, so I pulled that snippet into a text document and re-framed it in terms of Ruby objects:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscription&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;AR&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:payment_source&lt;/span&gt;

  &lt;span class="c1"&gt;# type "premium, premiumplus"&lt;/span&gt;
  &lt;span class="c1"&gt;# active/current&lt;/span&gt;
  &lt;span class="c1"&gt;# started_at, ended_at&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentSource&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="no"&gt;AR&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:subscription&lt;/span&gt;

  &lt;span class="c1"&gt;# type 'CA', 'Stripe'&lt;/span&gt;
  &lt;span class="c1"&gt;# third_party_id&lt;/span&gt;
  &lt;span class="c1"&gt;# expiry?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe we should have been writing domain model narrative in English.  Clearly we were in danger of having the database, or Rails tools infect our story.  That said I think the Rails class description provides a pretty high level language to talk about relationships between model entities.  We had settled on the idea that Users could have Subscriptions, which could be of different types (e.g. Premium or PremiumPlus) and so Subscriptions would belong to Users.  Subscriptions would also have PaymentSources which might be Stripe (credit cards) or CraftAcademy (the bootcamp that bundles AV Premium with their course).  We were also thinking about Subscriptions having start and end times, and the possibility of PaymentSources having expiry dates.  I felt we were starting in that direction of scope creep.  I wrote out the following features that we were thinking about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key Feature - &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1261"&gt;allowing users to change subscription levels&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;requires research on how stripe handles change in subscription&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Future feature - expiring subscriptions&lt;/li&gt;
&lt;li&gt;Related features

&lt;ul&gt;
&lt;li&gt;when subscribing your stripe customer id should be updated&lt;/li&gt;
&lt;li&gt;exposing change credit card functionality in individual page settings &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seemed clear to me that expiring subscriptions should be put off to future work.  Related features could be put to the side given that we were happy that the domain model was compatible.  So then we used RSpec to test drive our domain model elements.  I&amp;rsquo;ll just show the Subscription specs here because the principle is the same for PaymentSource.  I was also quite pleased that we did actually manage to stay behind the tests in terms of only adding application code or migrations that made tests pass.  Here&amp;rsquo;s the Subscription Spec:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;shared_examples&lt;/span&gt; &lt;span class="s1"&gt;'a subscription'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;belong_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;have_one&lt;/span&gt; &lt;span class="ss"&gt;:payment_source&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'has the correct type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;validate_presence_of&lt;/span&gt; &lt;span class="ss"&gt;:started_at&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'has ended_at'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ended_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s1"&gt;'a subscription'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s1"&gt;'a subscription'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;PremiumPlus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'PremiumPlus'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s1"&gt;'a subscription'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which generates output like this for each plan:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Subscription
  behaves like a subscription
    should validate that :started_at cannot be empty/falsy
    should have one payment_source
    has the correct type
    should belong to user
    has ended_at
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and is supported by the following app code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscription&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
  &lt;span class="n"&gt;validates_presence_of&lt;/span&gt; &lt;span class="ss"&gt;:started_at&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:payment_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class_name: &lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Premium&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Subscription&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PremiumPlus&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Subscription&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this migration:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddSubscriptions&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:subscriptions&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="ss"&gt;:started_at&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="ss"&gt;:ended_at&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;add_reference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscriptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The experience of creating all the above (and similar for PaymentSource) was pretty pleasant.  We were rotating driver/navigator roles fast, relying only on code we were creating ourselves, and imposing a strong narrative on the domain model, the tests and so forth.  We used Single Table Inheritance (STI) to model some important domain entities with a minimal number of tables, and shared examples in RSpec to DRY out our specs.  Things got a shade more complex for PaymentSource, which we stuck in a module to avoid some naming conflicts:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PaymentSource&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentSource&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:subscription&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CraftAcademy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stripe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was pretty much the smooth sailing the doctor had ordered.  We were feeling confident in our coding.  Some wrinkles were that RSpec seemed very slow to load.  Maybe we need to upgrade the gem, use the Spring preloader or something?  Writing this out I can see that there are ways that the models will need to evolve in terms of price info (currently stored on Stripe, do we need to import?) and so forth, but the real test will be this week when we try to use this domain model addition to refactor the stripe customer id out of the user table, and support the appearance of membership upgrade buttons on the individual members profile pages.  Will our confident coding fall apart under the strain?  Will all this domain model navel gazing turn out to be a waste of time and we really should have started with acceptance tests and user stories?  Let&amp;rsquo;s see &amp;hellip;&lt;/p&gt;

&lt;p&gt;Related videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pXGkwvF_UH8"&gt;Pairing on the domain models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QIn_wN2VE4k"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Longer than Expected</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/23/longer-than-expected/"/>
    <id>http://blog.url.com/2016/09/23/longer-than-expected/</id>
    <published>2016-09-23T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Adding the function to give Karma credit for attending hangouts took longer than expected.  Ironically spiking it had been fast, but adding a test for it was time consuming and frustrating.  I&amp;rsquo;m trying to dissect why that was.  Looking back I can see a few things that caused us to spin our wheels:&lt;/p&gt;

&lt;p&gt;1) the EventInstance FactoryGirl was creating a participants structure that was different to our assumptions
2) the &lt;code&gt;after_validation&lt;/code&gt; hook on user causes the Karma calculation to take place during FactoryGirl object creation
3) the EventInstance FactoryGirl was creating an additional user object
4) the version of FactoryGirl we are on (4.5) does not &lt;a href="https://robots.thoughtbot.com/getting-sequential-a-look-into-a-factory-girl"&gt;reset sequence integers between test runs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a quick look at the original EventInstance FactoryGirl factory:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="ss"&gt;:participant&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;displayName: &lt;/span&gt;&lt;span class="s2"&gt;"Participant_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s2"&gt;"youtube_id_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;isBroadcaster: &lt;/span&gt;&lt;span class="s1"&gt;'false'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="ss"&gt;:broadcaster&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;displayName: &lt;/span&gt;&lt;span class="s2"&gt;"Broadcaster&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s2"&gt;"youtube_id_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;isBroadcaster: &lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:event_instance&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;transient&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
      &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"uid_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"Hangout_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"Category_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;hangout_url&lt;/span&gt; &lt;span class="s2"&gt;"http://hangout.test"&lt;/span&gt;
    &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:yt_video_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"yt_video_id_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;project&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;

    &lt;span class="n"&gt;participants&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="ss"&gt;:broadcaster&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="ss"&gt;:participant&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; UTC"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; UTC"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the creation of the participants field to be an array consisting of a broadcaster and a participant.  Notice also the use of sequences to generate that participant and broadcaster.  That&amp;rsquo;s a custom structure that&amp;rsquo;s only somewhat related to what comes back from the database in the real system.  Without going into all the details I think we fell a foul of working with a legacy test and legacy object that had more interrelationships than we expected.  It&amp;rsquo;s not quite a mock train wreck as there are no mocks here.  Effectively what we were working on, after our acceptance test of pulling some Karma data into a new AR model, was an integration test, which had more moving parts than we anticipated.&lt;/p&gt;

&lt;p&gt;It makes me think of Avdi&amp;rsquo;s &amp;ldquo;MacGyver method&amp;rdquo; where we got wrapped up in using the existing tools, rather than writing our own compelling narrative.  My own &amp;ldquo;drive-by&amp;rdquo; coding strategy is often one of just going with the existing grain to make the smallest change possible, so I&amp;rsquo;m definitely one who can get wrapped up in the existing tool set.  Maybe we would have done better to complete the planned refactoring of the EventInstance participants field, which as I mentioned is currently a micro-noSQL database inside our SQL database.&lt;/p&gt;

&lt;p&gt;I think we might also want to look at our pairing strategy.  I think Michael was getting frustrated at the speed with which I window switched from stack trace to code and back again as we tried to hunt bugs through the legacy test infrastructure.  There&amp;rsquo;s the lag of the hangout screenshare as well, but I think it&amp;rsquo;s more an indication of my keyboard hogging.  We seem to have fallen into a pattern of switching roles about once an hour, and I wonder if that&amp;rsquo;s too infrequent.  There are other issues with me having less available time to code due to family commitments.  I wonder if we might benefit from having an enforced 10 min switch as I&amp;rsquo;ve seen in some companies.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also what we are doing to the domain model.  I&amp;rsquo;m still conflicted about the dissonance between the terms &amp;ldquo;EventInstance&amp;rdquo; and &amp;ldquo;Hangout&amp;rdquo;.  EventInstances do represent data from Google Hangouts in our system.  EventInstances is nicely generic - maybe in the future we&amp;rsquo;ll support alternatives to Google Hangouts, but our hangouts are very often associated with events, but not always.  Actually Michael and I mainly pair in spontaneous hangouts that are associated with the project, so EventInstance is a misnomer there.&lt;/p&gt;

&lt;p&gt;We were feeling good about pulling Karma out of the User table, and given that we have a Karma calculator it certainly seems like we are moving towards evolving a Karma entity in our domain.  It occurs to me that all the logic in the KarmaCalculation service could be moved to the Karma model.  Much as I love recombinable services, given that we now have a need to persist the intermediate calculations from the other Karma Calculator, I&amp;rsquo;m moving to think that the sensible next step is a real &amp;ldquo;unit&amp;rdquo; and not &amp;ldquo;integration&amp;rdquo; test of the Karma model so that we can avoid getting bogged down in too much complexity, i.e. dependencies on many other elements of the system.&lt;/p&gt;

&lt;p&gt;Following that logic, it would be nice if the Karma calculation could avoid depending on the structure of the data coming back from the hangout, i.e. that lump of JSON that gets transformed into a ruby data-structure by the serialise method.  That&amp;rsquo;s a bigger operation which might involve developing a domain model like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Participant&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;AR&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:hangouts&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:hangout_events&lt;/span&gt; &lt;span class="c1"&gt;# join at x time, leave at y time&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hangout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;AR&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:participants&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:initiator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class_name: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end of day&amp;rsquo;s pairing we had got the tests green, but not without removing the &lt;code&gt;after_validation&lt;/code&gt; Karma calculation from the User class, and having to adjust a number of other tests to adapt to how we had adjusted the EventInstance FactoryGirl participant model.  Part of the issue there was that the serialise operation gives us &amp;ldquo;indifferent access&amp;rdquo; to the returned data structure, i.e. strings and symbols are interchangeable.  That was only part of the difference between the data structure the Factory was creating and that real data-structure coming back from the DB.  That pushes me to want to refactor away from that, but that&amp;rsquo;s a bigger task&amp;hellip;. &lt;/p&gt;

&lt;p&gt;We were then asking ourselves how to slice and dice to try and stick with our &amp;ldquo;drive-by&amp;rdquo; methodology.  What was the simplest thing we could release?  And what activities should be pushed off into other tickets?  The following three seemed sensible other tickets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove Karma total from user table&lt;/li&gt;
&lt;li&gt;create all the other Karma breakdown elements in Karma table&lt;/li&gt;
&lt;li&gt;ensure that any reference to these throughout codebase is linked correctly to the Karma table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In principle the work of the day could be a PR, and the only additional thing required to release it would be the creation of a separate Karma update task.  We&amp;rsquo;d be losing the feature that Karma would be updated whenever users saved their profiles, but that seems like something we could easily add back in later, without using these dangerous AR lifecycle hooks.&lt;/p&gt;

&lt;p&gt;The real question would be should we get that simpler PR in, and then immediately start more tickets based on it?  The danger there, as we&amp;rsquo;d seen before, is that particularly with the new &amp;ldquo;squash and merge&amp;rdquo; feature on GitHub PRs, building on an unmerged PR would guarantee merge conflicts down the line.  That would seem to point us towards reviewing all the tickets and working on a different corner of the codebase until this got merged.  That feels challenging in that I&amp;rsquo;m now itching to do that bigger participant refactoring, and try and get some clean confident code.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll see - I guess after a day in which a lot of your assumptions are thrown, it makes sense to allow a bit of time for the dust to settle.  Reflect on what worked and what didn&amp;rsquo;t work, and maybe work on something else before coming back to the code face &amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Can't We Go Any Faster?</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/22/cant-we-go-any-faster/"/>
    <id>http://blog.url.com/2016/09/22/cant-we-go-any-faster/</id>
    <published>2016-09-22T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Got the pairing times right today, but didn&amp;rsquo;t get started as early as we could.  Having a family and working from home means that things can easily come up, like suddenly my eldest needs a new school approved calculator which is sold out on Amazon.  Anyway, we managed two and a half hours or so.  The new JavaScript vendor pipeline&amp;rsquo;s looking good due to Michael&amp;rsquo;s solo follow up work.  We created a small flurry of tickets of possible follow up issues.  We were close to sliding into working on them, and in the background Michael actually resolved one issue about un-needed JavaScript files before we&amp;rsquo;d completed an async vote on the subject.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s become increasingly clear to me that it&amp;rsquo;s counter-productive to stand on ceremony with these things.  Running the async votes is definitely an overhead that I would like to automate away, but let&amp;rsquo;s see if perhaps we don&amp;rsquo;t want to return to the kickoff/retro meeting.  I notice Armando Fox&amp;rsquo;s students voting to &lt;a href="http://saasbook.blogspot.co.uk/2016/09/flipped-classroom-no-thanks-id-rather.html"&gt;return to a lecture format&lt;/a&gt;, but that&amp;rsquo;s getting off my main point that if your pair partner or colleague has just got something working, it&amp;rsquo;s not the time to say &amp;ldquo;you should have waited for the vote to complete&amp;rdquo; or make any similar objections.  There are lots of great heuristics like &amp;ldquo;not working on issues that haven&amp;rsquo;t been voted on&amp;rdquo;, but that&amp;rsquo;s not a suggestion, not a law to be enforced.  Working effectively is not about getting everyone to adopt your latest thinking on how things should be done, it&amp;rsquo;s about accepting the way they work and finding a collaborative path.&lt;/p&gt;

&lt;p&gt;I guess some people get away with &amp;ldquo;It&amp;rsquo;s my way, or the highway&amp;rdquo; but that&amp;rsquo;s not much fun, and what I really don&amp;rsquo;t want is to &lt;em&gt;accidentally&lt;/em&gt; go that way.  Anyhow, so I had a backlog of tickets in my mind, which I also got into the issues list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1281"&gt;Relace CoreJS-Typeahead (to remove bower dependency)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1283"&gt;investigate removing or replacing cubeportfolio.js/confy.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1284"&gt;investigate options for other items in vendor/assets/javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1286"&gt;updating installation documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1287"&gt;replacing nearest_timezone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1288"&gt;investigate other possible sources of memory leak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So Michael had removed cubeportfolio.js/confy.js before the dust had settled.  We could have followed up on other items relating to the JavaScript vendor upgrade such as removing the bower dependency, or trying to modularise other libraries, but I was itching to make some different kinds of changes.  I closed out our existing memory investigation ticket and replaced it with two new ones - one for more investigation in general and another for removing a heavyweight gem.  There was also the issue of the install documentation.&lt;/p&gt;

&lt;p&gt;The two other things on my mind were improving our hangout telemetry and the profile of our premium plan.  The former might allow us to better understand how the pairing sessions would go in this next run of the MOOC, while the later might improve our balance sheet. As we investigated, it seemed we didn&amp;rsquo;t have tickets for some of the things that Michael and I had been regularly discussing, specifically for giving members Karma credit for &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1290"&gt;participating in, rather than just starting, hangouts&lt;/a&gt;.  I had been thinking that this would require a refactoring of the way we represented hangout data that would also be part of improving our telemetry (which we also didn&amp;rsquo;t have an explicit &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1291"&gt;ticket&lt;/a&gt; for).  In fact the ticket we did have was focused on improving hangout participant &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1197"&gt;identity tracking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To explain, from our hangout plugin, we get a hangout participants G+ id.  Those AgileVenture members who have authenticated with G+ on our site have a G+ id associated with their account.  For those members we can connect their presence in a hangout with their AV account.  This allows us to display more information about who was in a hangout in the &lt;a href="http://www.agileventures.org/hangouts"&gt;past events view&lt;/a&gt;.  In order to encourage people to link up with their G+ accounts we&amp;rsquo;d already increased the amount of Karma you get for making that connection.  A quick check on the production DB indicated that a third of our members were connected up.  We should have checked that number several months back when we made the change to give us a hint if the change had an impact.  Doh!&lt;/p&gt;

&lt;p&gt;Given that we&amp;rsquo;d had a long period when the G+ signup was not working at all, I was pleasantly surprised to find a third of our members connected, and while I&amp;rsquo;m not sure if that&amp;rsquo;s due to our change to the Karma, or fixing the G+ signup (although I guess I could do more mining to get more hints), it drew me away from the ticket&amp;rsquo;s focus of increasing G+ identity match up.  Or at least it pushed me to say, we have the incentive in place, we&amp;rsquo;ll need to make Karma more visible so that the incentive has greater chance of working.  I threw a load of thoughts about that into the ticket itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] G+ link up might improve if we give more credit for participating in hangouts #1290 potentially helps here&lt;/li&gt;
&lt;li&gt;[ ] perhaps more importantly we need more people to be aware of karma

&lt;ul&gt;
&lt;li&gt;[ ] linking karma number to breakdown on user page #1245&lt;/li&gt;
&lt;li&gt;[ ] breakdown on user page is hidden in sub-tab&lt;/li&gt;
&lt;li&gt;[ ] breakdown doesn&amp;rsquo;t look so nice&lt;/li&gt;
&lt;li&gt;[ ] need to mail members about their karma scores?  slack ping them?&lt;/li&gt;
&lt;li&gt;[ ] tooltips to explain things&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I found myself making tickets that I thought should have already existed (I did search) on these things that Michael and I had been discussing a lot.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1290"&gt;improve hangout telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1291"&gt;give karma credit for participating in a hangout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And Michael also started speculating about further &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1292"&gt;gamification&lt;/a&gt; of Karma, which I&amp;rsquo;d love to get into.  Anyhow, a little playing on the production DB showed that actually we could grab an indication of hangout participation without needing a big refactor (although it might give Avdi a coronary for its timidity):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;EventInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'person'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"103524399391704001670"&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The EventInstance (or hangout) class currently stores a text string representation of the JSON that comes back from the HangoutPlugin, which looks like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"hangoutA749C12C_ephemeral.id.google.com^6285825550"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasMicrophone"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasCamera"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasAppEnabled"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"isBroadcaster"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"isInBroadcast"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"displayIndex"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"108104108523167071445"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"displayName"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Michael C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"https://lh5.googleusercontent.com/-AtamIgns520/AAAAAAAAAAI/AAAAAAAAAAA/4TTnoJlntEM/s96-c/photo.jpg"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="s2"&gt;"qa"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="s2"&gt;"locale"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"qa"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"hangoutEDC38696_ephemeral.id.google.com^4f0e2ab2d8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasMicrophone"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasCamera"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"hasAppEnabled"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"isBroadcaster"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"isInBroadcast"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"displayIndex"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"103524399391704001670"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"displayName"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Sam Joseph"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"https://lh3.googleusercontent.com/-Kt12k8aqqTs/AAAAAAAAAAI/AAAAAAAAAAA/TL0ZFPtM2Tc/s96-c/photo.jpg"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="s2"&gt;"qa"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="s2"&gt;"locale"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"qa"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s stored using the serialise method, so we get back a ruby object, which allows for the above code to work without requiring a parsing step.  Effectively we&amp;rsquo;ve got a micro noSQL database inside our bigger SQL relational database.  The computation over the entire dataset for an individual is not particularly fast, but it doesn&amp;rsquo;t take more than a second, and since we&amp;rsquo;re largely calculating Karma offline, it seems like we could get this into production relatively quickly.&lt;/p&gt;

&lt;p&gt;The logic here is that we want to encourage hangout participation by giving Karmic credit for it, and in particular you&amp;rsquo;ll need to be G+ up&amp;rsquo;d on our site in order to get the benefit, so a potentially happy side effect is an increase in the fidelity of our tracking, and improvements in the results of our data mining.  All this virtuous circle will hopefully just help us to help everyone to help charities, and of course ultimately save the world, haha.  Anyway, just as long as we get to play with cool tech along they way, eh? :-)&lt;/p&gt;

&lt;p&gt;So I was still on the fence about what to do, when Michael pointed out that our Karma overview calculated all this directly in real time and could slow down the load of the user&amp;rsquo;s profile page.  We talked about caching that in the User table.  Felt ill about how bloated that table has got, and the technical debt we were building up, which pushed me up to wanting to work on premium and pull the Stripe components out of the user table; but then I had a breakthrough.  We could pull the karma components into a separate table, cache them all, improve load times on the profile page, and also quickly deliver the incentives we wanted.  I could tell Michael wished I had been able to come to that conclusion without the previous 45 minutes of discussion, but I was still pleased with the tickets we had created and the ideas we had had.&lt;/p&gt;

&lt;p&gt;In the remaining 45 minutes or so we managed to knock off a quick acceptance test driven creation of a separate Karma table. It also involved using a funky delegation pattern:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;

  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;Forwardable&lt;/span&gt;

  &lt;span class="n"&gt;def_delegator&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hangouts_attended_with_more_than_one_participant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;def_delegator&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hangouts_attended_with_more_than_one_participant&lt;/span&gt;

  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m sure there&amp;rsquo;s a tighter way to do that, but it breaks up our mammoth user table, and we can now write a separate test for quickly calculating hangout participation offline, and then get on to the bigger refactoring to see details about when people join hangouts, break the user table up further with better support for premium, and improve the installation documentation.  These are the key things for me in the next few weeks, although they could certainly be derailed if the memory issues turn out to be more serious than we thought.  The question remains, can&amp;rsquo;t we go any faster?  One drag is me spending all this time with my kids.  Maybe I can get them to code for AV too? :-)&lt;/p&gt;

&lt;p&gt;Related videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PliTRMoNrR8"&gt;Pairing part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6zO-FCmJQSk"&gt;Pairing part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_dXb5QASWeU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
