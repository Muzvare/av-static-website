<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-09T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Resilient Code Bases</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/09/resilience/"/>
    <id>http://blog.url.com/2016/11/09/resilience/</id>
    <published>2016-11-09T00:00:00+00:00</published>
    <updated>2016-11-09T09:26:21+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;How to create a resilient code base?  I daily wrestle with the legacy code base of WebsiteOne, wanting to make more changes and but being afraid of tests with strange dependencies, that sometimes don&amp;rsquo;t test the right thing; while others lock in low level behaviour that doesn&amp;rsquo;t connect to high level features that we need any longer.  As Michael says the WebSiteOne codebase is better than many.  At least it has tests and was written with good software engineering principles in mind.  However it was a learning project for many.  A really good question is how to create a resilient code base where the developers are learning as they go?  It&amp;rsquo;s a more general question than you might think since all developers are learning as they go, just that some of them are moving further out of their comfort zone at any given time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been maintaining the AutoGraders codebase for a few years and that&amp;rsquo;s even more scary.  At least with WebsiteOne we have the Rails Model View Controller (MVC) architecture so you know approximately where to find things.  AutoGraders has its own custom architecture that I&amp;rsquo;m not sure I completely understand and I don&amp;rsquo;t know that anyone does.  I&amp;rsquo;ve not succeeded in being a developer of the AutoGrader, just a maintainer.  I&amp;rsquo;ve been able to trace some of the logic paths through the system and tinker here and there, but re-architecting is a big undertaking.  My first attempt stalled on the complexity of trying to wrap the entire system in consistent acceptance tests.  &lt;/p&gt;

&lt;p&gt;Eric Evan&amp;rsquo;s Domain Driven Design (DDD) and the concept of being able to refactor legacy systems when they have tests serve as inspiration.  I have more hope and motivation for the WebSiteOne project.  It&amp;rsquo;s Rails architecture means that consistent acceptance tests are more likely, although the frustration of working with JavaScript in acceptance tests is an ongoing drain.  However 100% acceptance testing, like 100% test-coverage and 100% TDD are ideals with diminishing returns.  It seems to me that any time you get religious about one of these things you end up sinking an increasing amount of time as you try to get closer to the perfect 100%. &lt;/p&gt;

&lt;p&gt;It makes me think that having a clean and consistent domain model under the hood is the antidote, in some respects at least.  If you accept that having completely reliable acceptance tests on every single one of your important features is an unrealistic goal, then what else can you do?  At least if you&amp;rsquo;re repeatedly evolving the underlying domain model towards something that represents more or less the core of your operations there&amp;rsquo;s a chance you can make up for less than perfect acceptance tests.  Of course one person&amp;rsquo;s coherency is another&amp;rsquo;s confusion &amp;hellip;&lt;/p&gt;

&lt;p&gt;The AsyncVoter project is steaming ahead and I&amp;rsquo;m hoping we can have a consistent model and manageable test suites in order to make it maintainable in the long run.  I&amp;rsquo;m hoping to learn the lessons from WebSiteOne and avoid AsyncVoter&amp;rsquo;s maintenance debt creeping up.  That&amp;rsquo;s also got to be balanced against not pouring cold water on the enthusiasm of the developers.  My battle cry has to be &amp;ldquo;keep that Pull Request small!&amp;rdquo;.  Every time you think of another thing you could add, write a feature and put the backlog.  I was reviewing to AsyncVoter PRs yesterday.  Both a lovely green of Cucumber and Mocha tests; both for specific features that we&amp;rsquo;d voted on.&lt;/p&gt;

&lt;p&gt;Both of them had high level stories that I think should have been tweaked a little, but here&amp;rsquo;s what they were when the developers started working on them:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; List Votes
  As a developer
  In order to cast my vote and see the status of the project
  I want the ability to check what stories are currently being voted on
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Cast Votes
  As a developer
  So that I can indicate my thoughts about a story
  I want to cast my vote on the story and provide some notes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the name of simplicity I would have changed the former to specify only a single current vote, and the latter to not mention anything about notes.  I&amp;rsquo;m sure that we&amp;rsquo;ll ultimately need to have support for those two things, but every little extra bloats the pull request, means more code for review, more work for the developers and means it takes longer to get the code merged into master so others can build on it.  Buck stops with me here; I should have got in there and pruned those features aggressively when work started on them.&lt;/p&gt;

&lt;p&gt;There might also have been push back from the developers on the scope of the stories.  What&amp;rsquo;s interesting is that others don&amp;rsquo;t seem to be quite so afraid of writing code as I am.  Perhaps I&amp;rsquo;m paranoid, or old, but I deal with so much legacy code, any time I&amp;rsquo;m working on a feature I want to see what is the absolute minimum I can get away with.  Others seem happy to start working on other bits and pieces of functionality, different error paths etc.  Mapping out all the sad paths for a feature is arguably more relevant.&lt;/p&gt;

&lt;p&gt;Still there&amp;rsquo;s this ongoing danger in coding of too much anticipation.  You Ain&amp;rsquo;t Gonna Need It (YAGNI).  Right now I&amp;rsquo;m focused on getting a tracer bullet for the simple possible single voting framework.  At this point every additional element like being able to add notes to votes, track who did the votes, catch errors where the vote or person is not specified, are all things keeping us from getting to that tracer bullet demonstration that data can flow through the system and we can complete a high level story of an asynchronous vote on some remote infrastructure.  &lt;/p&gt;

&lt;p&gt;I was also quite scared of giving this sort of feedback.  I&amp;rsquo;ve read people really wrong in the past in terms of how they will take different sorts of feedback.  Either way, push people too hard on something and you&amp;rsquo;re likely to really irritate them.  There&amp;rsquo;s also a humility required.  I know I&amp;rsquo;ve been really religious about different approaches in the past, and I&amp;rsquo;ve got to be open to the fact that I don&amp;rsquo;t have all the answers.  I&amp;rsquo;ll likely be pushing for variations on my current approach as we go forward.  People want the freedom to use their ingenuity to fix problems.  We had a mob review session and went through the above with a few members of the AsyncVoter team.  My screen lag didn&amp;rsquo;t help, but I think it was a good session.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got some PR updates from the devs to review now, and I&amp;rsquo;m hoping to get these PRs merged in today, if I need to make a few changes myself, and I think I&amp;rsquo;ve cleared that with the devs so that I won&amp;rsquo;t be stepping too heavily on anyone&amp;rsquo;s toes.  Proof will be if any of them want to submit PRs again in the future :-)&lt;/p&gt;

&lt;p&gt;After the AsyncVoter MobReview session Michael and I dived into some WSO refactoring.  We got as far as creating a Cucumber background step that doesn&amp;rsquo;t use the spec fixtures, which ultimately allowed the more effective exposure of a bug.  Most of the time was spent tracing the logic paths through the system.  I really hope that we can evolve the domain model of WebSiteOne sufficiently so it doesn&amp;rsquo;t go the way of the AutoGrader project &amp;hellip;.&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NcyTQ_kiV8A"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4khJglSo8s8"&gt;AsyncVoter Mob review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NcyTQ_kiV8A"&gt;&amp;ldquo;Kent Back&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EiBb-KFQDF4"&gt;WSO Pairing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Discombobulated (by Google)</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/08/discombobulated/"/>
    <id>http://blog.url.com/2016/11/08/discombobulated/</id>
    <published>2016-11-08T00:00:00+00:00</published>
    <updated>2016-11-09T09:25:25+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We spent a good hour analysing our options to cope with the changes in the Google Hangout API.  The key issue is that the Google Hangout on Air (HOA) button no longer starts a Hangout directly.  We have the the HOA button throughout our AgileVentures site on project and event pages:&lt;/p&gt;

&lt;p&gt;&lt;img alt="HOA button" src="https://www.dropbox.com/s/5esltpqdq8y2abt/Screenshot%202016-11-08%2009.23.04.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking this button now pops up a separate window with instructions on how to create a HOA through the YouTube interface.  BREAKING NEWS.  I just went to WebSiteOne project page to create a screenshot of the pop up for this blog and pressed the button.  Instead of opening an popup with the contents of this page:&lt;/p&gt;

&lt;p&gt;https://support.google.com/youtube/answer/7083786?hl=en-GB&lt;/p&gt;

&lt;p&gt;Which actually has a good straightforward description of how to create a HOA from the YouTube interface:&lt;/p&gt;

&lt;p&gt;&lt;img alt="create YT live event instructions" src="https://www.dropbox.com/s/gudo78qqtfk04bp/Screenshot%202016-11-08%2009.31.13.png?dl=1" /&gt; &lt;/p&gt;

&lt;p&gt;However a HOA popped up, our plugin worked and pinged Slack through the AV website/agile-bot hookup.  To say I was discombobulated is to put it mildly :-)  I went straight to my &lt;a href="http://stackoverflow.com/questions/40233393/start-a-hangout-on-air-button-for-youtube-livestreaming-api"&gt;StackOverflow post&lt;/a&gt; on the subject to see if there had been an update from the Google engineers, but nothing there.  So, had the activity on the SO post or our discussion in the YouTube product forums prompted the Google engineers to make a change?  Or was this just another accidental change that will allow HOA buttons to work for a while, but will disappear again at some point in the future?&lt;/p&gt;

&lt;p&gt;I guess Google moves in mysterious ways &amp;hellip; what we identified yesterday was that the hangout on air button not working was very confusing for many users.  The manual update of hangout URL was a work around that helped the more experienced AV members to notify the slack community about the hangout going live, but was unlikely to be used by new users.  I admitted that until recently I had been thinking we might want to move away from trying to support synchronous meetings, but the AV community has got really active recently, with well attended scrums, and Michael and I were agreeing that synchronous meetings were very good for coordinating some issues.&lt;/p&gt;

&lt;p&gt;In our first session Michael and I had listed out some of the key problems with the HOA button change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;increased effort to start hangout on air&lt;/li&gt;
&lt;li&gt;lower likelihood of notifications (and pair partners)&lt;/li&gt;
&lt;li&gt;no telemetry (data from who&amp;rsquo;s in the hangout when)&lt;/li&gt;
&lt;li&gt;no sharing of video link&lt;/li&gt;
&lt;li&gt;if no fixed event - no notification pathway &amp;ndash;&amp;gt; pair now on each project page is basically non-functional&lt;/li&gt;
&lt;li&gt;event live as function of planned duration rather than actual activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We reviewed our vision of how the site should ideally operate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy to browse existing sessions&lt;/li&gt;
&lt;li&gt;easy to join existing sessions&lt;/li&gt;
&lt;li&gt;easy to start a new session of your own &amp;ndash;&amp;gt; notifications&lt;/li&gt;
&lt;li&gt;telemetry to give people credit for attending, allow us to analyse and improve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We listed out some short term options for improvement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] more documentation on current state of system &lt;/li&gt;
&lt;li&gt;[ ] build instructions on starting hangout on air into existing interface&lt;/li&gt;
&lt;li&gt;[ ] allow manual setting of youtube link &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and some longer term options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] reviewing alternatives videoconferencing software

&lt;ul&gt;
&lt;li&gt;[ ] GotoMeeting&lt;/li&gt;
&lt;li&gt;[ ] Zoom&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://elearningindustry.com/top-6-open-source-web-conferencing-software-tools-elearning-professionals"&gt;Open Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[ ] publishing a new hangout app (give us notifications and telemetry)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be great if Google hangouts was open source &amp;hellip; anyway, even yesterday I didn&amp;rsquo;t want to leap into working on something.  I also wanted to review the issues related to payment and premium plans.  CraftAcademy Sweden is still keen to work with invoices rather than credit cards, so we how had some Premium members who weren&amp;rsquo;t represented in the site correctly.  I tested on my local server that I could update them from the console like to:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CraftAcademy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked locally and I ran the same through the production Rails console.  An example of me playing fast and loose perhaps?  Would a more principled approach be to deploy a rake task, build an admin interface or even an API endpoint? CraftAcademy just graduated three students and it was trivial for me to do through the Rails console, and make the system display the students&amp;rsquo; Premium status correctly.  I thought it was important to get this set, since otherwise they would have the &amp;ldquo;Sponsor for Premium&amp;rdquo; button.  Not that anyone was likely to start throwing money at them, but good to have the database in the correct state.  As the number of CA graduates increases, we&amp;rsquo;ll want to automate this, but right now we&amp;rsquo;re cautiously expanding the domain model.  Michael and I identified a set of other issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expiration date for CA sponsorship (notifications when 1 year support ends)&lt;/li&gt;
&lt;li&gt;CA sponsorship via Stripe&lt;/li&gt;
&lt;li&gt;Further PayPal payment integration&lt;/li&gt;
&lt;li&gt;Keeping track of how many pairing hours premium F2F and Plus members have left&lt;/li&gt;
&lt;li&gt;Supporting batch payments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was pleased to have made the admin changes to the DB.  The Google Hangout API issue underlines the importance of working in small steps.  We&amp;rsquo;re feeling our way with CraftAcademy collaboration.  The number of CraftAcademy graduates getting Premium membership bundled with their bootcamp experience could explode, or could stay at steady state, or even drop off.   It would be inexpedient to invest enormous engineering effort on functionality and extending the domain model until it&amp;rsquo;s clear which way that goes.  In the meantime we need to keep knocking off small improvements.  CraftAcademy SouthAfrica were saying they&amp;rsquo;d really like to make batch payments in credit card.  Another feature.  We just had our first successful Paypal payment (7 day free trial for first paypal premium member ending).  Naturally we shouldn&amp;rsquo;t just implement every feature that every user asks for.  We&amp;rsquo;ve got to prioritise those that overlap and give us more bang for the buck.&lt;/p&gt;

&lt;p&gt;I asked Michael what he&amp;rsquo;d like to work on and he said the &amp;ldquo;manual setting of YouTube links&amp;rdquo;.  We had another AV member join the hangout and tell us that was important for her project.  It made particular sense as it was a feature that would make our events more agnostic in terms of the video recording link.  We did a quick scrum and Michael drove on that feature.  Michael threw up a new feature, and we hammered at the EventInstances controller to see if we could provide a mechanism to manually update the video link for an EventInstance.  Things got a bit sticky.  I was torn a little between refactoring the Cucumber steps and getting things done.  I encouraged Michael as driver to take the route he thought best.  He left the background EventInstance generation steps alone, but tried some simpler versions for the individual scenario steps.  That didn&amp;rsquo;t go smoothly and we saw why the original test writers had gone for executing triggers rather than pure Capybara clicks when things were getting stuck on overlapping CSS elements.&lt;/p&gt;

&lt;p&gt;There were other complexities with the app code trying to post to Twitter, and the dynamics of when and if the &amp;ldquo;hangout is live&amp;rdquo; elements were being displayed.  At the end of the session the tests were still red and the debug cycle felt a bit slow.  Over night I wondered if, as part of migrating to a new domain model, we should prefer an EventCollection entity that consists of individual Events, and remove the terms EventInstance and Hangout from the domain.  The current model has the term Event representing both repeating and single &amp;ldquo;events&amp;rdquo; which can be scrums, client meetings, pairing sessions, anything where people get together.  The current codebase and tests use the term Hangout and EventInstance interchangeably which can be confusing.  An EventInstance holds a set of data about a Google Hangout at the moment.  I suspect there are also some cases where EventInstances get clobbered in repeat events started manually by the same person.  &lt;/p&gt;

&lt;p&gt;I wondered if we might be able to pull together a more RESTful system by replacing our current Event entity with an EventCollection.  One of the Mentive students I was working with had used that aggregate approach successfully, and discussions about the AsyncVoter REST API made me think I&amp;rsquo;d like to be rebuilding parts of the WSO system more cleanly.  But how to do it one step at a time?  Perhaps introduce a placeholder term like &lt;code&gt;AtomicEvent&lt;/code&gt; to represent single meetups; get a clean REST API around that and then finally migrate it to &lt;code&gt;Event&lt;/code&gt; once the original &lt;code&gt;Event&lt;/code&gt; entity was removed?  Sounds like it could be very confusing.  And now suddenly this morning the HOA button is working again, so suddenly we can leave that part of the system and focus on payments again?&lt;/p&gt;

&lt;p&gt;Or maybe take a detour to AsyncVoter to make sure we get some sort of tracer bullet up?  Again it all comes back to how can be make this charity enterprise sustainable &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Cuaol-FS9wM"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tSQztvcBQlY"&gt;Reviewing WSO issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Zp06E5u7neM"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eIc_bQxVUd8"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring FTW!</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/07/refactoring-ftw/"/>
    <id>http://blog.url.com/2016/11/07/refactoring-ftw/</id>
    <published>2016-11-07T00:00:00+00:00</published>
    <updated>2016-11-08T10:23:32+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Friday was full of pull request reviews.  I&amp;rsquo;m currently trying to keep tabs on pull requests coming in on the following projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/AsyncVoter/pulls"&gt;AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/LocalSupport/pulls"&gt;LocalSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/projectscope/pulls"&gt;ProjectScope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StrawberryCanyon/redeemify/pulls"&gt;Redeemify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/pulls"&gt;WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve started adding extra notifications to the main slack project channels about pull requests opening and closing.  We have separate automated notification channels, but I think pull requests should be highlighted.  When a pull request opens everyone involved in the project should have a look if they can, and make a comment, or just a thumbs up.  Then when a pull request gets merged in that&amp;rsquo;s a time for everyone to thank the submitter of the pull request for completing that work, and then it&amp;rsquo;s great to thank them again when the code is deployed to production.&lt;/p&gt;

&lt;p&gt;AsyncVoter has gotten really active and there&amp;rsquo;s been a lot to review in our nodejs project recently, particularly in terms of locking down how the REST api will work.  LocalSupport goes in fits and starts.  ProjectScope has a group of Berkeley students working on it, and there are weekly flurries of activity.  Redeemify has a couple of folks pushing away, and WebSiteOne only has a few people working on it.  WebSiteOne used to have a lot more developers, but I pushed to ring-fence it for only premium members, since I was worried about maintaining it in the face of too many people working on it at the same time, particularly if those people had variable levels of commitment.&lt;/p&gt;

&lt;p&gt;At least now I&amp;rsquo;m getting a handle on a codebase that isn&amp;rsquo;t too highly in flux, but there&amp;rsquo;s a lot of stuff that needs doing.  Sasha has been knocking off small tickets pretty regularly the last couple of weeks, which is awesome.  In recent months most of the larger PRs have come from myself and Michael with some notable contributions from Raoul.  There was time for some pairing Friday afternoon, and I invited Ben, my friend from our new sponsor drie.  It ended up being just Ben and myself and we ended up spending a devops sessions looking at drie deploys, and how their different products might match different AgileVentures projects.&lt;/p&gt;

&lt;p&gt;What I didn&amp;rsquo;t get onto was the refactoring of the &amp;ldquo;Sponsor a Premium User&amp;rdquo; functionality that we finally had green tests for.  With the time change my Friday meetings ended earlier than usual, and so I got a quick end of week refactoring session in as I was gagging to complete the feature to the point it could be deployed.  The big ugly view from earlier of the week got boiled down to:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @sponsored_user %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @plan %&amp;gt; Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan.free_trial? %&amp;gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; receive all their membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @plan %&amp;gt; Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan.free_trial? %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;although still too much logic for my tastes.  The main if-else block there could be replaced by a call to two different templates, although having them side by side in one file highlights the two alternatives.  I could have pushed and boiled down further, but this part of the codebase is definitely in flux, so there are diminishing returns from pushing too hard on a refactoring binge.  A lot, but not all, of the replication in this view was gone.   I keep saying that it&amp;rsquo;s critical to remember that every time you DRY something out, you also introduce a dependency.  If we start to need highly divergent language for different plans, then some of this DRYing out will need to be undone.&lt;/p&gt;

&lt;p&gt;After a duel with code climate warnings on method complexity, the charges controller that works with the above view looked like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_slug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@sponsored_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsored_user?&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_charge_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and sported a couple of new private methods&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_customer&lt;/span&gt;
    &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;stripe_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="vi"&gt;@plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan_id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsored_user?&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a new class that I left in the same file as the controller for the moment:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plan&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:plan_id&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plan_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@plan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan_id&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="no"&gt;PLANS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plan_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;free_trial?&lt;/span&gt;
    &lt;span class="n"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'premium'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="no"&gt;PLANS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;'premium'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiummob'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium Mob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiumf2f'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium F2F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'premiumplus'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Premium Plus'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The domain entity of a &lt;code&gt;Plan&lt;/code&gt; which had previously only really existed explicitly on the Stripe servers now had a class in our local code.  I was torn between having a class and just going with a collection of functional transformations.  I guess the key thing an instance of plan gives us is the ability to refer to it repeatedly in the view without having to keep passing in the plan_id.  Otherwise it could be collection of methods in a module.  Functional programming tells us to be suspicious of state &amp;hellip; I didn&amp;rsquo;t want to agonise so long that we would delay delivering the feature.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t write tests for the Plan class.  I briefly had it in the lib directly, but Rails didn&amp;rsquo;t load it automatically and although I found a &lt;a href="http://stackoverflow.com/questions/19098663/auto-loading-lib-files-in-rails-4"&gt;stack overflow post&lt;/a&gt; with suggested fixes, I did not want to start playing with the Rails config at 6pm on a Friday.  What I was aiming for here was effectively a private class that only this controller was using.  In the same way that we wouldn&amp;rsquo;t write tests for private methods, I didn&amp;rsquo;t want to be doing TDD domain entity evolution at this point.  My objective was DRYing out the view and controller while keeping the cukes green.  I did not want to get into other design questions of PORO in lib or ActiveRecord model.  &lt;/p&gt;

&lt;p&gt;Again, all this functionality is in flux.  We&amp;rsquo;ve got a restricted set of people working on the codebase.  In a project with a larger team I&amp;rsquo;d have to button down here and make this a serious object with tests, or even explicitly make it private.  I&amp;rsquo;ll need to do one or the other when we work on this again (and start better integrating PayPal and plan upgrades).  I&amp;rsquo;m thinking of giving it a week, and perhaps devoting this week to more fixes on the Google Hangout API fiasco.  Not sure.  Either way Raoul got this all deployed over the weekend and we have Sasha&amp;rsquo;s changes up which include the banner from our new sponsor drie, and the ability for members to sponsor each other for Premium - great work Raoul!&lt;/p&gt;

&lt;p&gt;Right then, once more unto the breach dear friends!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Light at the End of the Stripe Tunnel</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/04/light-at-the-end-of-the-tunnel/"/>
    <id>http://blog.url.com/2016/11/04/light-at-the-end-of-the-tunnel/</id>
    <published>2016-11-04T00:00:00+00:00</published>
    <updated>2016-11-08T10:19:13+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My hopes for a less than frustrating day were dashed as I worked through the ongoing Stripe test failures.  Michael wasn&amp;rsquo;t around and I solo&amp;rsquo;d through some different alternatives.  Rather than just burn time repeatedly in the long debug cycle of seeing if the Stripe acceptance tests would all run in batch after random tweaks, I identified some different possible options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the existing tests without sandboxing (create a @poltergeist&lt;em&gt;no&lt;/em&gt;billy tag)&lt;/li&gt;
&lt;li&gt;Slowly re-add code pieces to develop (since batch cukes are green there)&lt;/li&gt;
&lt;li&gt;Delete the sandbox caches for larger and larger sets of acceptance tests, seeing if regenerating them fixed things&lt;/li&gt;
&lt;li&gt;Use the StripeRubyMock gem as an alternative&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started with the first option reckoning that I could at least quickly test whether the existing tests would run without sandboxing.  To re-cap, the develop branch had about 10 Stripe acceptance tests that ran fine with sandboxes; working individually and in batch.  Our new feature for users sponsoring each other introduced 2 new stripe acceptance tests, neither of which did anything fundamentally different from the existing tests.  These 2 new tests ran fine individually, in a group with all the other Stripe acceptance tests, but then the entire set of Stripe tests (new and old) would fail (no Stripe iFrame appearing) when run in batch with all the other Cucumber tests.&lt;/p&gt;

&lt;p&gt;It felt to me like there must be some timing issue here.  Some race condition such as often plagues JavaScript acceptance tests.  Although this wasn&amp;rsquo;t intermittent failure - the whole thing still doesn&amp;rsquo;t make sense to me.  To try and make sense I wanted to get some other data points.  Getting the Stripe tests to run without sandboxing might allow me to exclude sandboxing as the source of the problem.  Not that sandboxing didn&amp;rsquo;t have other usability issues that I&amp;rsquo;ve blogged about recently, but when trying to solve any big problem it&amp;rsquo;s useful to run experiments on the subsets of the components to try and narrow down the area in which the error is occurring.&lt;/p&gt;

&lt;p&gt;Removing sandboxing was not as easily said as done, as I&amp;rsquo;d previously hooked the PuffingBilly gem directly into all Cucumber Javascript tests like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;test_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;phantomjs_options: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'--ignore-ssl-errors=yes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--proxy=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;phantomjs: &lt;/span&gt;&lt;span class="no"&gt;Phantomjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;js_errors: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_driver&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist_billy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both WebSiteOne and LocalSupport have been plagued, and continue to suffer to some extent, from intermittent JavaScript acceptance test failures.  There&amp;rsquo;s a &lt;a href="https://bibwild.wordpress.com/2016/02/18/struggling-towards-reliable-capybara-javascript-testing/"&gt;good blog post&lt;/a&gt; on why this is a tricky problem.  My own take earlier in the year was that it made sense to nail down all sources of variation.  Tests that make network connections are depending on the network and 3rd party services.  Sandboxing those network connections (recording them and playing them back in test mode) using the VCR and PuffingBilly gems reduces the variability of the test, and makes it more deterministic.  Earlier this year, as part of trying to reduce the overall variability in the WebSiteOne acceptance test, Michael and I had completely re-implemented the Cucumber config and hooks for WebSiteOne.&lt;/p&gt;

&lt;p&gt;To my chagrin this had still not completely removed the occasional intermittent acceptance failure, and the generation of additional cache files on test failure or on other occasions of test variation that was confusing for all developers, complicated to manage, and made some PRs unreadable due to the overload of files.  In several smaller projects I&amp;rsquo;d preferred sandboxing over stubbing with WebMock, which has its own issues of maintaining lots of individual hand-written network calls.  Anyhow, in order to remove the sandboxing I had to get another Capybara JavaScript driver set up.  I ran through a series of alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default (Selenium) - opened firefox (v47) browser displayed nothing&lt;/li&gt;
&lt;li&gt;Poltergeist - not working on my OSX - absolutely bizarre DB errors, with users appearing and disappearing&lt;/li&gt;
&lt;li&gt;Poltergeist with PhantomJS - Stripe tests passed, but redirects to success page did not work - underlying permissions fail?&lt;/li&gt;
&lt;li&gt;Poltergeist with PhantomJS and PuffingBilly - going back to this got green, but still failing in batch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was a frustrating hour.  I knew that with extra work I could probably get the Selenium testing working, but that headed browser approach wasn&amp;rsquo;t going to work on our CI.  The pure Poltergeist errors with data appearing and disappearing from the DB were bizarre and a big red flag.  Poltergeist with PhantomJS looked promising.  We were avoiding sandboxing, but there was likely some permissions error at some level.  I could probably find that, although I was also encountering some ambiguity about which driver was being used - how other hooks were integrating with the existing Capybara Javascript hook:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@poltergeist_no_billy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;poltergeist_no_billy&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="c1"&gt;# this is my copy of the existing @javascript hook&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wasn&amp;rsquo;t liking any of the options very much.  I thought I&amp;rsquo;d give stripe-ruby-mock a spin.  Working from the &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock/blob/master/README.md"&gt;gem README&lt;/a&gt;, &lt;a href="https://medium.com/craft-academy/keeping-it-simple-3e7d9b186015#.4rc29xv6j"&gt;Thomas&amp;rsquo; CraftAcademy blog&lt;/a&gt;, and probably most importantly the associated &lt;a href="https://github.com/CraftAcademy/sf-online-august/"&gt;CraftAcademy repo&lt;/a&gt; I got first a single Stripe acceptance test working, and then another.  All would be for nothing if I couldn&amp;rsquo;t get them running in batch.  In batch a large number of Stripe acceptance tests were still failing, but importantly the ones using StripeRubyMock were not.  I had a lifeline, a light at the end of the tunnel.  If I could convert all the Stripe acceptance tests to StripeRubyMock I might have something where the entire test suite would go green.&lt;/p&gt;

&lt;p&gt;I had created a custom &lt;code&gt;@stripe_javascript&lt;/code&gt; tag to ensure that our StripeRubyMock tests would not use PuffingBilly, while allowing the other existing tests to keep using it:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt; &lt;span class="s1"&gt;'@stripe_javascript'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
  &lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_test_helper&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;After&lt;/span&gt; &lt;span class="s1"&gt;'@stripe_javascript'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist_billy&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stop&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'session_pool'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;restart&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was not without concern for some of the other changes.  App code in the ChargesContller had to be adjusted to accommodate testing with StripeRubyMock:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stripe_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;test?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;generate_test_token&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_test_token&lt;/span&gt;
  &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_card_token&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The charges controller would now ignore the incoming stripe token from the javascript redirect, and use a StripeRubyMock generated token in test mode.  It was pretty innocuous but a different code path would run in test, compared to development and production.  This was going against another general coding guideline.  Not the end of the world, but a warning flag.  Still this was starting to seem like the most hopeful route back to a green Cucumber suite.  I also came away with a modified poltergeist driver based on the CraftAcademy code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_driver&lt;/span&gt; &lt;span class="ss"&gt;:poltergeist&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Poltergeist&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;js_errors: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="ss"&gt;phantomjs: &lt;/span&gt;&lt;span class="no"&gt;Phantomjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="ss"&gt;phantomjs_options: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'--ssl-protocol=tlsv1.2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--ignore-ssl-errors=yes'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another key difference was that I now had to explicitly create our Premium plans using the StripeRubyMock as part of the setup for the cuke scenarios:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following plans exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumMob&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiummob&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumF2F&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiumf2f&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PremiumPlus&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premiumplus&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^the following plans exist$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is interesting as previously the cache of VCR and PuffingBilly would contain the plan information encoded in HTTP responses from the Stripe servers.  That had ensured the Stripe servers were the single authoritative source for this information.  As it happens specifying this in the Cucumber steps makes our business logic description here more complete.  It leaves us with a data dependency, whereby we need to ensure that the plans specified in our Cucumber scenarios match those on the Stripe servers.  Another heuristic red flag, but the prospect of a green test suite was driving me forward.  I wasn&amp;rsquo;t quite there yet, our update card details was failing, and we needed more changes to how we created a Premium user for testing purposes:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt; &lt;span class="sr"&gt;/^I am logged in as( a premium)? user with (?:name "([^"]*)", )?email "([^"]*)", with password "([^"]*)"$/&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;premium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

  &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                                           &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="vi"&gt;@stripe_test_helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_card_token&lt;/span&gt;
                                       &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="s1"&gt;'premium'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subscription: &lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A card token from the Stripe test server would no longer work and the fix was using the stripe test helper to generate a card token.  This test code was super ugly, and I was still really bothered by the factories being shared between cukes and specs.  Anyhow, I also had to modify the app code for updating cards, because we were now generating a different kind of error.  I added a &lt;code&gt;NoMethodError&lt;/code&gt; to the update card error handling:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def update
    customer = Stripe::Customer.retrieve(current_user.stripe_customer_id) # _token?
    card = customer.sources.create(card: stripe_token(params))
    card.save
    customer.default_card = card.id
    customer.save
  rescue Stripe::InvalidRequestError, NoMethodError =&amp;gt; e
    logger.error "Stripe error while updating card info: #{e.message} for #{current_user}"
    @error = true
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we were finally all green! Although I did still get an intermittent fail on the very last build on CI at the end, so this isn&amp;rsquo;t over JavaScript Acceptance tests (shakes fist)!  In summary though the full test suite was green for me locally, and after a re-build on semaphore the build passed.  StripeRubyMock was working for us, and I don&amp;rsquo;t have much appetite for burning more time on the complete sandboxing alternative.  What&amp;rsquo;s frustrating is how much time that goes into this that could be going into refactoring the code for maintainability or improving the user interface experience.  However with the test suite green, we can potentially refactor with confidence (until the next time!).&lt;/p&gt;

&lt;p&gt;My concerns about RubyStripeMock is will it be maintained and stay up to date with the Stripe API itself?  To get things to pass I had to change app code that now hasn&amp;rsquo;t been tested in production.  Thomas has updated &lt;a href="https://medium.com/craft-academy/keeping-it-simple-3e7d9b186015#.4rc29xv6j"&gt;his blog post&lt;/a&gt; to talk about using RubyStripeMock completely network independently.  Since Stripe told me they are happy with a few hits from tests, and that removing network dependency has not fixed our intermittent failures I&amp;rsquo;m less concerned about that, than just having code paths that operate in production but don&amp;rsquo;t run in test.  I changed &lt;code&gt;customer.cards&lt;/code&gt; to &lt;code&gt;customer.sources&lt;/code&gt; in the app code to get the RubyStripeMock acceptance tests to work.  I will need to use the StripeRubyMock ability to switch to live tests against the Stripe servers to test that still works:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inclusions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:live&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toggle_live&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Running **live** tests against Stripe..."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The advantage of a full VCR/PuffingBilly sandbox, is that you are stubbing at the network level.  Your app is effectively running in the exact same environment as it would with a live network connection.  You can dump the sandbox at any time to re-create an accurate network sandbox.  However it becomes challenging with a complex service like Stripe that&amp;rsquo;s trying to be secure and is using a high degree of indeterminacy in terms of the network connections it makes.  The sandbox cache files have to be checked into git to ensure everyone gets a benefit from the sandbox, so test failures or complex system like Stripe can lead to challenging git churn.  Not checking in those files would be an alternative - CI would still hit live network servers, and on second and subsequent runs developer machines would avoid re-hitting the live network, but then network fails could be encoded into caches.  I starting to think sandbox caches are another challenging source of variability when used with services like Stripe.&lt;/p&gt;

&lt;p&gt;In a final analysis it&amp;rsquo;s all about trading off these different heuristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep test code as close to production code as possible&lt;/li&gt;
&lt;li&gt;Keep test environment as close to production environment as possible&lt;/li&gt;
&lt;li&gt;Avoid hitting 3rd party servers during test&lt;/li&gt;
&lt;li&gt;Ensure development flow is comprehensible and manageable for developers on your team&lt;/li&gt;
&lt;li&gt;Keep your full test suite green&lt;/li&gt;
&lt;li&gt;Keep the running time of your test suite down to avoid delayed debug cycle hell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and various others.  None of these heuristics always trumps all the others.  As Kent Beck says, &amp;ldquo;it depends &amp;hellip;&amp;rdquo;.  I say, keep looking for the light at the end of the tunnel :-) &lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fDUd9N5iDTA"&gt;Solo on WebSiteOne part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hz_i4DagxkY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iaRDd35qF_g"&gt;Solo on WebSiteOne part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Frustratingly Slow Debug Cycle</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/03/frustratingly-slow-debug-cycle/"/>
    <id>http://blog.url.com/2016/11/03/frustratingly-slow-debug-cycle/</id>
    <published>2016-11-03T00:00:00+00:00</published>
    <updated>2016-11-04T09:49:12+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Michael had lots of great ideas about tracking people through the site today, but I wanted to quickly push out the &amp;ldquo;sponsor other users&amp;rdquo; feature.  I was following the logic from Monday, where dashing out a PayPal endpoint had opened up some payment streams.  I had one person waiting to use the sponsor others, and I was promising myself a phase of consolidation once that was done.  In fairly short order we stamped out some cucumber scenarios:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Allow Users to Sponsor other members
  As a user
  So that I can help someone else get premium services
  I would like to be able to pay for their premium service

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following users exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;github_profile_url&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_sign_in_ip&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;alice@btinternet.co.uk&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;http://github.com/AliceSky&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User upgrades another user from free tier to premium
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"you have sponsored Alice Jones as a Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; non logged in user upgrades another user from free tier to premium
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"you have sponsored Alice Jones as a Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Sponsor for Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which could be more declarative, but they were good enough for now.  We then stamped out some even messier code to get them green.  This was all me.  I was following my &amp;ldquo;get it green, THEN refactor&amp;rdquo; mantra of the previous week.  Just to show you how messy some things were, take a look at this view:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @user.present? &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; current_user != @user %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan == 'premium' %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiummob'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium MOB Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium mob membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiumf2f'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium F2F Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium f2f membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you have sponsored &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= @user.display_name %&amp;gt; as a Premium PLUS Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium plus membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if @plan == 'premium' %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You're seven day free trial has now started.  Your card will not be charged until seven days have passed.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiummob'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium MOB Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium mob membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% elsif @plan == 'premiumf2f'%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium F2F Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium f2f membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% else %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'payment_complete'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thanks, you're now an AgileVentures Premium PLUS Member!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An AgileVentures mentor will be in touch shortly to help you receive all of your premium plus membership benefits.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh, business logic in the view, lots to DRY out, and now I look at it again, some mistakes in wording.  However, all those changes would be fairly easy to make.  The danger is that we don&amp;rsquo;t get to them.  Michael and I went to the &amp;ldquo;Kent Beck&amp;rdquo; scrum and changed roles.  The cukes that had been green for me were now failing for Michael, failing on CI, and failing when I pulled them back onto my machine.&lt;/p&gt;

&lt;p&gt;It seemed the full set of Premium related features was failing when run in full batch mode (Stripe iFrame not appearing), but would work when run individually, or from a set in their own folder (i.e. &lt;code&gt;cucumber features/premium/*&lt;/code&gt;).  Michael was then also getting individual failures related to a re-used Stripe token.  We were in a bit of a mess and burnt the best part of an hour investigating.  More importantly we weren&amp;rsquo;t doing any refactoring of the messy app code!&lt;/p&gt;

&lt;p&gt;The functionality was working when we run the site manually.  So frustrating.  Trying to push out something to receive some money, that works manually, but the feature tests don&amp;rsquo;t pass due to some odd bug, which turns into a massive time sink.  I wanted to start trying the &lt;a href="https://github.com/rebelidealist/stripe-ruby-mock"&gt;stripe-ruby-mock&lt;/a&gt; which the CraftAcademy folks had had some success with.  It was not necessarily a snap fix, but I was starting to really hate all the many fixture files that came with sandboxing complex network interactions.  Occasional cache leaks would mean that developers would suddenly find a load of extra files on their file system.  Pull requests for new features would have 112 instead of 12 changed files.  Maybe the PR display on GitHub could be adapted to handle that, but I was really starting to feel this was all more trouble than it was worth.&lt;/p&gt;

&lt;p&gt;Michael was keen to understand these errors and these tests.  We got down into the PuffingBilly config where I remembered there was this additional step to ignore params on a unique URL that Stripe interactions generated.  I got the tests green again, but then they still failed in batch.  Also, Stripe had told us that they were happy with a load on their test servers that was &amp;ldquo;within reason&amp;rdquo;.  So this morning I tried taking the VCR and PuffingBilly caches off the tests, which would make our tests sensitive to network failures, just to see if that could get things passing in batch; but that still fails.  The test needs JavaScript and I think we have puffing billy hardwired in to all JS tests at the moment.  I could remove that and maybe I could get all the tests passing, but then again &amp;hellip;&lt;/p&gt;

&lt;p&gt;One of the biggest issues here is the slow debug cycle.  If the failures only occur in full batch then we have to run the entire cucumber suite, which takes ten minutes.  That might not seem like a lot, but it burns up time.  I&amp;rsquo;ve always seen that as a real red flag.  Being stuck with a slow debug cycle is asking for trouble.  Do anything you can to reduce the amount of time before you get feedback on whether a change you make is working or not!  I think the next thing to try is to create a @no-billy tag to opt out these scenarios from headless browser javascript caching to see if that will pass.  Other options include the stripe-ruby-mock gem, or just not having tests on the payment portions, which I&amp;rsquo;ve heard some people advocate.  Fingers crossed for a less frustrating session today &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=boCPUJ3sdlE"&gt;Pairing on WebSiteOne, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=20ZeJ9FcOxA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eAdPTF5A5O8"&gt;Pairing on WebSiteOne part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Documentation Debt</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/02/documentation-debt/"/>
    <id>http://blog.url.com/2016/11/02/documentation-debt/</id>
    <published>2016-11-02T00:00:00+00:00</published>
    <updated>2016-11-04T09:49:12+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Following on from the previous day I got a &lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; together for the AsyncVoter project.  I&amp;rsquo;d jumped into an AsyncVoter pairing session immediately after the Martin Fowler scrum.  Progress was being made with Cucumber, but in contrast to the day before, there was talk of spending more time working out the right way to work with CucumberJS.  I recommended that if we just had something working then put adjusting it into a refactoring ticket and get a green PR in, but that also it was up to the project members to make their own decision.  I think they ultimately took my advice and we have a &lt;a href="https://github.com/AgileVentures/AsyncVoter/pull/40"&gt;PR&lt;/a&gt; ready to merge.  Note: it took another day to merge, and in the meantime the developers refactored the Cucumber and produced a much cleaner solution.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a strange ongoing balance between refactoring things so that they&amp;rsquo;re right, and ensuring that PRs get merged quickly and don&amp;rsquo;t serve as a block for other developers trying to build on your work.  My rule of thumb is keep the PRs super small and make refactoring tickets.  Of course those refactoring tickets need to be addressed quickly, ideally getting votes taken on them ASAP.  Poor design decisions can get locked in when a lot of people build on them, but in a project with a high churn of developers and unpredictable availability, long running PRs can lead to a lot of work being thrown away.  I don&amp;rsquo;t think there&amp;rsquo;s any magic solution.&lt;/p&gt;

&lt;p&gt;I went ahead and tried to codify some of this in &lt;a href="https://github.com/AgileVentures/AsyncVoter/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.  I think it&amp;rsquo;s an improvement over some other CONTRIBUTING.mds I&amp;rsquo;ve written, but I think we need some images to break it up.  On the same note I started adding some documentation to the &lt;a href="https://github.com/AgileVentures/AgileVentures"&gt;AgileVentures/AgileVentures&lt;/a&gt; repo.  I&amp;rsquo;d had a quick guide to AsyncVoting, which I threw in there.  We&amp;rsquo;d previously only been using this repo as a place to have issues that were AV wide.  The repo wasn&amp;rsquo;t really intended for code.  John had thrown in some &lt;a href="https://github.com/AgileVentures/AgileVentures/blob/master/features/new_developer.feature"&gt;scenarios for new developers&lt;/a&gt; which connects to the key document I wanted to put in there, which was a &lt;a href="https://github.com/AgileVentures/AgileVentures/blob/master/STARTING_A_NEW_PROJECT.md"&gt;starting new projects document&lt;/a&gt;.  I managed to get one video embedded in there which breaks up the flow a little &amp;hellip;&lt;/p&gt;

&lt;p&gt;Maybe these materials should all be going into documents in our main site, like our &lt;a href="http://www.agileventures.org/getting-started"&gt;Getting Started document&lt;/a&gt;.  I just edited that to link to the start your own project page on GitHub.  The problem I have with the editable static pages throughout our site is that they don&amp;rsquo;t support markdown.  I&amp;rsquo;m just totally addicted to markdown; I write everything in it.  I love how it looks on GitHub.  I love that on GitHub we can get updates via pull requests from anyone with a GitHub account and we can use GitHub&amp;rsquo;s powerful teams and permissions system to manage direct access where needed.  Anyway, so much more work needed - updating our UX and all our instruction documents to reflect how the Google Hangout API has changed etc.&lt;/p&gt;

&lt;p&gt;When users are saying things like &amp;ldquo;I don&amp;rsquo;t know how to get a project started&amp;rdquo;, I can&amp;rsquo;t be spending time routing around creating static pages and working with a WYSIWYG system that requires me to click buttons and open windows to add hyperlinks.  I want all link-like things automatically linked, and markdown links to allow me to throw in references without breaking stride.  I can so easily create new files through the GitHub UI:&lt;/p&gt;

&lt;p&gt;&lt;img alt="animation of creating new file on GitHub repo" src="https://www.dropbox.com/s/c9nywqbxw638mw9/Screencast-2016.11.02-22.17.gif?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;For me GitHub just feels natural whilst most everything else feels cumbersome.  Of course every piece of documentation we create leads to documentation maintenance debt.  We&amp;rsquo;ve made many things editable to everyone on AgileVentures, but very few realise they can edit, and the big advantage of GitHub is that even if people don&amp;rsquo;t realise they can sometimes edit directly, at least there&amp;rsquo;s a higher chance they&amp;rsquo;ll understand they could contribute changes through a pull request.&lt;/p&gt;

&lt;p&gt;In the afternoon Michael and I dived into some performance issues on WebSiteOne.  I really wanted to keep working on the PayPal functionality and the sponsor other members feature that might bring in more cash flow, but the events page giving 500 errors was really not good.  We started analysing the page loads.  It seemed that on production a good eight seconds was spent rendering the view.  It seemed like we had an N+1 query where every little event element made an additional database query to ask what the latest hangout was for an event and checking if it was live.  We spent a while trying to modify the underlying query with &lt;code&gt;includes&lt;/code&gt; to pull in all the hangout info in the first query rather than one at a time.  We didn&amp;rsquo;t have much success.  The base query was complicated by working with the IceCube gem pulling in repeating events.  It might have worked if we&amp;rsquo;d created a scope, but rather than diving deep on that, I realised there really was no need to check for the liveness of an event that wasn&amp;rsquo;t taking place on the current day, so we just modified the view to check if the event was today, and saved ourselves a ton of database queries into the bargain.  It also removed an associated error that when an event was live, all the future events in the sequence also showed as live.  I dashed off a quick &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1378"&gt;pull request&lt;/a&gt; and we&amp;rsquo;ll see if it has a positive impact on production.  We definitely got a speed up locally.&lt;/p&gt;

&lt;p&gt;It was time to jump into a busy &amp;ldquo;Kent Beck&amp;rdquo; scrum with 8 folks reporting on where they were up to.  I really felt like I was spinning plates as I was recording an episode of Ruby Rogues right off the back of the scrum.  I was probably talking on x3, but we managed to dash off a vote on a &lt;a href="https://www.pivotaltracker.com/story/show/122459341"&gt;LocalSupport&lt;/a&gt; story, particularly since we had two MOOC students in the scrum wanting to complete their Open Source assignment.  I was on time to talk to the Ruby Rogues about the AgileVentures mission and it was a major buzz, and then buzz crash 90 minutes later as I tried to bring myself down for an evening with the family.  A busy day!  I spent another hour later on reviewing pull requests.  Still not sure if I&amp;rsquo;m focusing on the right things.  The Premium framework is designed to have me focus on PRs from those who are sponsoring AV.  I still feel like I&amp;rsquo;m drowning in requests sometimes :-) How will we scale this?  Can I get it sustainable before I get distracted by the need to take additional paid work?  Stay tuned to this blog to find out :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CpHdhYFok80"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RkgMoF8CmD8"&gt;Pairing on AsyncVoter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3YA0nG3-BY"&gt;Pairing on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=f5BReS4QDZE"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Related Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/dergachev/4627207"&gt;Quickly make animated gifs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
