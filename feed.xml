<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-10-25T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Solo Coding</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/25/solo-coding/"/>
    <id>http://blog.url.com/2016/10/25/solo-coding/</id>
    <published>2016-10-25T01:00:00+01:00</published>
    <updated>2016-10-25T21:04:46+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://nonprofits.agileventures.org/2016/10/21/yak-shaving/"&gt;Yak shaving&lt;/a&gt; aside I managed to make time for some solo coding.  There was work outstanding on a feature to allow users to upgrade from Premium to PremiumPlus.  Michael and I had designed some extra domain features in a previous session, but they hadn&amp;rsquo;t immediately been needed, so we cherry-picked them into this PR.  New domain entities of Subscription and PaymentSource were necessary to distinguish between users being Premium or PremiumPlus without having to contact the remote Stripe API for confirmation (see model dump from railroady gem in the image below).  If someone wants to upgrade the last thing we want to do is have the site freeze because the Stripe API isn&amp;rsquo;t responding.  That said we&amp;rsquo;re still using the Stripe API to communicate the intention to upgrade the plan, but having a coherent way of storing the members&amp;rsquo; desire to upgrade in our database seems like a good move.&lt;/p&gt;

&lt;p&gt;&lt;img alt="new domain entities" src="https://www.dropbox.com/s/lm03tpkm2xqe9kb/Screenshot%202016-10-25%2020.52.36.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;You might say why didn&amp;rsquo;t you build all this in from the start?  Because we were following the Agile process of only building what we needed for the immediate future.  Now that we&amp;rsquo;ve validated that people will sign up for Premium and Premium Plus plans, we&amp;rsquo;re moving on to gamble that some of them might be willing to upgrade.  Actually the feedback I&amp;rsquo;m getting suggests that the Premium Plus plan is too expensive, so next up we&amp;rsquo;ll be inserting some intermediate plans, but anyway, one feature at a time.  The &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1323"&gt;PR for this feature&lt;/a&gt; has been open a dangerously long time due to my knee operation and it needing fixing up (both the PR and my knew).  It had taken a fair amount of pulling out my hair to get the feature tests all green.  Standing in the way of the release were the data migration that would take existing members&amp;rsquo; Stripe IDs from the User model to the Subscription/PaymentSource models.  There was also a fair amount of gnarly code that was suffering from Demeter violations.&lt;/p&gt;

&lt;p&gt;My internal dialogue was as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We could do the migrations on the production server manually, but it would be error-prone, and we got in trouble with the Karma migrations last time.  That said, this time we are not deleting the old db column.  Even so, what we really should have done last time was a dry-run of the migration, so if we have a script of it this time, it&amp;rsquo;ll make it easier to dry-run it and/or rerun it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to get the migration code done, and also to write a cucumber test for it.  I&amp;rsquo;d be following up with a later migration to remove the db column and the migration test in a few weeks.  Exhilarating to be writing code that I plan to delete soon!&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@rake&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Migrate the stripe data
  As the admin
  So that users can get premium related functionality related to the new data schema
  I want to migrate to the new data structure

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following users exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;stripe_customer&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;alice@btinternet.co.uk&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;345rfyuh&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Migrate the stripe data to the new architecture
    &lt;span class="nf"&gt;When&lt;/span&gt; I run the rake task for migrating stripe
    &lt;span class="nf"&gt;Then&lt;/span&gt; &lt;span class="s"&gt;"alice@btinternet.co.uk"&lt;/span&gt; shoud have &lt;span class="s"&gt;"345rfyuh"&lt;/span&gt; in their subscription
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here are the relevant step definitions:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for migrating stripe$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'db:migrate_stripe'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^"([^"]*)" shoud have "([^"]*)" in their subscription$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the rake hook:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@rake'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vg"&gt;$rake&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rake_require&lt;/span&gt; &lt;span class="s1"&gt;'tasks/scheduler'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rake_require&lt;/span&gt; &lt;span class="s1"&gt;'tasks/migrate_stripe_customer_ids'&lt;/span&gt;
    &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vg"&gt;$rake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the rake task itself:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Migrate stripe user ids from User model to Subscription model"&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:migrate_stripe&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# Time.now not ideal but can set manually later&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
        &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" stripe customer id migrated"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"migration has been completed"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;green&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got this working, but was unhappy that I&amp;rsquo;d replicated gnarly Demeter violations from the charges controller into the migration task itself.  However I had the migration task green, and now I could refactor with more confidence.  I was tempted for a moment to pull this upgrade logic into the User class itself.  It sort of makes sense to say something like &lt;code&gt;user.upgrade_to_premium&lt;/code&gt;, but our User model is already overblown with responsibilities, and really this is a process that involves manipulating and setting up several domain entities.  I went for a service, and I test drove it in the London style with the following code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:upgrade_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;class_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;class_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'StripeID'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'creates a payment source'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'creates a subscription of the appropriate type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;payment_source: &lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sets the user subscription'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'saves the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upgrade_user_to_premium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to be honest I actually wrote out a sketch of the service in a text editor before driving the above in RubyMine, but here&amp;rsquo;s how the TDD&amp;rsquo;d version ended up:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UpgradeUserToPremium&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payment_source_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscription_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;payment_source: &lt;/span&gt;&lt;span class="n"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know that some of my colleagues prefer the Chicago style, and some people might think that the above involves a ridiculous amount of test code for a three line class method.  The RSpec suffers from not being as comprehensible as it might be by people who aren&amp;rsquo;t comfortable with RSpec concepts like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; and so forth.  What I can say in its defence (and I am still on the fence) is that there is a coherent shape in my mind here that has some level of intrinsic beauty.  The RSpec unit test of the service is following the heuristic that each &lt;code&gt;it&lt;/code&gt; statement should test only one thing.   The &lt;code&gt;let&lt;/code&gt; statements make the set of collaborating entities completely explicit.  The &lt;code&gt;before&lt;/code&gt; block sets up to stub all the outgoing collaborators of the method, so that each of the four &lt;code&gt;it&lt;/code&gt; statements does not actually reach any other part of the system, making this a unit and not an integration test.  Then each &lt;code&gt;it&lt;/code&gt; block tests each of the four key things that happen in the method.  &lt;/p&gt;

&lt;p&gt;Here we could argue that the method is doing too much - it does four things and should have a single responsibility (according to the SOLID principles).  I could break out some smaller methods, but I think this is actually the right level of granularity.  We have a concept in the domain that is upgrading a user to premium, and these are the four things that will need to happen to set that up and persist it.  The Demeter violations of the earlier code are gone, and the tests are still green, showing that the migration is working.  Furthermore, we can use the same service in the charges controller which goes from this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Premium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;started_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;identifier: &lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and our migration cleans up like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Migrate stripe user ids from User model to Subscription model"&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:migrate_stripe&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
        &lt;span class="c1"&gt;# setting time as now not ideal but can set manually later&lt;/span&gt;
        &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" stripe customer id migrated"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"migration has been completed"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;green&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good.  We&amp;rsquo;re left with some Demeter violations in the upgrade to premium plus code in the charges controller:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PremiumPlus'&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"premiumplus"&lt;/span&gt;
  &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&amp;rsquo;t like this, and I don&amp;rsquo;t like how we&amp;rsquo;ve ended up overloading the charges controller.  The former is the Stripe API that perhaps we&amp;rsquo;re using incorrectly, but I don&amp;rsquo;t know that I can justify putting an adapter on this right now.  The charges controller needs a bigger refactoring, but I&amp;rsquo;m making the judgement call that these two things go into refactoring tickets.  In the ideal world I&amp;rsquo;d also love more sad path tests in places, but again, this PR has been open long, we need the data migration in and from a charity/business perspective we&amp;rsquo;re likely to bring in more revenue by actually releasing the individual sign up pages for the new intermediate plans, and they&amp;rsquo;ll have to be a fair amount of work going on on top of this code to handle the new sequence of upgrades that are possible, so like Sandi Metz suggests, I&amp;rsquo;m hedging my bets about avoiding too much refactoring in an area where the code is in flux.&lt;/p&gt;

&lt;p&gt;At least the Heroku automated deploy is working, so I can easily do a manual test.  I&amp;rsquo;m not thrilled about the placeholder button we have but again that can be another ticket:&lt;/p&gt;

&lt;p&gt;&lt;img alt="upgrade to premium plus button" src="https://www.dropbox.com/s/2aom85mgn7pv16p/Screenshot%202016-10-25%2010.50.14.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Of course now Google Hangouts on Air have switched to YouTube live and our automated distribution of hangouts is failing - we&amp;rsquo;ve got a manual override but it has a bug I blogged about last week which will drag me away from pushing out these other plans &amp;hellip; gah!  It&amp;rsquo;s all about the prioritization &amp;hellip; At least I quite enjoyed writing all the above code :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Qt1QmFyBdpY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Tying Up Loose Ends</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/24/tying-up-loose-ends/"/>
    <id>http://blog.url.com/2016/10/24/tying-up-loose-ends/</id>
    <published>2016-10-24T01:00:00+01:00</published>
    <updated>2016-10-24T21:31:38+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So after &lt;a href="http://nonprofits.agileventures.org/2016/10/21/yak-shaving/"&gt;Yak shaving&lt;/a&gt; with Heroku automated PR deploys, we finally got it working.  Raoul joined us in the &amp;ldquo;Martin Fowler&amp;rdquo; scrum and through a process of both disabling the PR deploys, AND deleting the GitHub webhooks that Heroku had installed, the permissions issue was resolved.  The deploys themselves were now marked on GitHub as coming from me, and suddenly all the other strange database issues evaporated.  I did also get a reply from Heroku:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The use of ruby-2.3.0 appears to be because you&amp;rsquo;re bundling it into the vendor/ directory:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls vendor/*/*

[…]

vendor/bundle/ruby:
2.3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We advise against checking vendor into source control, and relying solely on bundler&amp;rsquo;s installation of Gemfile contents instead.&lt;/p&gt;

&lt;p&gt;The Postgres error appears to be because your database.yml hard codes some connection information:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;development: &amp;amp;dev
  adapter: postgresql
  encoding: unicode
  database: websiteone_development
  pool: 20
  username: postgres
  password:

[…]

production:
  &amp;lt;&amp;lt;: *dev
  database: websiteone_production
As you can see in the error, the error is that the postgres user attempts to connect, and fails. After it fails, Rails falls back to the value located in $DATABASE_URL. You can change this to simply:

production:
  url: &amp;lt;%= ENV['DATABASE_URL'] %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which all sounded like good advice, but this was all for errors that were no longer occurring - at least if they were, they were no longer blocking the deploy.  I asked them about that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks Jason, that&amp;rsquo;s weird because we don&amp;rsquo;t have vendor/bundle/ruby in our source tree: https://github.com/AgileVentures/WebsiteOne/tree/develop/vendor/ any idea how it&amp;rsquo;s getting in there during deploy?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I got back the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regarding the vendor/bundle/ruby question I think there may have been some issue with the build cache on this occasion that was holding the 2.3.0 over from a previous deploy. If you have any trouble in future you could you try running the following commands:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku plugins:install https://github.com/heroku/heroku-repo.git
$ heroku repo:purge_cache -a appname
$ git commit --allow-empty -m "Purge cache"
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;That will ensure you start from a cold cache for that deploy. Let me know if you have any further questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that&amp;rsquo;s that, except that all these automated PR apps are costing us money, and I&amp;rsquo;m not sure they are being deployed automatically.  The LocalSupport auto-deploy appears to be stuck due to an app limit of 100, and I&amp;rsquo;m starting to suspect that&amp;rsquo;s because the local support develop server is on my personal account.  If I move it to one of our group accounts we&amp;rsquo;ll start incurring more charges, so I found a little script to &lt;a href="https://gist.github.com/naaman/1384970"&gt;delete heroku apps in batch&lt;/a&gt;, which I modified slightly to work with a hand picked list:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while read app; do heroku apps:destroy --app $app --confirm $app; done &amp;lt; delete_heroku_list 

Destroying ⬢ afternoon-stream-8326 (including all add-ons)... done
Destroying ⬢ agile-chamber-2464 (including all add-ons)... done
Destroying ⬢ agile-dawn-9072 (including all add-ons)... done
Destroying ⬢ agile-thicket-6113 (including all add-ons)... done
Destroying ⬢ ancient-bastion-6361 (including all add-ons)... done
Destroying ⬢ ancient-dusk-4608 (including all add-ons)... done

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could have burnt time doing a regex for the format of &lt;code&gt;&amp;lt;word&amp;gt;-&amp;lt;word&amp;gt;-&amp;lt;four-digits&amp;gt;&lt;/code&gt; to find and delete all my apps without custom names, but that would have burnt time for something I&amp;rsquo;m unlikely to need to do again, and it took a minute to get the file &lt;code&gt;delete_heroku_list&lt;/code&gt; to have the names of all the crufty old apps I haven&amp;rsquo;t used in years.&lt;/p&gt;

&lt;p&gt;So my hereby dashboard is looking a lot cleaner.  I&amp;rsquo;ve got my two main project pipelines in my &amp;ldquo;favourites&amp;rdquo;, and my Heroku navigation is a lot more manageable:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/iaf134csxh7ij1g/Screenshot%202016-10-24%2010.09.56.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Although that doesn&amp;rsquo;t immediately seem to have enabled automated PR deploys on LocalSupport - which still reports the 100 app limit exceeded.  I guess that will take time to flush through the system, or indeed I might need to try this new &lt;code&gt;purge_cache&lt;/code&gt; technique that&amp;rsquo;s mentioned above, but those are Yak&amp;rsquo;s to be shaved.  I only just started on the data migration script for the premium plus upgrade feature, which needs to be finished, and there&amp;rsquo;s a hell of a lot of other critical admin tasks to get to today.  At least this ties up some of the loose ends from last week, when I was worried the Yak shaving would continue indefinitely.  At least I&amp;rsquo;ve got to a reasonably satisfying task switching point &amp;hellip;&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/_hAm_6T8r18"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=feu722TBjo4"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Yak Shaving</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/21/yak-shaving/"/>
    <id>http://blog.url.com/2016/10/21/yak-shaving/</id>
    <published>2016-10-21T01:00:00+01:00</published>
    <updated>2016-10-21T20:43:04+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I thought I&amp;rsquo;d try and get a little solo programming time in today, but it turned into a yak-shaving devops session.  Yak shaving?  It&amp;rsquo;s when you end up needing a ladder to paint your house, and you have to borrow a ladder from your friend, but you need to go get his keys from his neighbour who has to finish shaving his yak &amp;hellip; I know, it makes no sense - the point is about how you have one goal and then you get successively distracted by a series of activities that become more and more tangentially related to the original goal.  I was trying to get our premium plus upgrade functionality into production.  This was going to involve doing a data migration.  I wanted to get an instance of the branch with that code up in Heroku to test the migration.&lt;/p&gt;

&lt;p&gt;Heroku&amp;rsquo;s automatic deploy of pull requests to Heroku instances is nice when it works.  It came out of beta, but still seems flaky.  I started poking at it.  First up it was saying that there wasn&amp;rsquo;t permission to deploy the app.  I&amp;rsquo;d just moved websiteone-develop from my personal account to my company NeuroGrid Ltd group account since all my personal app hours had been burned up by agile-bot.  Raoul had originally set up the automated deploys for the websiteone develop server, so somehow the automatic deploy of the PR was coming from his account.  I played with moving him from a collaborator to an admin role, which moved things forward a little.  The next error was the deploy was failing due to a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1348"&gt;database error&lt;/a&gt;.  One of the frustrating things about this was the delayed feedback loop.  I&amp;rsquo;d make a change in the &lt;code&gt;app.json&lt;/code&gt; file that specifies how Heroku will auto deploy PRs, or a change in Heroku&amp;rsquo;s admin console, and it takes five minutes or so to find out if the deploy has worked or not.  I was task switching between trying to fix the automated PR deploy and cleaning up what looked like a puffing billy sandbox leak on the branch itself. Ultimately though it was the PR deploy that was taking up more and more of my brain.&lt;/p&gt;

&lt;p&gt;Was this another banana in a coconut?  Really if I wanted to get the premium upgrade feature out I should focus on pushing that to some new Heroku instance and leave fixing automated PR deploys to another time.  Of course automated PR deploys are great when they work, and they help project managers (including me) review PRs faster, and if it worked I wouldn&amp;rsquo;t have to do all the fiddly deploy to get the ENV vars set up for a new Heroku instance to test if the new feature.  The great thing about Heroku PR deploys (when they work) is that they copy all the environment vars from a specified server (in this case develop) and things are good to go.  However, running &lt;code&gt;rake db:seed&lt;/code&gt; to pre-populate the database as part of the &lt;code&gt;app.json&lt;/code&gt; post-deploy script was giving this error message:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FATAL:  permission denied for database "postgres"
DETAIL:  User does not have CONNECT privilege.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but ironically, immediately after that we had all the output from what looked like a successful run of db:create and de:seed.  Confusing.  We&amp;rsquo;d had a similar &lt;a href="https://www.pivotaltracker.com/story/show/116276111"&gt;issue on LocalSupport previously&lt;/a&gt;, which had ultimately been fixed by &amp;hellip; I&amp;rsquo;m not sure.  LocalSupport automated Heroku PR deploys had been working for a while.  They were now stuck on a separate issue of us having too many apps, even though they were set to auto-delete after 5 days of inactivity.  Actually now that I type it out, I think the problem might be that the LocalSupport develop server is on my personal account, and I have a load of junk apps there; gotta clean those out - argh, yak shaving!  Either the definite trend over the last few months appears to have been Heroku gradually introducing new limits which we are falling foul of in new and unpleasant ways.&lt;/p&gt;

&lt;p&gt;Anyway, the LocalSupport ticket (and an old Heroku ticket) included some ideas for changing app.json, e.g. including an explicit migrate step, and this from the Heroku folks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a caveat when building review apps that we have requested a new database addon, but it&amp;rsquo;s not guaranteed to be provisioned during the build phase. It sounds like something in your application is trying to access the database before your database is up and ready to receive connections.&lt;/p&gt;

&lt;p&gt;The ideal fix is to track down why the app is connecting to the database during build and try to prevent that. If that&amp;rsquo;s not an option, we also have a buildpack that you can use to wait for your database to come up: https://github.com/heroku/heroku-buildpack-addon-wait.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn&amp;rsquo;t get to trying the build pack suggestion, instead going through a series of changes to app.json; moving the develop server into a heroku pipeline (see image below); an analysis of the stack trace associated with the above database fail, which seemed to possibly implicate &lt;a href="https://github.com/airbrake/airbrake/issues/620"&gt;airbrake&lt;/a&gt; but probably not.  Ultimately I did not get it working, but did succeed in spamming Raoul and myself with failed Slack invites that get generated as part of the &lt;code&gt;rake db:setup&lt;/code&gt;.  I posted support requests to Heroku, which as of this morning have not been picked up and as of this morning I tried removing the &lt;code&gt;rake db:setup&lt;/code&gt; completely, which allowed the app to report &amp;ldquo;successful&amp;rdquo; deployment, but when I looked there was just nothing there.&lt;/p&gt;

&lt;p&gt;&lt;img alt="heroku pipeline" src="https://www.dropbox.com/s/x6bmiswu6j89q8s/Screenshot%202016-10-21%2011.27.48.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Despite being admin, Raoul reported that he couldn&amp;rsquo;t even see the develop server in the Heroku GUI, and had removed his account over night.  I re-added him, put the &lt;code&gt;rake db:setup&lt;/code&gt; back in, adjusted the config to allow us to set Slack invites to be disabled on develop, and tried another push.  I felt like I could burn a lot of time on this.  The next sequence of things to try with this nasty delayed feedback loop are:&lt;/p&gt;

&lt;p&gt;1) remove &lt;code&gt;rake db:setup&lt;/code&gt; again - maybe I can then just run from command line to a) get a working instance and b) understand the error better
2) try the suggested &lt;code&gt;heroku-buildpack-addon-wait&lt;/code&gt; from Heroku
3) re-create the Github web hook that is presumably lending Raoul&amp;rsquo;s credentials to every attempt to deploy an instance for a PR&lt;/p&gt;

&lt;p&gt;Conversely I could say that this is all yak-shaving, and yak-shaving with a time delay as to when the yak is shaved is a real pain.  If I really wanted to get back on track to deploying the feature what I could be doing is just deploying a Heroku instance from scratch and starting work on prodding at the feature, and getting my head back around the data migration we need so that I can write some manual instructions, or get a script together.  We will see.  Having blogged I guess I will now work through all the email and Slack messages that are backing up, and look through/add-to my priority list to work out what&amp;rsquo;s the most profitable way to spend the next few hours.  Yaks!&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ZZa-80c9qos"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>To Pair or Not To Pair</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/20/to-pair-or-not-to-pair/"/>
    <id>http://blog.url.com/2016/10/20/to-pair-or-not-to-pair/</id>
    <published>2016-10-20T01:00:00+01:00</published>
    <updated>2016-10-20T19:31:50+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Okay, some coding needs to get done.  Right now there are several things that might bring in more critical revenue for AgileVentures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1342"&gt;PayPal integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1344"&gt;Sponsor others functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1343"&gt;Mid range premium plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have at least one potential sign up standing by on the first two, and after several rounds of feedback a general sense that releasing some mid range premium plans might have a significant impact.  Yesterday I burned a big chunk of time in a meeting with a potential sponsor, and if I can close that deal it&amp;rsquo;s a big step forward, so I don&amp;rsquo;t begrudge the time so much, but I didn&amp;rsquo;t get much programming done.  Michael and I were mid-way through another feature to allow upgrade from premium to premium plus.  The &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1323"&gt;PR&lt;/a&gt; is green after some solo work, but deploying it involves a data migration and there&amp;rsquo;s a fair amount that could go wrong.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also starting to ask myself if I could make faster progress on some of these things solo.  I&amp;rsquo;ve been very committed to pair programming for several years now and I really do believe in the value of pairing to distribute knowledge through the team, and to help everyone learn and improve.  However we don&amp;rsquo;t have a big team to pair rotate through on WebSiteOne, and whilst we have onboarded or re-boarded a couple of junior/mid-level devs recently, the logistics of getting them together as they do job-hunts in parallel are making my head spin.  Back in the day I used to get up at 4am and do 3 hours coding before breakfast.  Maybe I need to do something like that again to push us forward, or maybe that would be grossly counter-productive.&lt;/p&gt;

&lt;p&gt;Sensibly with all the features it&amp;rsquo;s one thing at a time and don&amp;rsquo;t stress too much about which to do first.  I think the existing feature needs to be pushed out.  In the long run it will make sense to support easy upgrade from one plan to the next.  Voting on the new features is sensible.  In the new AsyncVoter project we&amp;rsquo;re making some good progress by having different people alternate taking the lead on the votes. I should push that in my other projects, although the nature of AsyncVoter is that everyone is keen to understand the &amp;ldquo;bot&amp;rdquo; role to help implement it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got another long meeting today, which is an important chance to meet some different local charities but it will prevent me being at the &amp;ldquo;Martin Fowler&amp;rdquo; scrum, and I won&amp;rsquo;t be able to help coordinate others pairing, or get much pairing done myself.  One of the big upsides of pairing is task focus.  Your pair helps you stay on task.  At the moment I&amp;rsquo;m heavily distracted by slack and email and a slew of different admin tasks.  One step at a time.  If I&amp;rsquo;m going to make my next meeting today&amp;rsquo;s will have to be a short blog.  Not a bad thing perhaps as people keep telling me I go on too long.  More programming blogs soon I hope!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bug Hunt</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/19/bug-hunt/"/>
    <id>http://blog.url.com/2016/10/19/bug-hunt/</id>
    <published>2016-10-19T01:00:00+01:00</published>
    <updated>2016-10-19T21:05:33+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For about 12 hours now our Google Hangouts plugin have been failing.  I discovered it yesterday when I tried to start the &amp;ldquo;Kent Beck&amp;rdquo; scrum.  I opened an &lt;a href="https://github.com/AgileVentures/HangoutConnection/issues/34"&gt;issue on our HangoutConnection repo&lt;/a&gt;.  The Hangout plugin was asking for authorisation, which it normally only does on first install:&lt;/p&gt;

&lt;p&gt;&lt;img alt="asking for permission" src="https://www.dropbox.com/s/p9671p484k2vtdd/Screenshot%202016-10-19%2009.17.56.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;clicking &amp;ldquo;continue&amp;rdquo; brings up this error screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="oauth2 fail" src="https://www.dropbox.com/s/hmifa1v3lmiwbns/Screenshot%202016-10-19%2009.18.59.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;Yesterday I was desperately flailing to work around this.  The same problem was occurring in multiple browsers.  When the hangout plugin fails we get no notification on Slack.  Naturally we can post the hangout URL directly into slack manually which is a pain, but the bigger issue is that if the hangout plugin fails, then the main AV website isn&amp;rsquo;t updated about the existence of the hangout, so we don&amp;rsquo;t track its usage. More importantly than that, links to the live hangouts are not set on the website.  This means that people browsing the website and seeing &amp;ldquo;Scrum live&amp;rdquo; cannot access the correct scrum.  We have a manual override functionality to allow a scrum master to set the hangout link for an event, but it isn&amp;rsquo;t working.&lt;/p&gt;

&lt;p&gt;I opened &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1340"&gt;another issue&lt;/a&gt; for that, and gnashed my teeth over no one joining the scrum.  Three people had RSVP&amp;rsquo;d to the meetup event; not that that means much - clicking the meetup RSVP button is quick and easy, and for online meet ups I&amp;rsquo;d say we&amp;rsquo;re generally lucky to get 1 in 4 of RSVPs making it into the hangout.  Even when the system is working totally smoothly, many people will be put off by steps like having to install the Google talk plugin, or the notice that &amp;ldquo;people you do not know will be able to watch you&amp;rdquo; that comes up for our google hangouts on air, etc.  I did manually post the link into the meetup chat, but anyone going to the main site via the link that we have in the meetup location would have not been able to join my hangout.&lt;/p&gt;

&lt;p&gt;I was in a bad mood, I blew up at my kids for the ongoing mess in the hallway with their shoes scattered around.  It was not a great evening.  I didn&amp;rsquo;t sleep well and woke early.  Since I was awake I decided to go on a bug hunt.  The evening before I had been perplexed that we didn&amp;rsquo;t seem to have a test for the manual hangout link update feature.  Part of my frustration was the difficulty I had had convincing different developers over the years that this was an important feature.  They didn&amp;rsquo;t understand why it was needed, attempted to take it out.  Why do we need it when we have the hangout plugin?  Because 1 time in a 50 the hangout plugin fails.  Maybe that 1 in 50 case isn&amp;rsquo;t worth the effort, but we seem to be forever on the cusp of the hangout plugin failing permanently.  It stopped working for two days in the summer and then came back on.  Google is migrating from &amp;ldquo;Hangouts on Air&amp;rdquo; to &amp;ldquo;YouTube Live&amp;rdquo;.  If we lose hangout plugin functionality we&amp;rsquo;ll need manual updates to keep a lot of our existing site functionality relevant.&lt;/p&gt;

&lt;p&gt;Anyway, so I had searched for a test by grepping the term &amp;ldquo;Edit hangout link&amp;rdquo; (which is the menu item you click) in the spec and feature directories.  No hits.  Did we not have a test for this?  Wasn&amp;rsquo;t this a sideshow?  Shouldn&amp;rsquo;t I be debugging the hangout plugin itself?  I was not optimistic about finding a fix for the hangout plugin issue and so I thought at least I can put a test in for this feature that I really want to work.  A deeper investigation showed me that there was a test, and I hadn&amp;rsquo;t been able to grep it because it was using a JavaScript trick to click on the menu item:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="nt"&gt;@javascript&lt;/span&gt;
  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Edit Hangout URL
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am on the show page for event &lt;span class="s"&gt;"Scrum"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I open the Edit URL controls
    &lt;span class="err"&gt;And I fill in "hangout_url" with "http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//test.com"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click on the Save button
    &lt;span class="err"&gt;Then I should see link "Join now" with "http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//test.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I open the Edit URL controls/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="sx"&gt;%q{$('li[role="edit_hoa_link"] &amp;gt; a').trigger('click')}&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so great, we had a test, but the functionality was failing on production.  My thoughts of an early morning TDDing evaporated and I moved to test the system on the develop server.  The develop server had been slept by Heroku due to me using up all the available hours on my personal account.  Gah.  I pushed the develop server over to my NeuroGrid company account where it would start consuming $7 a month.  Not ideal, but I needed to stay focused on this bug.  Although ironically I was distracted from it by the thought that while I waited for the develop server to come up I could see if the hangout plugin was failing on the staging server.  The staging server is set up to use the develop hangout plugin, which we had been checking the day before to see if Joao&amp;rsquo;s PR for title updating would work.  The develop hangout plugin was now slightly different, but it was worth a try to see if the same authentication failure would come up.  I was stymied by some errors regarding loading projects on staging.  We had sidestepped them in the manual test session with Michael and Sasha the day before, but I was solo-ing now and I was like, let&amp;rsquo;s get to the bottom of these.&lt;/p&gt;

&lt;p&gt;The projects index page was failing with:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;No route matches {:action=&amp;gt;"show", :controller=&amp;gt;"users", :id=&amp;gt;nil} missing required keys: [:id]
/app/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/routing/route_set.rb:234:in `optimized_helper'
/app/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/routing/route_set.rb:220:in `call'
/app/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/routing/route_set.rb:345:in `block (2 levels) in define_url_helper'
/app/app/views/projects/_listing.html.erb:52:in `_app_views_projects__listing_html_erb___4267003586796215631_69973986642740'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which corresponded to this code:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= "Created #{time_ago_in_words(project.created_at)} ago" %&amp;gt; by &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= link_to project.user.display_name, user_path(project.user) %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seemed like some projects in staging had nil users.  Usually staging has a clone of production data, but we&amp;rsquo;re paying for a bigger db on production and we&amp;rsquo;d truncated some tables on staging.  I briefly considered pulling over a fresh copy of the production database, but thinking that would incur charges, I went for clearing up the data instead.  Logging into Rails console on staging I used the following to remove all projects that had users with nil ids:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could now see the projects index page again on staging.  But there was another error for looking at an individual project page:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Parameters: {"id"=&amp;gt;"websiteone"}
undefined method `display_profile' for nil:NilClass
/app/app/models/project.rb:42:in `select'
/app/app/models/project.rb:42:in `members'
/app/app/controllers/projects_controller.rb:18:in `show'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;corresponding to this code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;members&lt;/span&gt;
  &lt;span class="n"&gt;followers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:display_profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the project followers seemed to be nil.  These follower relations were through the acts&lt;em&gt;as&lt;/em&gt;followable gem.  I read the documentation for the gem, checked the schema and worked how to delete all the nil followers:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Follow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;follower_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could now see an individual project page on staging and the start a hangout button.  I got the same authentication error.  I&amp;rsquo;d tidied up staging in a way that would make testing hangouts easier in the future, but had only managed to confirm that the plugin authentication error was ocurring for at least two versions fo the plugin and thus more likely to be something on Google&amp;rsquo;s side that we might not be able to fix.  I almost started to compose a blog about data integrity constraints and gracefully code failure.  Bottom line, interface, just display something, anything! I have no interest in 500 errors. I dragged myself back to the hangout narrative and got googling. I found some helpful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16850350/got-origin-mismatch-error-in-google-share-api"&gt;http://stackoverflow.com/questions/16850350/got-origin-mismatch-error-in-google-share-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/+/sign-in-faq#were_seeing_error_origin_mismatch_during_sign-in_testing_what_might_be_the_issue"&gt;https://developers.google.com/+/sign-in-faq#were_seeing_error_origin_mismatch_during_sign-in_testing_what_might_be_the_issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://productforums.google.com/forum/#!topic/hangouts/Y6YdjONMu6Q"&gt;https://productforums.google.com/forum/#!topic/hangouts/Y6YdjONMu6Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I spent the next 30 minutes tweaking things through the google api console.  It looked like our &amp;ldquo;Authorized JavaScript origins&amp;rdquo; for OAuth were all up to date.  I even managed to make G+ login work on the develop server, making it seem like there was no wholesale authentication fail on Google&amp;rsquo;s side.  The last link in the list above (a locked discussion ironically) talked about a potentially brittle fix to the authentication problem.  I tried it on staging, but no joy.  It seemed like the googlecontent URL it suggested adding to the JavaScript origins was variable. A frustrating morning, but I thought to myself perhaps we can use this as a spur to produce a better solution.  Maybe we can get YouTube Live events to start directly from Slack &amp;hellip;&lt;/p&gt;

&lt;p&gt;However in a further fit of irony, just as I was writing the first paragraph of this blog post, I noticed that the googleusercontent URL in the issue that I opened was the same as the one in the hangout I had just brought up to create screenshots for the blog.  I tried adding it to the &amp;ldquo;Authorized JavaScript origins&amp;rdquo; for the production hangout plugin and lo and behold it all worked.  Gah!  I think I had been putting the production googleusercontent URL into the develop plugin.  I tried to test that theory on staging.  Staging was working to and it already had the correct googleusercontent URL in the develop hangout config on the google console API.  I guess maybe it just took extra time to propagate.  Aaaaaaaaaaaa &amp;hellip;.&lt;/p&gt;

&lt;p&gt;To tie up lose ends I finally did the check of the manual hangout link editing on the develop server, and it worked for an event that didn&amp;rsquo;t have an existing hangout URL.  I guess there must be some corner case on production where we have an event that&amp;rsquo;s been run and finished and left with an old hangout url and manually trying to override that fails.  So the path is clear - the google hangout plugin will soldier on for a few more days? weeks? months?  In the meantime I should try and create a test that actually replicates the circumstances in which the manual update of hangout urls fails on production.&lt;/p&gt;

&lt;p&gt;Not that I&amp;rsquo;m not thinking about whether we couldn&amp;rsquo;t build our own screenshare app with WebRTC, or switch to Zoom or GotoMeeting, or find some other collaboration framework that didn&amp;rsquo;t lead to massive debugging sessions every three months, as seems to generally under the shadow of a possible Google sunset &amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lacking Narrative Thread</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/18/lacking-narrative-thread/"/>
    <id>http://blog.url.com/2016/10/18/lacking-narrative-thread/</id>
    <published>2016-10-18T01:00:00+01:00</published>
    <updated>2016-10-19T06:10:43+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There is a lot going on, and heads up this blog post meanders over the stuff that happened yesterday rather than having a coherent narrative thread.  So how&amp;rsquo;s that different from any of your blogs you ask?  Very funny :-) So anyway we got a docker PR merged in on LocalSupport yesterday.  I had the app running in a docker instance on my local machine.  It was all reminiscent of vagrant a few years back, except there seems to be lots more excitement about docker at the moment.  Heroku and AWS are offering container services, where you can deploy your containers like docker.  I&amp;rsquo;ve been pretty happy with Heroku&amp;rsquo;s PaaS (Platform as a Service) compared to AWS&amp;rsquo;s IaaS (Infrastructure as a Service) in terms of things working as I expected, and the PaaS reducing the complexity I have to deal with.  That said I haven&amp;rsquo;t been trying to deploy real-time machine learning components and have been dreaming to the siren song of traditional web apps.  Maybe containers like docker will give more flexibility and robustness in the future, but at the moment I&amp;rsquo;m not sure what end-user problem we&amp;rsquo;re solving, apart from following the interests of our developers.  But, as I&amp;rsquo;ve mentioned before, our developers are also our end-users and if they&amp;rsquo;re inspired to look at something, then arguably it makes sense to follow their lead.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still not at 100% pairing fitness, so Michael was pairing with Sasha and knocking off a few WebSiteOne tickets.  I joined for a bit and did a manual test of Joao&amp;rsquo;s PR on HangoutConnection, to update the notification title to what the user sets it to be, which looked good but failed to work on the staging server.  I think the issue is that Google&amp;rsquo;s Hangout API doesn&amp;rsquo;t do what it says it should do.  I think Yaro pointed that out a couple of years ago, so it was a little frustrating to burn time on the same issue.  The future for Google Hangouts looks a little uncertain and there are two other thorns in my side recently, which are that the toolbox plugin no longer saves my lower third banner (so I&amp;rsquo;m re-entering it each time) and we keep getting messages about &amp;ldquo;failed to go live&amp;rdquo; when things are going live, which we&amp;rsquo;re now ignoring, but will be confusing for many.&lt;/p&gt;

&lt;p&gt;At some point maybe we should investigate switching to something like Zoom, which does video conferencing, has a free tier and so on.  To be honest what I&amp;rsquo;d really like is stronger support for text scrums, but let&amp;rsquo;s see how the AsyncVoter project goes.  Pleasingly having run a couple of async votes on the features in the AsyncVoter project has provoked a lot of assumption busting discussion and I&amp;rsquo;m reassured that the folks working on the weekend are really grasping the functionality we&amp;rsquo;d like to have in place to support on-going voting on stories around the clock.  Async text voting on stories, chores and bugs has the great advantage that it&amp;rsquo;s very light weight to join, easy to observe and it keeps an ongoing flow of chat about the project taking place in the Slack channel that everyone can dip into.&lt;/p&gt;

&lt;p&gt;My whole day was bits and pieces of reviewing and merging PRs, moving async votes along, snippets of scrums and hangouts to resolve minor issues.  No serious head down programming such as might deliver a serious feature on WebSiteOne or Two.  I did do more manual connection between AgileVentures scrums and the Remote Pair Programming meetup group.  I think we&amp;rsquo;ve now had a least two new people join hangouts through that.  At yesterday&amp;rsquo;s Kent Beck we had one person coming from the MOOC, one from the meet up group and one who had seen me present at Remote Rails Conf; along with two regulars.  Cusp of critical mass?  I&amp;rsquo;ve thought that so many times before I know not to get my hopes up.&lt;/p&gt;

&lt;p&gt;What I did manage to get done was to reach out more people about evolving the charity business model of AgileVentures.  I&amp;rsquo;m burning to get some new plans out, get upgrade functionality into the interface of AgileVentures, but getting feedback from first our mentors and then our existing premium members makes sense.  It feels Agile.  Again I&amp;rsquo;m struck by the difference between asking people in a group/public context and asking people individually.  I guess I&amp;rsquo;ve always known that if you ask a generic question in a group then that&amp;rsquo;s far less effective because everyone thinks &amp;ldquo;well he&amp;rsquo;s not asking me&amp;rdquo;.  I think what I hadn&amp;rsquo;t really absorbed was the majority of people don&amp;rsquo;t like talking in front of each other.  I guess it&amp;rsquo;s like this.  Someone asks a general question in a general channel - you&amp;rsquo;re busy, and there&amp;rsquo;s not necessarily much upside for you to answer given that it takes effort and exposes you to judgement by the group; you might be wrong!  However if you&amp;rsquo;re asked the same question by someone in a private 121 context, then not answering might seem rude, and you might even be flattered that your opinion is being asked, and it&amp;rsquo;s less complex to craft a reply.  You only need consider how the person who has asked you will react to your response.  You don&amp;rsquo;t have to worry about how many others might judge what you have to say.&lt;/p&gt;

&lt;p&gt;Sorry if that all seems transparently obvious to everyone, but it&amp;rsquo;s taken me a while to come up with the mental model, because my own mode of operation is just to say what I&amp;rsquo;m thinking, pretty much all the time.  Sincere apologies to everyone I&amp;rsquo;ve offended over the years, or made uncomfortable.  It&amp;rsquo;s really not intentional.  I just wear my heart on my sleeve and tend to think out loud.  I hope I am learning to review things somewhat recently, to blunt the sharpest parts of my personality.  Fundamentally it brings me back to trying to understand what&amp;rsquo;s the best value that AgileVentures, and I, can offer them on their professional development path.&lt;/p&gt;

&lt;p&gt;Listening to Ruby Book club on Avdi Grimm&amp;rsquo;s confident coding, I really want to do some quick sessions on playing with Ruby.  These could be a totally free loss-leader.  They could be a pay-to-join mob programming session that Thomas has been saying he&amp;rsquo;d be up for.  They could replace the 121 support at the £25 premium level or they could even replace the F2F support at the £50 premium level.  I was saying the other day that people keep on wanting to talk in private and I keep pushing them to group forums for learning and development purposes.  I think people breaking down their fears and being willing to fail in public IS good for them.  Of course it needs to be at their pace and when they are ready.&lt;/p&gt;

&lt;p&gt;I think the 121 premium level I&amp;rsquo;m thinking of is making sure you have an assigned mentor that you know you can go to for 121 support.  Although perhaps the reality of offering any service is that you&amp;rsquo;ll need to provide 121 support at all times.  If you turn down requests for help, you turn people away.  I&amp;rsquo;d like our users to tell me what they really want and how much they&amp;rsquo;re willing to pay for extra services, the perks that they get from sponsoring the AgileVentures charity; but I guess we have to have a relatively simple plan and go with that.  In the meantime I&amp;rsquo;ll keep asking them individually what they think &amp;hellip;&lt;/p&gt;
</content>
  </entry>
</feed>
