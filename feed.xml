<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-02-27T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Commitment</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/27/commitment/"/>
    <id>http://blog.url.com/2017/02/27/commitment/</id>
    <published>2017-02-27T00:00:00+00:00</published>
    <updated>2017-03-21T21:41:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="commitment sign" src="/images/commitment.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Urgh, another mild cold :-( but a productive few days.  We had our new style WebSiteOne kick-off meeting on Friday following Michael&amp;rsquo;s suggestion that we re-start the meetings, but that we each bring up to three tickets that we care about; rather than just working through whichever tickets are in the backlog.  This approach came out of discussions around the AgileBookClub podcast, with an emphasis on focusing on the &amp;ldquo;business&amp;rdquo; value associated with each ticket.  I chose the following tickets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1530"&gt;Add tooltips for &amp;ldquo;upgrade to mob&amp;rdquo; to explain and/or add info buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1555"&gt;Adjust initial messaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1554"&gt;Adjusting how &amp;ldquo;next scrum&amp;rdquo; is displayed to new users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while Michael chose the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1560"&gt;Change call to action button verbiage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1487"&gt;Alternatives to google hangouts for pairing and scrums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1523"&gt;Convert Sign up links into big, orange buttons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and we worked through each, writing new user-stories informed by our recent AgileBookClub podcast discussions.  Here are Michael&amp;rsquo;s tickets and the user stories we added.&lt;/p&gt;

&lt;h3&gt;Convert Sign up links into big, orange buttons&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As an AgileVentures Admin
So that more people ultimately sign up for paid plans
I would like prominent buttons for sign up on the plan description pages
Whereas currently they are simply hyperlinks
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Alternatives to google hangouts for pairing and scrums&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As AgileVentures Admin
So that we can analyze usage patterns and reflect teleconference participation in member profiles
I would like some mechanism of tracking teleconference participation 
Instead of the Google Hangouts API which is being removed in April

As AgileVentures Scrum master
So that I don't have to manually copy and paste teleconference details into other media
I would like some mechanism to alert potential participants that a teleconference is taking place (hangout and video stream)
Instead of the Google Hangouts API which is being removed in April
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Change call to action button verbiage&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As an AgileVentures Admin
So that as many people as possible click through and sign up for membership and subscriptions
I want consistent and simple messaging on buttons (e.g. get started) that lead them to sign up/subscription pages
Instead of the current variation in messaging
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also voted on the tickets using Arreche&amp;rsquo;s new AsyncVoter system which worked really well, and we were very pleased to have Raoul join us.  We got through the 6 tickets in good time, and most of them, with the exception of the hangout API one, were one point stories.  Following what I had been hearing from Pat and his running of the WikiEduDashboard scrum/sprint I committed to completing my three tickets before another meeting the following Friday.  Michael committed to doing one of his, and I asked if he could investigate &lt;a href="https://github.com/AgileVentures/av-static-website/issues/206"&gt;another ticket&lt;/a&gt; related to the static site.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d been reading about the importance of these kind of commitments in Agile as part of research for a chapter on a book I&amp;rsquo;m writing on Agile methods in Open Source development.  According to Wikipedia, the Scrum methodology includes &lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)#Values"&gt;five values&lt;/a&gt; which include &amp;ldquo;Commitment&amp;rdquo;, specifically that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Team members individually commit to achieving their team goals, each and every Sprint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the last year I&amp;rsquo;ve been gradually sliding away from any formal sprint cycle on the projects I&amp;rsquo;m managing, as I get dispirited and demotivated by the difficulties I&amp;rsquo;ve faced trying to arrange regular meetings at times that everyone can attend.  I was also getting the sense that folks were not enthusiastic about such meetings, and so it&amp;rsquo;s kind of a breakthrough with Michael to discover that the problem was not necessarily the presence of a meeting, per se, but the structure of that meeting.  Michael&amp;rsquo;s enthusiasm for the new structure is helping me feel more motivated for sprint cycle meetings.  I asked Michael at the end of the meeting on Friday if things had gone as he had hoped, if the discussion had been at the right level and he said yes, and so hopefully we can continue this format next week.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s funny - I&amp;rsquo;m just really happy to keep bashing away at tickets - happy with little structure, but I do notice that without a commitment to getting particular things done, all my different admin tasks can trump development work.  Maybe I do need a little more structure and commitment &amp;hellip; although trying to get people to make committments to doing things makes me feel strange.  In some ways I would rather they wouldn&amp;rsquo;t commit and then either or do, or not do.  In the absence of any committment there is no disappointment :-) Then again maybe making small structured committments is a framework and more folks will feel positive in the long run?  We&amp;rsquo;ll see :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/-MeZJ3-Vy6o"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2lXoxNzX2Cw"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum and Kickoff meeting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Not Much Programming</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/24/not-much-programming/"/>
    <id>http://blog.url.com/2017/02/24/not-much-programming/</id>
    <published>2017-02-24T00:00:00+00:00</published>
    <updated>2017-03-21T21:35:42+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="typing at keyboard" src="/images/coding.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;As I review and publish blogs from several months ago to medium, it&amp;rsquo;s clear I&amp;rsquo;m doing a lot less programming than I was.  I&amp;rsquo;ve been doing more charity admin and, I guess, &amp;ldquo;business development&amp;rdquo;.  I&amp;rsquo;ve stopped pair programming regularly with Michael at least partly so that I can easily switch tasks through the day, but it is meaning that I won&amp;rsquo;t do a big chunk of coding unless I really clear space for it.  I am still reviewing a lot of code, looking at a lot of pull-requests, tech-tests, deploying code (devops?), running mob sessions and other bits and pieces.  I think the main things we&amp;rsquo;ve managed to achieve over the last year with the AgileVentures site is that it now looks better on mobile, the event creation process is more streamlined, and we have the Premium payment frameworks in place.&lt;/p&gt;

&lt;p&gt;I guess that&amp;rsquo;s reasonable progress, but it feels like we&amp;rsquo;ve plateaued in terms of income from Premium members, for the moment at least.  Official approval as a Charity has unlocked Google&amp;rsquo;s AdWords grant which has quadrupled traffic to our site, and is slowly pushing up our free members, but not leading directly to any increase in income so far.  We did land a small grant from the WikiMedia EDU group which is now paying for project management for the WikiEduDashboard project, which is a significant step forward in terms of sustainability, and that seemed to come almost directly from my appearing on the Ruby Rogues podcast.  We have corporate sponsorship from drie, but further collaboration with drie and the edX MOOC collaboration are both held up by negotiations between UCBerkeley and edX about technicalities related to the re-release of the course.&lt;/p&gt;

&lt;p&gt;For all my effort reaching out to potential sponsors online I&amp;rsquo;ve generated nothing concrete outside of introductions through friends.  Maybe it&amp;rsquo;s time to withdraw from all this online networking and focus on coding again?  The marketing team is looking like they are going to be perfectly capable of making great progress with just occasional input from me.  The first round of Premium signups came largely, I think, through me reaching out to people via email.  Alot of the upgrades have come through me reaching out to folks on Slack.  The things blocking the marketing team are coding and infrastructure issues, so me coding is probably going to be the thing that helps the most.&lt;/p&gt;

&lt;p&gt;Of course, I&amp;rsquo;m also trying to write a book and start a podcast as long term &amp;ldquo;lead generation&amp;rdquo;, but I feel like it might be time for a coding binge &amp;hellip;&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fV1JYPRXCiw"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x14sVgrKeoc"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Learn by sweeping</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/24/learn-by-sweeping/"/>
    <id>http://blog.url.com/2017/02/24/learn-by-sweeping/</id>
    <published>2017-02-24T00:00:00+00:00</published>
    <updated>2017-03-21T22:12:14+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="ship" src="/images/ship.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Life is full of apprenticeship, eating, walking, talking, dealing with our social environment, reading, writing, counting, programming. We have learnt, discovered or invented anything we do. Pedagogy is everywhere and everybody is a teacher.&lt;/p&gt;

&lt;p&gt;If anyone is both a trainee and a trainer, if learning is so common and widespread, why is pedagogy so controversial?  Probably because learning is vital.  Moreover, because we think that the way we think, the way we grasp our environment and the world strongly depends on the way we have learnt and what we know. Knowledge is power and many people in the Valley could sing &amp;ldquo;I&amp;rsquo;ve got the Power, I&amp;rsquo;ve got your Data, I&amp;rsquo;m gonna mimic your Brain, you&amp;rsquo;ll be another clone of my computers :-)&amp;rdquo;&lt;/p&gt;

&lt;p&gt;TMTOWTDI, training, learning, teaching, educating, discovering, inventing are a few verbs that describe very different ways to learn. A coach differs from a trainer, a trainer from a teacher. A school is not a research lab&amp;hellip; &lt;/p&gt;

&lt;p&gt;You may learn to do, to perform, to make, to build, to design, to invent or to understand, you may even learn to learn, and learn to teach. And learning is not confined to human beings.  Animals learn too.  And your computer will soon begin to learn too.&lt;/p&gt;

&lt;p&gt;There are many lessons out of computers learning, possibly because computer scientists try to mimic the way we learn : program (acquire knowledge), test (assess and improve), supervised (mimetic), unsupervised (exploratory), reinforcement (learn by doing).  But there are some caveats too.  Take reinforcement learning.  The computer is &amp;ldquo;punished&amp;rdquo; for wrong answers and &amp;ldquo;rewarded&amp;rdquo; for good answers.  Have you ever seen a computer sulking a a corner?  It&amp;rsquo;s a grim perspective.  I hope that, in the future, a global initiative will ban computer bullying.  Well, computers are things.  They don&amp;rsquo;t care about bullying. &lt;/p&gt;

&lt;p&gt;A recent article in ACM Communications magazine, that traces the intellectual itinerary of JH.Holland, gives me a better hint.  Learning is all about exploration, selection and exploitation.  No more punishing, we exploit things our ancesters tested.  We explore new things.  We select things that work and forget things that don&amp;rsquo;t - well, we may store it somewhere to prevent us from trying again. After all, learning consists in forgetting your failures and magnifying your successes.&lt;/p&gt;

&lt;p&gt;Sometimes, forgetting is not easy.  My hobby includes restoring wooden boats.  In shipyards, apprentices learn by doing.  Doing is a great word for tidying up the shopfloor, gathering tools, sweeping sawdust.  So why does the yard master punish apprentices before they try and fail?  In a shipyard, you will find no version control system, no revert button, no rollback procedure and no backup and restoration tools.  People do their best to prevent wrong cuts in expensive wood.  And people do their best too to prevent injuries while working in a hazardous environment.  Participating in peripheral tasks is a great way to accustom with the shop and to grasp the big picture of the trade.  You gain confidence, trust and responsibilities as you get involved in the team. &lt;/p&gt;

&lt;p&gt;If sweeping is not your cup of tea, I may suggest you alternatives.  The first one is to learn the hard way by establishing your own shop.  As long as you pay for the wood, you are free to cut.  I followed this path and I definitely end up sweeping my own sawdust. Achievments are (sometimes) very rewarding &amp;hellip; and failures are quite punishing.  The second one is to read Richard Feynman&amp;rsquo;s book, &amp;ldquo;the pleasure of finding things out&amp;rdquo;.  I don&amp;rsquo;t try to mislead you.  Richard Feynman was probably a very hard worker and a very demanding teacher.  But he put the stress on what really matters : the freedom to explore, and the wonder that we feel for sciences and natural world are more important than a few bad cuts in an oak timber.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Asking Questions</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/23/asking-questions/"/>
    <id>http://blog.url.com/2017/02/23/asking-questions/</id>
    <published>2017-02-23T00:00:00+00:00</published>
    <updated>2017-03-15T21:34:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The final part of the FutureLearn interview was a chat with a client specialist and front end developer, with questions about my experiences in teams and working with clients.  I enjoyed the conversation, and it allowed me to articulate something that I&amp;rsquo;ve been thinking over and over again and still have trouble putting into practice.  It&amp;rsquo;s this process of avoiding blocking people, and what to do instead.  I use the term blocking to mean disagreeing, correcting grammar/pronunciation, ignoring suggestions.  A whole range of things.  Now sometimes it&amp;rsquo;s important to block.  I don&amp;rsquo;t think one should never block, but that blocking always come with a cost.  Generally when people are speaking they are trying to get something across, some idea or opinion or what have you.  Maybe some enlightened folks are really not bothered to be blocked, but many of us, if we are making the effort to say something, would probably prefer to be allowed to fully express our thought.&lt;/p&gt;

&lt;p&gt;Some might relish being blocked in that they enjoy a heated argument, and all power to them; but the danger is that the heated discussion that two people are enjoying (at some level) is not much fun for other people who are present at the same time.  Anyway, so one of the FutureLearn folks asked me &amp;ldquo;so you don&amp;rsquo;t mean to say you should never disagree with anything?&amp;rdquo;, and I replied that I almost did.  Not that I&amp;rsquo;ve been much good at this, but the process for deciding whether to bring up a block should include some consideration of the number of people involved.  Are you talking one on one, or is this a group meeting with 15?  Also, how important is it really?  Is the building on fire and if people don&amp;rsquo;t stop talking and leave now they&amp;rsquo;re all going to die?  Also, are you in a position of some seniority and tasked with, or simply feel responsible for, helping a group or individual feel good about at least some aspects of what they are doing, and empowered to take on challenges; learn from their own mistakes etc.?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure if it&amp;rsquo;s my academic background, but my tendency for a long time has been to treat any problem like a mathematical or logical statement.  It&amp;rsquo;s as if people are coming up to me and saying &amp;ldquo;2+2=4&amp;rdquo; and I&amp;rsquo;ll say &amp;ldquo;go on &amp;hellip;&amp;rdquo;, or they&amp;rsquo;re saying &amp;ldquo;1+1=3&amp;rdquo; and I&amp;rsquo;ll say &amp;ldquo;actually I think you mean &amp;hellip;&amp;rdquo;, with little consideration for anything other than my perception of the logical coherence of what they&amp;rsquo;re saying.  The clear problem with this approach is that my mental model of the world is just that, mine.  I have no monopoly on logically coherent views of the universe, and indeed how important is logical coherence anyway?  Furthermore I&amp;rsquo;m not usually thinking about how people might feel about being blocked.  I&amp;rsquo;d like to think I am slowly getting better at this, but who knows? :-) What I&amp;rsquo;m starting to come round to thinking is that, in the majority of situations, how people feel is far more important than whether what they are saying is objectively correct or not.  Of course this should naturally follow from my own basic assumption that there is no objective correctness.  I belive everything is subjective.&lt;/p&gt;

&lt;p&gt;My own sense that everything is subjective should in principle prepare me for the great differences between people&amp;rsquo;s mental models of the world.  The faulty assumption on my part seems to be that the majority of people are interested in investing time in getting to the bottom of these differences.  I really enjoy pulling apart what I&amp;rsquo;m thinking about to try and work out what assumptions I&amp;rsquo;m working on; debating the relative merits of different approaches, but I&amp;rsquo;m a bit of an outlier there, maybe &amp;hellip; or maybe that all depends on who I&amp;rsquo;m hanging out with on a particular week?&lt;/p&gt;

&lt;p&gt;Anyhow, Ruben at Makers Academy recommmended to me that it&amp;rsquo;s better to ask questions than contradict people, and I laugh at myself for how difficult this seems to be for me to do.  Recently however, I&amp;rsquo;ve been reformulating in my head that the key thing is questioning rather than asserting.  As I said to the FutureLearn people, it&amp;rsquo;s all about assessing how important your own concern is, and then working out whether it&amp;rsquo;s actually important to make a block.  If someone is trying to convince your friend to jump off a cliff, perhaps it is critical to jump in with a block, but even then perhaps a question about consequences is better?  And is it vital that the question is now in front of the group, or is it better to ask the question one on one?  My new resolution is stop making assertions, ask more questions and prefer to ask those questions to the smallest subset of people possible &amp;hellip; we&amp;rsquo;ll see how that goes :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Second Interview</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/22/second-interview/"/>
    <id>http://blog.url.com/2017/02/22/second-interview/</id>
    <published>2017-02-22T00:00:00+00:00</published>
    <updated>2017-03-14T21:52:10+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So yesterday I found myself in a second interview for a &amp;ldquo;Ruby developer&amp;rdquo; job at the UK MOOC provider, FutureLearn.  I&amp;rsquo;ve been applying for jobs here and there over the last six months as it&amp;rsquo;s nice to keep one&amp;rsquo;s options open.  Having surrendered to the idea that AgileVentures won&amp;rsquo;t provide a sustainable income for me anytime soon, it was nice to get a first interview (over Skype) at FutureLearn and then a tech test, and then a second interview.  I was looking forward to the afternoon which was going to be broken up into a discussion of my tech test, a pair programming session and a meeting with some client and frontend specialists.&lt;/p&gt;

&lt;p&gt;The tech test was on writing a game of TicTacToe, which I think I&amp;rsquo;ve blogged about before, and I used an outside-in approach as I&amp;rsquo;d done with the VendingMachine tech test example at Makers Academy.  This approach had not produced code that I was wonderfully proud of, but I was pleased with parts of my hand rolled acceptance tests, and how one could generate new ones from written descriptions of game play that matched the user experience.  I felt I&amp;rsquo;d done a reasonable job of method naming, and had started on refactoring out some different classes.  Late on Friday evening during my week off I&amp;rsquo;d done another version of TicTacToe starting from inside-out, and on the train on the way into the meeting I pushed that a little further, as I was thinking I was starting to more clearly grasp how these two different approaches intermixed.&lt;/p&gt;

&lt;p&gt;In my second version I&amp;rsquo;d driven from unit-tests focused on domain entities such as board, cell and player.  I was at the point of starting to have these entities communicate with each other to play a turn of TicTacToe, or at least update the board representation to reflect a players move.  In the first session with the various methods of the different objects at the forefront of my mind I had written the following: &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid_moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dropping that into the README in the first instance, as a rough sketch of how the domain entities might communicate.  I read that back to myself on the train and felt like I wanted to move the &lt;code&gt;valid_moves&lt;/code&gt; check into the player object, giving me:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My reasoning being that a player entity might well want to be able to review the state of the rest of the board, rather than just the valid moves, before choosing what to do next.  I got the player spec set up to handle that, and after a couple of rounds of changes, and with a dash of dependency injection I had the player spec like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:rules_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="ss"&gt;:rules_klass&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can choose a move'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:valid_moves&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:A1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="ss"&gt;:A1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the player thus:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@rules_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rules_klass&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid_moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; 

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:rules_klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before I moved on to being able to update the board.  Now the &lt;code&gt;board.contents_of(move).hold(player.symbol)&lt;/code&gt; line reflected the properties of the board and cell objects that I had created before.  What would the context be for such a statement?  I created a game class that would have a &lt;code&gt;handle_move(player)&lt;/code&gt; method that would house this code.  The spec ended up looking like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Game&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board_klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board_klass&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;symbol: &lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'handles player moves by updating board with player move'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:choose_move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt; &lt;span class="ss"&gt;:A1&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:contents_of&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:A1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hold&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handle_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think what I was seeing here was a mock train wreck that reflected a possible Demeter violation in the way I had initially written the code.  I had all the tests passing with the Game class set up like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;choose_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contents_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:board&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The train journey ended before I could get any further, but I sensed that the way the test was pointing me would look something like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;by: &lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not sure about that &lt;code&gt;by:&lt;/code&gt; key - just trying to make things as close to an English sentence as possible, which is always a little tricky when a method takes more than one argument.  What I thought the convolution in the test was telling me was that game knew a little too much (a Demeter violation) about the relations that board had with the Cell class.  Changing the code to this last example would mean that the Game class didn&amp;rsquo;t need to have any knowledge of the Cell class, and so testing it would be much simpler, and my domain entities would be more loosely coupled.  I think this is the point that&amp;rsquo;s made in the book &amp;ldquo;Test Driving Object Oriented Design&amp;rdquo;, and it strikes me that this is one of the potential benefits of unit tests, which is to help one evolve one&amp;rsquo;s domain entities into a more loosely coupled configuration.&lt;/p&gt;

&lt;p&gt;Ironically this didn&amp;rsquo;t really come up in the discussion of the tech test at FutureLearn, although we did talk a lot about how most folks attempted the TicTacToe test by creating a series of small classes (as I had done in this second attempt) and I quoted Sandi Metz&amp;rsquo;s 100 line class limit and noted on the dangers of refactoring before one is clear what the next round of changes are likely to be. That latter being my justification for refactoring out a board class, but not yet a player class, in my initial outside-in approach.&lt;/p&gt;

&lt;p&gt;It strikes me that being sufficiently familiar with RSpec to be able to mock effectively and to be aware how the presence of excessive mocking (or mocking things you don&amp;rsquo;t own) is quite a tall order for the beginning programmer.  Furthermore, this benefit is lost, to a degree, when working in a framework like Rails, where the system architecture is laid out for you.  Immediately after the tech test discussion, I was pairing with a different FutureLearn person on adding a feature to a slimmed down version of their site.  We used an interesting style of &amp;lsquo;Given/When/Then&amp;rsquo; within an RSpec/Capybara feature test and then dropped to controller and model specs to get the job done.  It was a smooth pairing experience, switching driver/navigator roles when we got the error message to change significantly.  It just underlined how different it is working with Rails as opposed to Plain Old Ruby Objects (PORO).&lt;/p&gt;

&lt;p&gt;I could go on about the final section of the day, but with code snippets this blog has already gotten quite lengthy, but suffice to say that I was impressed with FutureLearn&amp;rsquo;s interview process and the effort to which they were going to have the interview be a reflection of what it was like to work in their team. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Little Less Conversation</title>
    <link rel="alternate" href="http://blog.url.com/2017/02/21/a-little-less-conversation/"/>
    <id>http://blog.url.com/2017/02/21/a-little-less-conversation/</id>
    <published>2017-02-21T00:00:00+00:00</published>
    <updated>2017-03-21T21:35:42+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday was basically coming back up to speed after a week away from digital communication, gradually transfering the various items from Email and Slack into my TODO list.  I managed to deploy the latest agile-bot config changes to production, do a marketing meeting and record an Agile Book Club podcast.  What was great to see was how active folks had been while I was away, greeting new members in the Slack, running the marketing meetings in my absence.  Lara has got in there and reconfigured the Google AdWords campaign; running experiments on different ads. We now have over 11,000 unique users visiting the site over the last month.  The AdWords signup tracking appears to be working, indicating 31 new member sign-ups after clicking on a Google ad.  Marufa came up with new designs for the pricing pages and Lara&amp;rsquo;s taking the lead on making the first round of tweaks there.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also starting to see more traffic to the non-profit static site, although it&amp;rsquo;s not clear what conversions we should be tracking there.  Michael is telling me that we should do a little less talking and focus on getting more things done.  Although I sometimes feel close to paralysis in terms of what to do next, or what to prioritise.  The Agile Book Club podcast is a great excuse for more conversation, which I do enjoy, and in yesterday&amp;rsquo;s episode I think we provided a forum for Michael to express various feelings he has about how AgileVentures projects don&amp;rsquo;t focus on the high level stories enough.  In the post-show chat our discussion honed those feelings into a plan of action.  Michael said that the reason he didn&amp;rsquo;t like the WSO team meetings of a few months back were that we were working through any and all tickets in the board.  That meant that issues raised by anyone could take the floor.  He&amp;rsquo;d be much more interested in a meeting where someone had reviewed all the tickets in advance of the meeting and then a set of the most important were pre-selected to be the subject of a sprint.&lt;/p&gt;

&lt;p&gt;A great idea, but a lot of up-front work for someone, so I suggested how about we have a meeting where we each bring a maximum of three tickets that we care about to plan for a sprint; and with luck we&amp;rsquo;ll do that on Friday.   It&amp;rsquo;s funny, because sometimes it seems that talking is what&amp;rsquo;s needed to help people get their feelings out, and then collaboratively work out a course of action.  As with all things it&amp;rsquo;s a balance.  What was also clear to me was a variation of my maxim of being careful when &amp;ldquo;blocking&amp;rdquo; people; which is that feedback can be mis-interpreted as a block, and the more people there are in a meeting, the less likely that feedback will be able to be constructively received.  By blocking I mean anything that contradicts what a person is saying, be it correcting their grammar, querying their choice of phrase, or disagreeing with their point.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into the details, as interested parties can get that from the recording of the marketing meeting and the podcast etc., but I do keep coming back to advice I got from Ruben at Makers Academy that it&amp;rsquo;s far better to ask people questions than to make assertions.  For some reason I find it so hard to do that.  My M.O. is so ingrained that when someone makes an assertion that doesn&amp;rsquo;t fit my mental model, my knee-jerk reaction is the make a counter-assertion.  I enjoy the mental interplay, but so many other people don&amp;rsquo;t seem to.  Of course asking too many questions can also be a block.  Let&amp;rsquo;s see, I&amp;rsquo;m going to try to either shut up or just ask single questions for the rest of the week, if I can!  A little less conversation, a little more action maybe :-)&lt;/p&gt;

&lt;h4&gt;Related Videos:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5vx3BstpDuo"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youtu.be/7jCej7JVpkM"&gt;Marketing Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jpsIcZ5pTkQ"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
