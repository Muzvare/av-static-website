<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-12-06T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Speed Coding and Blogging</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/06/speed-coding-blogging/"/>
    <id>http://blog.url.com/2016/12/06/speed-coding-blogging/</id>
    <published>2016-12-06T00:00:00+00:00</published>
    <updated>2016-12-07T10:34:31+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Monday was the usual fight against torpor, but did get an hour&amp;rsquo;s pairing in with Michael on WSO where Michael drove a finish to putting the Paypal payment button on the same page as the Stripe credit card payment.  Before he started on that I got him to pull out the refactoring of the ChargesController to SubscriptionController into a separate pull request.  In the background I had half an eye on the builds of that which were failing due to some regressions on changes to cucumber steps.  We pared down the feature for putting the Paypal element front and center to:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nt"&gt;@stripe_javascript&lt;/span&gt; &lt;span class="nt"&gt;@javascript&lt;/span&gt;
&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following plans exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by card
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Subscribe"&lt;/span&gt; within the card_section
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="c"&gt;# And my member page should show premium details # TODO IMPORTANT - require login?&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by Paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see a paypal form within the paypal_section
    &lt;span class="c"&gt;# And the user should receive a "Welcome to AgileVentures Premium" email&lt;/span&gt;
    &lt;span class="c"&gt;# And my member page should show premium details # TODO IMPORTANT - will need hookup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Leaving in a few comments pointing at important future work.  Feel a bit messy about that - would it be better to be pointing to tickets as part of the bigger premium epic there?  Over lunch I left Michael pairing with Matt who&amp;rsquo;d been observing our pairing session.  They were looking at the feature on preventing tweets of dud videos that Sasha had left, and rather than get involved in a complex refactoring I suggested that the way forward was a new branch that wrapped the existing Twitter functionality in acceptance tests.  &amp;ldquo;Characterisation tests&amp;rdquo; of legacy code as Michael reminded us.  We&amp;rsquo;ll see if all this breaking out of smaller PRs bites us with merge conflicts or makes review easier.  Raoul&amp;rsquo;s been really busy recently so we might have to look at our PR review and deploy process to take account.&lt;/p&gt;

&lt;p&gt;After lunch I solo&amp;rsquo;d to add a sad path to the refactoring of the Premium branch that we&amp;rsquo;d identified since one missing part of the refactoring wasn&amp;rsquo;t caught by the tests.  I got that green and then started on tweaking the CSS for the Premium payment page now that it included both Paypal and Stripe buttons.  Working with the CSS was frustrating, as our controller specific stylesheets don&amp;rsquo;t load automatically on WSO, and even though I identified the code in the layout that would, turning that on produced &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1445"&gt;weird breakages throughout the cucumber tests&lt;/a&gt;.  There&amp;rsquo;s definitely something a little strange going on with the layout - which I think is also affecting performance on my local machine when running in develop mode.  Could this be affecting performance on the main system?  Perhaps a review of our layouts is in order.&lt;/p&gt;

&lt;p&gt;I hacked out a reasonable solution pulling in the controller specific stylesheet directly in the view:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= stylesheet_link_tag params[:controller], 'data-turbolinks-track' =&amp;gt; true  %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and found that the bootstrap &lt;code&gt;well&lt;/code&gt; class produced the sort of effect I wanted:&lt;/p&gt;

&lt;p&gt;&lt;img alt="payment buttons" src="https://www.dropbox.com/s/eelk7vro2owibuv/Screenshot%202016-12-06%2009.40.56.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The missing piece going forward is getting the Paypal payment to hit a webhook and update our WSO backend when payment completes.  From the Paypal documentation this looks not too hard.  It makes me think that there might have been a simpler way to get set up with Stripe buttons.  Do we actually have to hit Stripe&amp;rsquo;s server from our server to sign someone up to a subscription?  Could there be a pure button equivalent?  Although all the docs I&amp;rsquo;m looking at suggest that you still have to explicitly create the customer with a server side call.  Anyhow, further Paypal integration is the priority if we are going to support Paypal based sponsoring of other members.&lt;/p&gt;

&lt;p&gt;Tinkering with the CSS all burnt a lot of time and I reflected that I&amp;rsquo;m behind on sending out emails to AV members, pushing older blogs to medium and social media, and there are a lot of Premium pull requests to review, let alone project management for LocalSupport, AsyncVoter and making sure we are delivering to are commitments to Sponsors.  Short of making more time in the day I think I have to limit the time I spend writing the daily blog to a tight 20 minutes.  People keep telling me I&amp;rsquo;m too verbose generally so perhaps that will be an improvement :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/KqT5XWirMRg"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=y7bHXz0kCQA"&gt;Pairing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EOlcarJgn8s"&gt;Soloing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RQc_9isrGJY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring and Pairing</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/05/refactoring_and_pairing/"/>
    <id>http://blog.url.com/2016/12/05/refactoring_and_pairing/</id>
    <published>2016-12-05T00:00:00+00:00</published>
    <updated>2016-12-07T10:34:31+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So hot on the heels of our first AV member sponsoring other AV members for Premium support, another Premium member was talking about sponsoring some of their co-workers for Premium membership.  Now this particular Premium member prefers to pay through Paypal, which we had set up previously.  The Paypal endpoint in the AgileVentures site is just a custom button from the Paypal toolkit, on a custom method in the charges controller.  We&amp;rsquo;d just thrown that in, unlinked to the rest of the site, to serve as a quick check that the functionality would work and that the individuals requesting Paypal payment would actually use it.  That purpose was served admirably and was used by two Premium members, so tracer-bullet success.&lt;/p&gt;

&lt;p&gt;Now if we wanted to allow more folks to sign up with Paypal, and indeed sponsor other members via Paypal, we had some integration to do.  Not only that, it was clear that the charges controller needed some serious refactoring.  I had originally created the charges controller on a spike, following the instructions in the Stripe documentation for creating a charge on a user credit card.  I&amp;rsquo;d immediately hooked things up to ensure that the user would be paying for a subscription to a plan.  We&amp;rsquo;d wrapped that whole functionality in VCR/PuffingBilly sandbox tests and then evolved that to RubyStripeMock, as well as adding the ability to sponsor others, and change credit card details.  We&amp;rsquo;d also evolved a domain model that started to capture some of our &amp;ldquo;business&amp;rdquo; logic, relating to the different kinds of Subscriptions and PaymentSources that we were supporting.  What we hadn&amp;rsquo;t managed to refactor was the ChargesController itself which was breaking the Rails convention of having controllers manipulate resources of the corresponding name.&lt;/p&gt;

&lt;p&gt;Our ChargesController was actually manipulating Subscriptions and CreditCards.  Over the weeks I felt pretty certain we wanted to rename our ChargesController to SubscriptionController, since that was the key resource that most of the controller methods were manipulating.  The CreditCard stuff should ultimately be moved to a different controller and the Paypal endpoint integrated into some RESTful manipulation of Subscription resources.  Michael and I started off driving the change by creating a &lt;code&gt;subscribe_self_to_premium.feature&lt;/code&gt; file.  The main cucumber feature file was inappropriately named &lt;code&gt;charge_activity.feature&lt;/code&gt;.  Again this was all part of my initial rush to spike out some charge pathway and demonstrate that revenue could be generated.  Having demonstrated that it was clearly time to clean up the name space.  The new feature file took inspiration from the scenarios in the existing &lt;code&gt;charge_activity&lt;/code&gt; file and looked like this:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by card
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"subscribe"&lt;/span&gt; within the card_section
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="nf"&gt;And&lt;/span&gt; my member page should show premium details

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by Paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"subscribe"&lt;/span&gt; within the paypal_section
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should be redirected to Paypal's payment screens
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="nf"&gt;And&lt;/span&gt; my member page should show premium details
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are still a little imperative, but it&amp;rsquo;s generally too challenging to try and fix too many issues at once.  Right here we were trying to get the name space fixed up.  Tweaking Cucumber scenarios to be more declarative could come later.  As it happened, we did already have a paypal feature test:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Charge Users Money
  As a site admin
  So that users can pay for premium services via paypal
  I would like to be able to sign them up for a recurring plan via paypal

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Sign up for premium membership via paypal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"/charges/paypal"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should see &lt;span class="s"&gt;"Agile Ventures Premium Membership"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see a paypal form
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My hope was that ultimately we&amp;rsquo;d be replacing this feature and the contents of &lt;code&gt;charge_activity.feature&lt;/code&gt; with this new file, that had a stronger indication of the high level goal in its name, i.e. Subscribe Self to Premium.  Of course that didn&amp;rsquo;t stop me from agonizing whether the &lt;code&gt;Given I visit &amp;quot;subscriptions/new&amp;quot;&lt;/code&gt; step was too high level, or whether writing it to force us to code a new URL endpoint and thus controller was the wrong thing to be doing at that stage.  I do believe strongly that the URLs are part of the end user interface experience for both developers and users.  The counter-argument in my mind was that we should get the cukes green before doing a refactoring, but really this entire activity was a refactoring of both tests and application code to consolidate the two payment methods (that both worked independently) into a single coherent entity.  Perhaps we should have only been refactoring tests and app separately?  &lt;/p&gt;

&lt;p&gt;You might also be wondering what happened to the feature to sponsor other members via Paypal.  Discussing it, we&amp;rsquo;d decided that we needed to consolidate the existing functionality first before taking on that more complex task.  Either which way, the missing &lt;code&gt;/subscriptions/new&lt;/code&gt; endpoint prompted a refactoring of the ChargesController to SubscriptionsController, which we executed automatically through RubyMine. RubyMine got most of the changes for us, but there was some mopping up to do with additional changes in the Cucumber files, and a few of the views.  Then we got stuck on a regression test failure for a while.  We weren&amp;rsquo;t making any progress on the high level integration of Paypal and Stripe payments:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Scenario: User decides to change card details                                                                     # features/premium/charge_activity.feature:60
    Given I am logged in as a premium user with name "tansaku", email "tansaku@gmail.com", with password "asdf1234" # features/step_definitions/user_steps.rb:5
    And I visit "subscriptions/tansaku/edit"                                                                        # features/step_definitions/basic_steps.rb:65
    And I click "Update Card Details"                                                                               # features/step_definitions/basic_steps.rb:74
    When I fill in updated card details for premium for user with email "tansaku+stripe@gmail.com"                  # features/step_definitions/charge_steps.rb:18
    Then I should see "Your card details have been successfully updated"                                            # features/step_definitions/basic_steps.rb:182
      No route matches [PUT] "/subscriptions.tansaku-rodriguez" (ActionController::RoutingError)
      features/premium/charge_activity.feature:65:in `Then I should see "Your card details have been successfully updated"'

Failing Scenarios:
cucumber features/premium/charge_activity.feature:60 # Scenario: User decides to change card details
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There was some kind of routing issue.  It was frustrating to be blogged, but also, this is what all these tests are here for.  We&amp;rsquo;d refactored the core controller of the payment framework, and it seemed we&amp;rsquo;d broken the credit card details update in the process.  Without the tests we&amp;rsquo;d have pushed this out to production and not known until a user encountered a problem.  Eventually we tracked the issue down.  It was a pluralization error in one of the views.  Our routes now looked like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/paypal'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#paypal'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/upgrade'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#upgrade'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:put&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:subscriptions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;giving us this set of endpoints:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           subscriptions_paypal GET         /subscriptions/paypal(.:format)                             subscriptions#paypal
          subscriptions_upgrade PUT         /subscriptions/upgrade(.:format)                            subscriptions#upgrade
                  subscriptions GET         /subscriptions(.:format)                                    subscriptions#index
                                POST        /subscriptions(.:format)                                    subscriptions#create
               new_subscription GET         /subscriptions/new(.:format)                                subscriptions#new
              edit_subscription GET         /subscriptions/:id/edit(.:format)                           subscriptions#edit
                   subscription GET         /subscriptions/:id(.:format)                                subscriptions#show
                                PATCH       /subscriptions/:id(.:format)                                subscriptions#update
                                PUT         /subscriptions/:id(.:format)                                subscriptions#update
                                DELETE      /subscriptions/:id(.:format)                                subscriptions#destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We had both &lt;code&gt;subscription_upgrade&lt;/code&gt; and &lt;code&gt;subscriptions_upgrade&lt;/code&gt;.  It was frustrating to have been stuck on this issue, but it was also an interesting lesson about how the custom &lt;code&gt;upgrade&lt;/code&gt; endpoint was technical debt that we were having to pay off here.  We&amp;rsquo;d thrown in that custom endpoint to enable a member to change their credit card in a hurry, but the presence of the custom endpoint had confused us during a refactoring.  If we&amp;rsquo;d refactored that out earlier to a CardController we probbaly wouldn&amp;rsquo;t have got stuck here.  So overall not a bad object lesson on the value of tests and of refactoring to a clean domain model!&lt;/p&gt;

&lt;p&gt;While we were doing all this (and waiting for test suites to run etc.) Michael and I were discussing work on the project in general.  Michael was commenting that he had felt more motivated in the longer running work on LocalSupport.  It sounded like aspects of the &amp;ldquo;drive-by&amp;rdquo; coding style we had been employing recently were frustrating him, i.e. that we were only working on things that could be done in a hour or two.  Also, he said he didn&amp;rsquo;t feel like doing additional work on the project at the weekend as he anticipated I would be too critical of decisions he might make.  This was great feedback for me, as the last thing I want to be doing is de-motivating people to work on the project.  I&amp;rsquo;d like to think of my criticism of design decisions as constructive, but it&amp;rsquo;s a delicate matter.&lt;/p&gt;

&lt;p&gt;I guess Michael has sensed my frustration at earlier phases of the WebSiteOne project which seemed to have involved long running large pull requests and the addition of more features than I was comfortable with.  I&amp;rsquo;ve definitely been burnt by this in the past; pushing on people too hard over the approach that I think is right.  It seems sensible to me that we don&amp;rsquo;t just merge in code to a project when concerned over the future maintainability of that code, but then again if our push back is too strong then no one will want to work on the project with us.  Where do we draw the line?  Everyone is going to have a different level of tolerance for criticism, constructive or otherwise.   And we&amp;rsquo;re all going to have variable abilities to detect whether what we are saying is making others uncomfortable or de-motivating them.  Perhaps I&amp;rsquo;m coming from a place of too much tension for the entire AgileVentures undertaking?  In the past it was a part-time fun activity, and I was more relaxed about my future income from HPU or MakersAcademy.  Ironically at that point I was less sensitive about whether others might feel negative about discussion of the pros and cons of code or design.  Now I like to think I&amp;rsquo;ve become more sensitive but the stakes are higher, and I really want to create codebases that will enhance our processes rather than be a burden in future.&lt;/p&gt;

&lt;p&gt;Gosh, what a complex thing to try and get right.  I thought managing a VCR/PuffingBilly cache was hard, but getting that inter-personal teamwork balance right &amp;hellip; well that&amp;rsquo;s the real trick, ain&amp;rsquo;t it? &amp;hellip; :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OfvuX1rNtu0"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Q36xbc8pUZ4"&gt;Pair Programming on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3BVth-ZXJk8"&gt;Kent Beck Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Testing Slack Bots and Project Metrics</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/02/testing-slack-bots/"/>
    <id>http://blog.url.com/2016/12/02/testing-slack-bots/</id>
    <published>2016-12-02T00:00:00+00:00</published>
    <updated>2016-12-05T18:24:31+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Wednesday saw me firing off a few emails to potential sponsors, which felt like a good start, since landing another sponsor would make all the difference to us over the coming months.  We had our second mob programming session, and I got a preview copy of the new RSpec book, so things were humming along.  What wasn&amp;rsquo;t humming along was invites to Slack.  We still seemed to be having an email every day or two saying that the automated Slack invite was not showing up after a sign up on the main AV site.  Michael and I had put in an email system to supposedly alert us when the Slack invites failed, as they sometimes did when the API key expired.  Those email alerts had only ever triggered for failures on the develop system.  And looking back through the logs it seemed that invites really weren&amp;rsquo;t going out for the last month or so and our fail-safe wasn&amp;rsquo;t even triggering; so frustrating!  The challenge with this kind of issue is that every time someone says they didn&amp;rsquo;t receive the invite, it could be because of a spam filter issue.  &lt;/p&gt;

&lt;p&gt;I do get cc&amp;rsquo;d all the welcome emails when people join AV so I can see the flow of people coming in.  I just wish I could get cc&amp;rsquo;d on the Slack invite emails.  I&amp;rsquo;d refreshed the API keys recently.  The Slack invite thing would clearly require another detailed look. Doubly frustrating was the hacked up env settings for test that meant the full Slack invite pathway was not properly tested.  I didn&amp;rsquo;t want to dive into debugging the Slack issue as I was feeling the AsyncVoter project was blocked due to a lack of test harness on the AsyncSlack bot; so I took a temporary measure and grabbed the emails for the most recently signed up 150 AV members and did a bulk invite in Slack.  It told me that at least 80 people had never been invited.  It was gratifying to see the 15 or so new members enter slack over the next 12 hours with several of them mentioning the Ruby Rogues podcast.&lt;/p&gt;

&lt;p&gt;Having put in the short term fix I could focus a couple of hours coding on getting a test harness into the AsyncSlackBot.  I refactored the simple unit test from the day before so the naming of the files and methods was more consistent, and started on checking out the BotMock project.  Installing it involved building it locally and copying over a couple of mock files.  Not ideal, and I start to think we could just as quickly build our own mocking system, as we did in the agile-bot project.  The BotMock project is new and not even on npm, and I wonder if we&amp;rsquo;re really gaining much from it.  I stamped out a few controller tests using their approach, which involved coding in ES6 and I had to adjust the callback operations to get working tests like these:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'should acknowledge vote if users direct messages `vote #`'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'vote 1'&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"I received your vote: 1 &amp;lt;@test&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usersInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Working with this sort of test had involved pulling the body of the bot out of the server.js file and dropping it into a controller file from which it would be exported.  I was getting critical practice with breaking up my node apps.  Not that it&amp;rsquo;s so hard, but when something is slighltly less familiar it&amp;rsquo;s easy to put off doing it.  I ended up with a pull request that did a bit of testing on each of the canned bot responses, but didn&amp;rsquo;t achieve a full test of the full voting sequence as it was unclear how to check a series of interactions.  The BotMock had some example conversation tests, but they weren&amp;rsquo;t working for me. &lt;/p&gt;

&lt;p&gt;This is a good start over the initial spike, but it&amp;rsquo;s frustrating that the high level character of the app can&amp;rsquo;t easily be read from the mocha tests, in the same way that it can be difficult to read them in RSpec.  Both Mocha and RSpec can give verbose test output that provides a nice summary of what&amp;rsquo;s going on like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  controller tests
    ✓ should return `help message` if user types `help` (208ms)
    ✓ should return `hello yourself` if user types `hello` (204ms)
    ✓ should return vote announcement if user types `start new vote` (202ms)
    ✓ should acknowledge vote if users direct messages `vote #` (208ms)
    ✓ should return results if users types `results` (205ms)
    - should summarise results after a vote

  Bot
    Controller
      ✓ should receive message

  summary_text
    ✓ should format vote text correctly for no votes


  7 passing (1s)
  1 pending
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but I personally find it difficult to digest that output.  What I mean is that when I&amp;rsquo;m working on the code, usually with the spec on one half of the screen and the app code on the other half like so:&lt;/p&gt;

&lt;p&gt;&lt;img alt="code layout" src="https://www.dropbox.com/s/vkcavhglz2kkadq/Screenshot%202016-12-02%2009.59.23.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;most of the mocha/rspec code is taken up with boilerplate that is specific to the testing framework and not the app itself.  The high level English language description is scattered in comments.  I really do love Cucumber for giving me that description in the editor and not in the separate terminal output.  So perhaps it&amp;rsquo;s time to try out Yada (cucumber nodejs alternative) in this project, but I think I can&amp;rsquo;t get too sucked in to testing frameworks without pushing more functionality to actually help automate me away from tedious admin tasks.  We&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;What is exciting is that it seems that if we feed the bot an API token rather than a bot token, we can get the bot to behave as me (as Thomas and I found testing another bot).  So potentially I can augment myself on Slack directly.  Dangerous perhaps; in a test with Arreche I already tripped an infinite loop in a private channel.  Lots of testing required to avoid more mishaps like that :-)  I got the PR in and managed a separate flurry of coding/devops on ProjectScope later in the evening.  The new month meant my Heroku quotas had been reset and so I could get this overview of how the different AV projects were proceeding:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Project metrics on AV projects" src="https://www.dropbox.com/s/emvw7cujo777itx/Screenshot%202016-12-01%2018.41.42.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The graphics are interactive and when you mouse over them you get some explanations and pop-ups of who&amp;rsquo;s got what level of activity in Slack:&lt;/p&gt;

&lt;p&gt;&lt;img alt="showing who's active in slack" src="https://www.dropbox.com/s/assku0q6ptxhp7r/Screenshot%202016-12-01%2018.52.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;I think this really is the way forward; automation of project management via Slack bot and breaking our monolith into microservices, e.g. metrics on all the projects in one service, manangement of hangouts/events in another service; so that we can grow to more and more projects supported, in following Agile principles to keep them all delivering value to the end users and the individual team members participating in order to level up in the chosen skill sets.  Can we get into that sweet spot where all the effort and automation and reflection results in a great user experience all round without overwhelming the support staff?  Stay tuned to this blog to find out!&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=X3mWPUN4TC4"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gK96bxINM88"&gt;Solo on AsyncVote part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XP3lyx0zZZY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RYRugWUmv74"&gt;Solo on AsyncVote part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Task Switching</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/01/task-switching/"/>
    <id>http://blog.url.com/2016/12/01/task-switching/</id>
    <published>2016-12-01T00:00:00+00:00</published>
    <updated>2016-12-05T18:24:31+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Tuesday was a day of much task switching.  It started with putting my office back together after new windows had been put in.  That took a while.  I managed to quickly stamp out a blog on the Agile Project Workshop before the &amp;ldquo;Martin Fowler&amp;rdquo; scrum.  My attempts at changing the flow for blog drafts were getting a little out of hand as the process of squashing and merging between the &lt;code&gt;new_blog_drafts&lt;/code&gt; branch and master seemed to be leaving stray commits that were then making the subsequent new blog draft PRs rather messy.  In frustration I deleted the branch and re-created it.  I think we need to go with Arreche&amp;rsquo;s suggestion of a webhook, and to do that I&amp;rsquo;ll need to move the blog_draft notifications into the new AV Premium Slack instance; or at least some where with spare Slack integration capacity.&lt;/p&gt;

&lt;p&gt;In the scrum I was advising one Premium member about the perils of task switching, or more accurately about the perils of spreading oneself too thin over many projects.  Talk about the pot calling the kettle black! :-)  After the scrum I joined Matt for an hour pairing on WebSiteOne and Redeemify, and I managed to restrain myself from immediately diving in to individual problems and talked to Matt about the bigger picture of trying to make progress with all of AgileVentures and WebsiteOne in particular.  We reviewed the open PRs and board and I unblocked Matt on two issues, and then helped him with another on Redeemify where the presence of a legacy Rails 3 &lt;code&gt;asset&lt;/code&gt; group in the Gemfile was breaking the system on Heroku.&lt;/p&gt;

&lt;p&gt;After lunch I scaffolded a mentoring session for a private company on a paid project.  I used google hangouts to connect up an experienced developer from the US with a London based educational company, so they could get advice on their legacy Rails codebase.  That all seemed to go reasonably well, and more sessions like those could go a long way to making my own financial situation a lot more stable.  We&amp;rsquo;ll see if we can&amp;rsquo;t do a lot more of that.  I had been hoping to bring in some large paid projects for the benefit of a group of AV Premium members, but maybe slivers of small consulting work will ultimately serve the same purpose.&lt;/p&gt;

&lt;p&gt;While I was monitoring the paid session I was managing Slack and getting my own company&amp;rsquo;s corporation tax paid.  30 minutes on the phone to discover that Her Majesties Revenue &amp;amp; Customs (HMRC) aren&amp;rsquo;t sending paper letters with reference ids any more. Next I caught up with Thomas and Michael in the &amp;ldquo;Kent Beck&amp;rdquo; scrum, and we talked more about the task switching issue.  Michael called out Thomas and myself as being heavy task switchers, and we clarified that although there was lots of room for us to be more task focused, heavy task switching can be particularly challenging for junior developers.  While there&amp;rsquo;s lots to learn from different projects, Thomas and I agreed that sticking with one codebase for a couple of weeks to really get to know it well is important for someone just learning the ropes.  Actually I&amp;rsquo;m starting to think that I&amp;rsquo;d really like to have a coding binge on a single project.  I&amp;rsquo;ve started looking at the calender to see when I will get to the one year mark for my blogs.  Blogging every day is great, but I&amp;rsquo;m thinking wistfully about other setups, for example where I do nothing but code for four days and then do blogging and admin on a Friday &amp;hellip;  I wonder if my commitments to help people get coordinated on Slack prevent me from getting any really focused coding done?&lt;/p&gt;

&lt;p&gt;I believe it was June when I started blogging daily.  Will I keep myself to my committment of doing it every day for a year?  That&amp;rsquo;s another six months &amp;hellip; I&amp;rsquo;m also wondering if I can do a blog that&amp;rsquo;s almost purely code?  Personal time management strategy aside I jumped into a quick session with Michael.  I was totally torn between working on the Premium upgrade interface on WSO and the slack bot.  It certainly feels like the async slack bot could be a real engine of activity for many projects.  What I&amp;rsquo;m really hoping is that it can start to partly take over some of the project managment admin roles that I&amp;rsquo;m doing on various projects.  I&amp;rsquo;d also love it to take over some of the greeting and orienting admin.  Of course it might all backfire if all the projects get really active and my workload spikes! :-)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re not measuring quantiatively, but from the Slack messages pinging about, I get the sense we have more active projects now in AgileVentures than ever before.  I resolved to try and get some testing code into the async Slack bot spike to give us a framework going forward.  This was the repping on node testing setup I&amp;rsquo;d been talking about needing to do for some time.  I followed the mocha docs to produce this test with Michael and Arreche&amp;rsquo;s input:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;var assert &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assert'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
var vote_text &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'../src/utils'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;

describe&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Server'&lt;/span&gt;, &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
  describe&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vote_text'&lt;/span&gt;, &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    it&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'should format vote text correctly for no votes'&lt;/span&gt;, &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      assert.equal&lt;span class="o"&gt;(&lt;/span&gt;vote_text&lt;span class="o"&gt;([])&lt;/span&gt;, &lt;span class="s1"&gt;'0 vote so far []'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;;
  &lt;span class="o"&gt;})&lt;/span&gt;;
&lt;span class="o"&gt;})&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here&amp;rsquo;s the contents of the utils file under test&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;module.exports &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;votes&lt;span class="o"&gt;){&lt;/span&gt;
  var text &lt;span class="o"&gt;=&lt;/span&gt; votes.length +&lt;span class="s1"&gt;' vote'&lt;/span&gt;;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;votes.length &amp;gt; 1&lt;span class="o"&gt;){&lt;/span&gt;
    text +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'s'&lt;/span&gt;;
  &lt;span class="o"&gt;}&lt;/span&gt;
  text +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;' so far ['&lt;/span&gt;
  votes.forEach&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;vote&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     text +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;@'&lt;/span&gt; + vote.user + &lt;span class="s1"&gt;'&amp;gt; '&lt;/span&gt;;
  &lt;span class="o"&gt;})&lt;/span&gt;;
  text +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
  &lt;span class="k"&gt;return &lt;/span&gt;text;
&lt;span class="o"&gt;}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We got a spike of a unit testing setup.  I had to run off to take my sons to football academy and so I didn&amp;rsquo;t get to fix up the awful naming conventions in the above.  Do we really want a &lt;code&gt;utils&lt;/code&gt; file, or should we be creating a &lt;code&gt;vote_text&lt;/code&gt; function in the utils file, or should we be creating objects?  Michael pointed out that as the Slack bot, this code would have a different domain from the RESTful API we had built separately, revolving more around channels and users than votes and stories.  We left it on the note of could we get a good end-to-end acceptance testing framework in there.  My experiences with testing Stripe have soured me a little to sandboxing systems like VCR, and our attempt to use the node equivalent of sepia on the AgileBot project had been met with failure.  I found a &lt;a href="https://github.com/gratifychat/BotMock"&gt;BotMock&lt;/a&gt; framework that would in principle allow us to do to botkit what we had done with the Stripe Ruby mock on WebsiteOne.  BotKit really had been a gorgeous experience in terms of getting the spike of the bot up and running.  What I wanted now most of all was a good way to get the high level user stories of the slack bot defined and driving the code.  At the moment they live implicitly in the spiked code and some Slack interactions.&lt;/p&gt;

&lt;p&gt;The needle we really want to thread is the one that allows us to expose clearly the features that the system supports, so that we don&amp;rsquo;t get all snarled as we add new features and evolve the domain model; and that new developers coming onto the project can easily orient themselves.  What we don&amp;rsquo;t want is to get bogged down in crazy bugs arising from mis-matches between our mental models of the software and testing components.  If we can thread that needle, perhaps we can support many active projects without my brain being levered out of my ears, and possibly enough space for a coding binge without too much task switching.  Now that would be a great Christmas present! :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3wPmyLfRwxY"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1rwVM5uuFR4"&gt;Pairing on WebsiteOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JrIeqF5y9pU"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ll91NnqwRZs"&gt;Coding on AsyncSlackBot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Agile Project Management for NonProfits</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/30/agile-project-workshop/"/>
    <id>http://blog.url.com/2016/11/30/agile-project-workshop/</id>
    <published>2016-11-30T00:00:00+00:00</published>
    <updated>2016-12-02T09:35:05+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Most of Tuesday was taken up with running a workshop on Agile Project Development for non-profits at the Volunteer Services Center up the road.  This was for Voluntary Action Harrow Cooperative (VAHC), who are the client for the Harrow Community Network site, which uses the LocalSupport software.  Here was the description of the event:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new approach to project management, Agile Project Management, attempts to create a different model.
&amp;ldquo;Most nonprofits are interested in process improvements that will better enable them to accomplish their respective missions. However, major change can be intimidating and complicated to implement, especially if the organisation isn’t quite sure what it needs to do differently or lacks the expertise to make it happen across the organisation.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Agile project management approach aims to address the needs of those working in a project-focused environment who want to be agile.&lt;/p&gt;

&lt;p&gt;This session will provide an insight into how you can effectively instigate Agile project management into your nonprofit. &lt;/p&gt;

&lt;p&gt;Training content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What Agile is and where it came from&lt;/li&gt;
&lt;li&gt;The Agile Manifesto, principles and practises&lt;/li&gt;
&lt;li&gt;The value of Agile to your nonprofit&lt;/li&gt;
&lt;li&gt;Implementing Agile in your nonprofit&lt;/li&gt;
&lt;li&gt;Communication, collaboration and culture&lt;/li&gt;
&lt;li&gt;Risk management and pitfalls&lt;/li&gt;
&lt;li&gt;Technologies to help&lt;/li&gt;
&lt;li&gt;Further resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Participants will leave the course having gone through a small scale Agile process learning first hand how it can be implemented into your organisation.&lt;/p&gt;

&lt;p&gt;Trainer: Agile Ventures&lt;/p&gt;

&lt;p&gt;Cost (Per Person):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free - Harrow Voluntary, Community &amp;amp; Social Enterprise Sector&lt;/li&gt;
&lt;li&gt;£30 - Voluntary, Community &amp;amp; Social Enterprise Sector (Not working or based in Harrow)&lt;/li&gt;
&lt;li&gt;£40 - Public &amp;amp; Private Sector&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;There were eight attendees from different charity groups based in Harrow and some of the adjoining boroughs.  Including Alex and myself that made 10 which worked pretty well I think.  We&amp;rsquo;d done a &lt;a href="http://nonprofits.agileventures.org/2016/11/21/agile-workshop/"&gt;dry run of the event&lt;/a&gt; a couple of weeks back with the VAHC staff in a group of six including myself.  That dry run had followed this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intro &amp;ldquo;What is Agile? How this workshop will run&amp;rdquo; &lt;/li&gt;
&lt;li&gt;&amp;ldquo;Kickoff&amp;rdquo; &amp;ndash;&amp;gt; generate a series of stories about what to do in the workshop, e.g. &amp;ldquo;How do we motivate people?  What&amp;rsquo;s a scrum?&amp;rdquo; write on cards, arrange on whiteboard &lt;/li&gt;
&lt;li&gt;BREAK &lt;/li&gt;
&lt;li&gt;&amp;ldquo;Voting&amp;rdquo; on stories &amp;ndash;&amp;gt; identify common stories and vote on their difficulty, work out their priority &lt;/li&gt;
&lt;li&gt;Go into small teams each working on a different story &lt;/li&gt;
&lt;li&gt;BREAK &lt;/li&gt;
&lt;li&gt;Small teams each presenting their work on their story &lt;/li&gt;
&lt;li&gt;&amp;ldquo;Retrospective&amp;rdquo; looking back over the process and how it could be improved &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Excluding breaks, that was 6 ten minute chunks; running for an hour.  The full workshop followed the same model but each chunk lasted 25 minutes.  The key things I&amp;rsquo;d learned from the dry run were: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I needed to bring a mac VGA connector to use the projector&lt;/li&gt;
&lt;li&gt;A sprint diagram would be helpful&lt;/li&gt;
&lt;li&gt;We might need a way to intro people&amp;rsquo;s names &lt;/li&gt;
&lt;li&gt;It could be good to arrange all the tickets onto a kanban board on the wall&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;d need better pens&lt;/li&gt;
&lt;li&gt;Using the Agile process to understand the Agile process might be confusing &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got the simple logistical issues sorted, and started the main workshop by having the eight attendees do pairwise introductions.  I started the workshop as before by explaining the six part structure of the workshop and added the new element of emphasizing the workshop objective &amp;ldquo;To understand Agile Project Management&amp;rdquo;.  I tried to highlight how ultimately the Agile processs could be applied to any project, but that our project in the three hour workshop was &amp;ldquo;To understand Agile Project Management&amp;rdquo; and we would be compressing what might be done in an 2 week sprint into those three hours.  I talked briefly about the background of Agile, and how it derives from the &lt;a href="http://agilemanifesto.org/"&gt;Agile Software Manifesto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time around I also showed an image representing a sprint:&lt;/p&gt;

&lt;p&gt;&lt;img alt="scrum overiew" src="http://www.agilenutshell.com/assets/methods/scrum/scrum-overview.png" /&gt;&lt;/p&gt;

&lt;p&gt;and then we got into the process of starting to generate stories.  This time around I didn&amp;rsquo;t contribute any stories myself but with 9 others writing away we quickly had loads to work with.  I lead the process of trying to organise the stories into themes.  The stories were pretty much all questions.  I guess in a future workshop I could ask for all the stories to be in the stakeholder, objective, desire format, but things seemed to go okay without it.  We went through a process of consolidation and generated five &amp;ldquo;epics&amp;rdquo;, which we voted on, giving us the following set of ready items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How does Agile affect funding and reporting to funders? (2 points)&lt;/li&gt;
&lt;li&gt;How does Agile handle financial planning and management (3 points)&lt;/li&gt;
&lt;li&gt;How does Agile handle conflict (2 points)&lt;/li&gt;
&lt;li&gt;How does Agile planning cope with changing timeframes (1 point)&lt;/li&gt;
&lt;li&gt;What are the Pros &amp;amp; Cons of Agile vs other methodologies (2 points)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which we prioritised and then worked on each of the first three in separate three teams of three, with me moving between the teams to give help and support.  The really interesting things to come out of the process was to see the attendees answering their own questions and inferring, from the overall Agile process that we were using, how Agile might work for them.  As usual the voting and voting discussion was a critical learning period as we distinguished what we were voting on (complexity/ambiguity rather than priority or delegation), and I think the attendees were getting insights into how just having that discussion could help surface and resolve conflicts.  While the teams were working I got their tickets up on a makeshift Kanban layout on the wall:&lt;/p&gt;

&lt;p&gt;&lt;img alt="kanban layout on wall of meeting room" src="https://www.dropbox.com/s/tp01dj0jtxdwvfy/non-proft-kanban.jpg?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The teams presented their findings to each other and I saw the time had run away with us.  There was only five minutes left for the retrospective.  This was a shame since as I was at pains to point out that all the other mechanics of scrums, sprints, standups, Kanban charts etc. were all optional aspects of Agile, and the key element that made a process Agile was reflection on how different aspects of the process were working.  We did a quick retro going round the table with each person saying briefly what had been positive and what could be improved on about the workshop.  Not ideal since those going first would bias those talking after, but the general theme was that the attendees had found actually working through the Agile process very informative; although many of them would like more specific examples about usage of the techniques in the non-profit sector.  There was also interest in a more advanced workshop and I mentioned Alex&amp;rsquo;s and my idea about a 2 day workshop, with the 2 days being separated by 2 weeks, and effectively running an inception/kick-off and retrospective for an organisation.  It would certainly be interesting to run something like that although Alex was skeptical about people coming back for the second day 2 weeks later.  I think if people were paying for it that might make all the difference :-)&lt;/p&gt;

&lt;p&gt;Overall a great experience, and I&amp;rsquo;ll be very interested to hear what people say in the privacy of the feedback forms.  I don&amp;rsquo;t know that I&amp;rsquo;d want to spend every day doing workshops like this, but it was great to be meeting all these hard-working charity/non-profit folks, and what I&amp;rsquo;d really love to be doing is more implementation of Agile methods in their organisations to see if we could really help them improve their outcomes.  Perhaps this will be a stepping stone to that &amp;hellip;&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3wPmyLfRwxY"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hosting Slack Bots</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/29/hosting-slack-bots/"/>
    <id>http://blog.url.com/2016/11/29/hosting-slack-bots/</id>
    <published>2016-11-29T00:00:00+00:00</published>
    <updated>2016-11-30T11:53:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The slackbot had stayed live for most of the weekend on drie push, but on Monday morning it was unresponsive, and although we&amp;rsquo;d completed a vote or two, not all the notifications had come through.  The bot would not restart from fresh pushes of code.  I couldn&amp;rsquo;t get it back online without ssh-ing in and starting it directly.  drie push is not explicitly designed for hosting slack bots, and there wasn&amp;rsquo;t any functionality to put the bot into a background job that would persist after logging out of ssh.  Actually I&amp;rsquo;d been surprised that the slack bot had worked on drie push at all; I&amp;rsquo;d pushed it up there as an experiment and seen that it worked partially, but now we needed a more consistent hosting solution.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;d shown the #websiteone channel the promise of a bot that could run an asynchronous vote, there was less appetite for starting manual ones, and not having the stable hosted bot was starting to feel like a blocker.  Slack has a &lt;a href="https://api.slack.com/docs/hosting"&gt;page dedicated to different bot hosting solutions&lt;/a&gt;. In parallel with chatting on Slack with the team about the options, I spent a little while looking at what AWS Lambda had to offer, and then Matt suggested that BeepBoop looked like it had a great free offering.  I signed up for a BeepBoop account and got through most of pulling our repo asyncbot directly into beepboop, but then it was failing due to lack of a DockerFile:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unable to prepare context: Cannot locate Dockerfile: absDockerfile: "/tmp/b54c5a30aa584533b027af837beeef64683410820/repo/Dockerfile"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There was probably a simple solution, but I couldn&amp;rsquo;t be sure.  I felt like I could have this bot up and running on AWS pretty quickly and I wouldn&amp;rsquo;t be beholden to some other service that was going to start squeezing me on price like Heroku has been doing recently.  The only reason I hadn&amp;rsquo;t immediately spun up an AWS instance was that whenever I tried to go to the AWS console in Chrome it was auto-switching to the saasbook team account, and I didn&amp;rsquo;t want to create some instance that Armando would start paying for.  I went to Safari (I know there are chrome profiles) and created a new AgileVentures AWS account and created a free-tier eligible tiny Ubuntu instance and had that up in a matter of minutes.  In the meantime Arreche was telling me he could get the planning poker script up in hubot pretty fast, but I really wanted to see how far I could get with AWS.&lt;/p&gt;

&lt;p&gt;I set up the ssh config:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ~/.ssh/config

Host AsyncVoterBot
HostName ec2-54-999-999-999.us-west-2.compute.amazonaws.com
User ubuntu
IdentityFile "~/.ssh/SuperSecretKey.pem"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I needed to make it super easy to log into the box:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh AsyncVoterBot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where I installed git, nodejs and npm using &lt;code&gt;apt-get install&lt;/code&gt; (although I burned some time mistakenly installing &lt;code&gt;node&lt;/code&gt; and then trying to build node from source) before cloning our async slack bot project, setting the slack bot token in the environment and running the bot in a tmux session. &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# in tmux environment
$ nodejs server.js &amp;amp;
# Ctrl-B D to detach
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tmux attach # to get back in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was imagining I would have to do some security configuration to get it all to work, but no such thing.  The bot was live, and I ran some test votes in a private channel.  I had the tmux session (just as we have on the autograders) so that the bot can stay live and running even after I log out of the machine, and I checked that the bot stayed live over a few ins and outs.  It&amp;rsquo;s still running today, and although my attempts to ssh into it appear to be &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectionTimeout"&gt;timing out&lt;/a&gt;, I assume that&amp;rsquo;s a temporary AWS issue (fixed with adding an inbound rule for my new IP).  There&amp;rsquo;s no cost for the bot so far, but that will be the real question, how much does this cost us?  I was able to link the new AgileVentures AWS account to the new AgileVentures bank account.  I sort of assume that this will come in less than the $7 a month that Heroku want for an always-on instance, but let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure if this is the right overall approach, but I was pleased to get something up on AWS that has a chance of being an affordable solution, and I&amp;rsquo;m pretty confident in my ability to manage AWS boxes given my experience with the autograders.  We managed two or three bot scaffolded votes on #websiteone and there were others to do in parallel in #async_voter so I did a manual one there which pushes us towards new features like supporting multiple votes in parallel, and getting a test harness round this hacky botkit code.  More voting and coding to be done!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/WWesZmC_BRU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AmREoIUHw4c"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
