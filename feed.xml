<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-10-04T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Anatomy of a Question</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/04/anatomy-of-a-question/"/>
    <id>http://blog.url.com/2016/10/04/anatomy-of-a-question/</id>
    <published>2016-10-04T01:00:00+01:00</published>
    <updated>2016-10-04T15:55:43+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It’s really interesting to hear that &lt;a href="https://hackernoon.com/the-decline-of-stack-overflow-7cb69faa575d#.frp6i4ncr"&gt;StackOverflow might be on the decline&lt;/a&gt;.  John Slegers’ writes a really interesting &lt;a href="https://hackernoon.com/the-decline-of-stack-overflow-7cb69faa575d#.frp6i4ncr"&gt;blog post&lt;/a&gt; detailing some of the issues that the community is having.  In summary the suggestion is that StackOverflow is not as friendly to newcomers as it used to be, and that some of the reputation enabled moderators are running parts of the site with rather strict rules about what can and cannot be posted.&lt;/p&gt;

&lt;p&gt;I’ve always encouraged students and colleagues to post on StackOverflow and I know they’ve had some bad experiences, but also some good ones.  I offer “StackOverflow protection” to all my students assuring them that if they post on StackOverflow and anyone gives them any grief then I will get in there, and star and upvote their question and provide support and feedback on how to adjust their question in order to maximise its chances of getting a good answer, even if I don’t answer it myself.  What I encourage everyone to do is post their SO question and then take a link to it and post that into our slack &lt;a href="https://agileventures.slack.com/messages/techtalk/"&gt;#techtalk&lt;/a&gt; channel with a @here to attract anyone who’s online and a @tansaku to attract my attention.&lt;/p&gt;

&lt;p&gt;In the past I’ve also encouraged students who were contacting me directly via instant message to post their questions on StackOverflow.  Very often students would be extremely reticent about doing this. Here are two examples of students who ultimately posted on SO following my suggestions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/28678092/how-to-change-recursive-method-into-non-recursive-one-in-js"&gt;http://stackoverflow.com/questions/28678092/how-to-change-recursive-method-into-non-recursive-one-in-js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/30920118/cucumber-test-which-syntax-to-choose-to-test-a-radio-button-selection"&gt;http://stackoverflow.com/questions/30920118/cucumber-test-which-syntax-to-choose-to-test-a-radio-button-selection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one case my upvote cancelled out a -1 from someone else who didn’t like the question, and ff you look carefully you can see me teasing out additional information from students in the comments section and as it happens I ultimately answered the students questions on StackOverflow.  My sense is the majority of students would really rather not post on StackOverflow, or any public forum if at all possible.  As I’ve mentioned before, many students contact me one to one via emails or instant message.  It seems that this is something they generally prefer, to ask questions in private.&lt;/p&gt;

&lt;p&gt;I’ve really struggled with that as an instructor because I know about the studies showing how others students can get massive learning benefits from hearing the dialogue between other students and their instructor.  It’s also much less efficient for me to be answering the same question repeatedly in private then in an open forum, and the numbers of students in a MOOC make one to one support completely impractical, particularly when I’m doing it on a volunteer basis.  I still encourage students and colleagues to post in open forums, but I’m beginning to see that when someone comes to you with a question, it’s somewhat dangerous to block them on it.&lt;/p&gt;

&lt;p&gt;Let me explain.  Blocking is when you try and divert the direction that someone is going in.  I’ve realized belatedly that I do it far too much, and often on the wrong occasions.  I think StackOverflow is guilty of it as well in places.  Slegers’ blog post talks about questions being pushed away as “off-topic” but I think StackOverflow should be open to evolving the kinds of questions and discussions it supports.  They want to be a pithy and terse set of purely technical Q&amp;amp;As, but I think that blocks a lot of potential value from the discussions people want to have.  I believe the SO founders set up https://www.discourse.org/ to be an alternate system where discussion could evolve.&lt;/p&gt;

&lt;p&gt;Anyhow, my main point is that there is a tricky balance when dealing with a question that comes in. Part of it is economic.  When I’m working with university or bootcamp students I’m in a context where my time is being paid for, and the student is paying for my support.  If they’re not comfortable asking in a public forum, then I’ve got to be careful not to put too much pressure on them; and yet, potentially they (and their other paying classmates) could really benefit if they did.  Of course ultimately the student has to be the judge of whether they are emotionally ready to post on a public forum.&lt;/p&gt;

&lt;p&gt;I’m no fan of the locking or downvoting of questions.  I think down voting should be reserved for answers only on SO.  Hmm, maybe we need to create our own alternative for AgileVentures … because for me personally, I’ve got a thick skin - at least as far as it goes on online forums.  I could care less if people are down voting my question or locking it.  Although clearly it makes sense to read the posting guidelines and try and conform on any forum.  &lt;/p&gt;

&lt;p&gt;The other thing I sense is that students and learners may often feel like they have to wrestle with a problem for some specified set of time before asking for help.  I guess I understand that, but when I’m stuck on a problem I want the whole world to be able to help if possible.  Check out this question that I asked on the Maths stack exchange:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://math.stackexchange.com/questions/1477767/efficiently-partition-a-set-into-all-possible-unique-pair-combinations"&gt;http://math.stackexchange.com/questions/1477767/efficiently-partition-a-set-into-all-possible-unique-pair-combinations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t want to suffer in silence.  If I’m stuck on something for longer than 20 minutes, I want to write it up, get it on SO, in a blog, on slack - document my process and share what I’m doing with others.  Ultimately as in that maths question I may end up solving it myself, but I want to get input and insights from as many people as possible.  Where I am now though I think I will only ever push learners very gently to publish or group forums.  I hope we have a nice atmosphere in AgileVentures where people can ask questions in safety.  Seeger laments that neither Quora nor StackOverflow provide this any more, so perhaps AV should provide persistent Q&amp;amp;A outside Slack?  I still get huge value from SO though - I don’t find myself posting there so much but I’m always finding useful stuff in the SO results in Google.  I love the SO interface and hate to reinvent the wheel.  There are some open source alternatives …&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.quora.com/Is-there-an-open-source-alternative-to-StackOverflow-I-can-use-for-internal-Q-A"&gt;https://www.quora.com/Is-there-an-open-source-alternative-to-StackOverflow-I-can-use-for-internal-Q-A&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reviewing My EdX Automation</title>
    <link rel="alternate" href="http://blog.url.com/2016/10/03/edx-automation-in-review/"/>
    <id>http://blog.url.com/2016/10/03/edx-automation-in-review/</id>
    <published>2016-10-03T01:00:00+01:00</published>
    <updated>2016-10-04T15:55:43+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Michael was away on Friday and I busied myself with admin work.  I was making clones of the &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC for instructors around the world (two in the US, one in Ireland).  The instructors are provided with Small Private Online Classes (SPOCs), a term coined by Armando Fox to describe the copies of the MOOC that we make available on edX edge.  Edge is an edX Learning Management System (LMS) separate from the main hosted edX system.  It is different in that the classes don&amp;rsquo;t show up in the main edX listings, and that we are never quite sure if the software is the same version as the main edX instance.  &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working with edX for the past few years, and I have lots of interaction with their support folks, but very rarely with their developers.  edX&amp;rsquo;s organisational model is somewhat opaque to me, but I sense this is a somewhat common pattern for larger organisations, where you generally can&amp;rsquo;t talk to the engineers directly. Instead you have to raise issues with non-technical support people.  I&amp;rsquo;ve encountered the same with Heroku, Do-It, StackExchange and a few other largish organisations.  As a developer myself, I&amp;rsquo;m not a huge fan of it.  I would prefer to be talking directly to the engineers without the time delay and chinese whispers effect, but I think I understand the respective organisation&amp;rsquo;s fears about overloading their individual developers, and their desire to coordinate their operation at a higher level.&lt;/p&gt;

&lt;p&gt;edX has started doing hourly hangouts once a month to try and explain what they&amp;rsquo;re doing on the open edX side of things, which is a great initiative.  edX have open-sourced all their LMS code (which is awesome) and so anyone can download and install and run their own instance of the edX LMS.  &lt;a href="https://craftacademy.se/international/"&gt;CraftAcademy&lt;/a&gt; have been doing this with some success, but I&amp;rsquo;m unclear about the relationship between the open edX code base and what happens to be running on the hosted edX servers, edge edX and main edX.  Some version names would be super useful, and in the recordings of the open edX hangouts I&amp;rsquo;m hearing names like &amp;ldquo;Eucalyptus&amp;rdquo;.  That&amp;rsquo;s great, but what&amp;rsquo;s unclear to me is what version of the edX software is on edX edge or the main edX.  I&amp;rsquo;d love to have a little &amp;ldquo;about menu&amp;rdquo; in the edX interface where I could click through to see the precise version and even a link through to the changelog or features list.&lt;/p&gt;

&lt;p&gt;If we hosted our own edX for the SPOC or the MOOC we&amp;rsquo;d have a lot more clarity about which versions of the software we were running.  Hosting our own is not trivial given that there are various moving parts besides the LMS, such as the edX queues that our auto graders use.  Maybe a day or two to setup and an unclear amount of time for maintenance.  At the moment UCBerkeley pays edX for hosting services, which means we get access to support from non-technical staff, but it&amp;rsquo;s always slightly unclear which version of the software we are working against, or which features are being rolled out when.  In the latest version of the MOOC there have been some changes to the forum software, so that on initial load you see a list of categories of discussions rather than the list of discussions themselves.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/k5c8un5gwye6zr6/Screenshot%202016-10-03%2008.53.22.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve asked edX support about this, and apparently this is intended to encourage learners to think about where they are posting.  Here&amp;rsquo;s what I see if I click through on &amp;ldquo;all discussions&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/i6mk6xw2r18fhm9/Screenshot%202016-10-03%2008.54.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what the initial view used to look like.  I could immediately see the updates.  The first few times I came to the discussion page, I thought there were no discussions there at all, and it took me a few times before I realised that I could click through to see discussions.  Several TAs have confirmed my impression, and we seem to be seeing much lower forum activity than in previous runs of the course.  That said things are picking up now, so perhaps people are getting used to the need to click through.  Then again, perhaps that is entirely unrelated to the interface change.  Difficult to know for certain without a randomised trial.&lt;/p&gt;

&lt;p&gt;And who knows, maybe this is a good thing, with some people who might have written out a long question, instead trying things again themselves and solving it on their own.  Again it&amp;rsquo;s very hard to tell.  One thing I do know is that it&amp;rsquo;s slightly disconcerting trying to run a course and not quite knowing what version of the software you are running against and how it might suddenly change.  I guess that&amp;rsquo;s the same for lots of other &amp;ldquo;Software as a Service&amp;rdquo; that I use, such as GitHub, Heroku, Google Drive etc.; it&amp;rsquo;s just that with those guys, at least GitHub, I feel like I can generally find a blog post, or something in the interface telling me about changes.&lt;/p&gt;

&lt;p&gt;That said, I was blindsided by some Heroku policy changes over the summer, and edX probably feels more bumpy to me because I have full admin access to our auto graders and can carefully control the version of the software that&amp;rsquo;s being used to grade student assignments, but not the LMS that&amp;rsquo;s being used to handle submission and delivery of them.  edX is trying to support lots more use cases than just our &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC, and UCBerkeley is delivering a lot more MOOCs than us, so our situation is somewhat of a corner case, even if we are one of the most popular MOOCs on the platform.&lt;/p&gt;

&lt;p&gt;As part of the deal of being editor of the &amp;ldquo;Engineering Software as a Service&amp;rdquo; textbook, I&amp;rsquo;m also the community manager for the instructors around the world who are working against the MOOC materials.  As I mentioned we currently host SPOCs for those instructors on edge edX, and I have an interface for creating new instances, into which I can import clones of the MOOC.  I&amp;rsquo;ve attempted to automate this process with a set of &lt;a href="https://github.com/saasbook/SPOC"&gt;scripts&lt;/a&gt;.  I&amp;rsquo;m not particularly proud of the code, but it&amp;rsquo;s an attempt to escape from the robotic operations I have to repeat each time an instructor wants a new instance of a SPOC.&lt;/p&gt;

&lt;p&gt;The automation has been only partially successful.  edX as yet has no API for managing course.  I see they do have some &lt;a href="https://open.edx.org/open-edx-rest-apis"&gt;APIs&lt;/a&gt; for enrollment, users and data-analytics on Open edX, which maybe I can use for managing TA accounts next year, but again perhaps that will require us to host our own LMS&amp;hellip;?  Anyway, about the automation, I&amp;rsquo;m using Capybara and selenium web driver and firefox 47 to run a headed operation that opens a browser and logs in using my edge account credentials and then types the relevant SPOC information into a form.  I put instructor information in this YML format:&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;:joseph_2014&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!ruby/struct:Struct::Course&lt;/span&gt; 
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Software Engineering&lt;/span&gt;
  &lt;span class="na"&gt;institution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HPU&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CSC14249&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2015_Fall&lt;/span&gt;
  &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sjoseph@hpu.edu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And my scripts read that in and then create the course through the web interface, and set the relevant instructor as an admin.  There are then two other steps that I cannot seem to automate.  One is importing the course XML from the MOOC, since the file upload operation involves steps I can&amp;rsquo;t seem to replicate with selenium, and two, re-setting the course title and id after the upload, which unfortunately gets overridden by the MOOC import.  Both of these operations in the edX interface involve a lot of JavaScript that makes automation difficult.  &lt;/p&gt;

&lt;p&gt;I wrote the scripts a while ago, and it may be time to have another go at automating the file upload process, but my fear will be that I&amp;rsquo;ll spend an hour or two on it and still not quite get it working.  A different approach might be to automate manipulating the course XML file locally to fix the name and id, which is more likely to succeed and remove one of those tedious manual steps.  I also worked out on Friday how to merge the two parts of the course, which many instructors want and seems scriptable.  Maybe if I get that all sorted, I can get the system to the point that it takes me to the right page, has the right file ready for upload, and all I need to do is hit a single button?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a difficult trade off relating to how many times I will be repeating this operation, which in turn depends on the evolving numbers of SPOC instructors, and the presence of an alternative model called CCX that provides instructors with a skin on the MOOC that is less flexibility in terms of modification.  I guess I&amp;rsquo;ll have a go on another admin day, but pouring time on this is all predicated on me being a salaried instructor, and I&amp;rsquo;m still on leave of absence from HPU.  Our instructor community is based on a freemium model where students buying copies of our super-cheap textbook provide the only income, and despite winning some awards the sales are still modest.&lt;/p&gt;

&lt;p&gt;Maybe we need to adjust that model?  Armando&amp;rsquo;s working on bundling more coupons with the book.  Perhaps I should be running paid sessions working through book chapters or something?  On the automation side, what I&amp;rsquo;d also really like from edX is some kind of coordinated course creation API.  My scripts for automating SPOC creation could break any time that edX updates their interface, and they often break when firefox updates.  Of course creating lots of micro-courses is not necessarily part of edX&amp;rsquo;s bigger strategy.  I&amp;rsquo;ve put in a lot of volunteer-time because I wanted to join in with the bigger education revolution.  I&amp;rsquo;ll have to carefully re-assess how to move forward from here.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pride Comes Before a Fall</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/30/pride-comes-before-a-fall/"/>
    <id>http://blog.url.com/2016/09/30/pride-comes-before-a-fall/</id>
    <published>2016-09-30T01:00:00+01:00</published>
    <updated>2016-09-30T21:12:52+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;They say pride comes before a fall.  Looking back at yesterday&amp;rsquo;s blog I was feeling pretty pleased about how we&amp;rsquo;d split things up as regards the development of the new Karma feature.  That was getting deployed in the background yesterday whilst Michael and I paired on completing the improve hangout telemetry ticket we had started.  That turned out to be relatively straightforward, although I worry about how much data we might end up storing.  That&amp;rsquo;s an interesting set up that I&amp;rsquo;ve blogged about before and will come back to again, but is a side show to yesterday&amp;rsquo;s main event, which is that in the middle of that work, we experienced a serious problem on production.&lt;/p&gt;

&lt;p&gt;The first we heard was that AV CoFounder Thomas was getting a 500 error on his profile page on the main AgileVentures site.  He was surprised to say the least.  We were confused too; all the acceptance tests were passing.  Raoul had just deployed a chunk of changes to production (including upgrade to Ruby 2.3.1) and I&amp;rsquo;d kicked off a run of the new karma update rake task.  Michael was seeing failures from the rake task, and noticing that everyone now had zero karma on the main users page.  As Michael was asserting that we had a problem with the rake task, and that the database was screwed up, I took several breaths to keep calm.  Michael&amp;rsquo;s assertions were true, but we had a bigger problem - the 500 errors on the individual user pages.  &lt;/p&gt;

&lt;p&gt;I knew that the real data for the users&amp;rsquo; karma was not lost, since we calculate that from other aspects of the site.  The Karma values are re-summarised each day - they could easily be re-calculated and the ordering on the main users page fixed.  That was a relatively minor issue compared to whatever was causing all the individual user profile pages to fail.   Airbrake was telling us about the problem with the failing rake task, but telling us nothing about the 500 error on the user profile pages.  Airbrake posted to our #websiteone-notify channel and created a GitHub issue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1313"&gt;https://github.com/AgileVentures/WebsiteOne/issues/1313&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/46beetb1yld5vef/Screenshot%202016-09-30%2020.56.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;We were getting &lt;code&gt;undefined method&lt;/code&gt;total=&amp;rsquo; for nil:NilClass` in a run of the KarmaCalculator:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_elements&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our Demeter Violation and a nil object, two things I had been blogging about that morning, had bitten us.  I rolled the production code back to the previous deploy.  My priority was getting the user profile pages working again.  Working out how to fix the Karma calculation could wait.  I was excited to be capturing all of this on the hangout video.   We could have got distracted trying to fix the karma calculation here, and all the while anyone coming to the site trying to look at an individual profile page would get a 500 error.  We had to rectify that before anything else.&lt;/p&gt;

&lt;p&gt;I was frustrated that Airbrake was not reporting the 500 error - but that was nothing compared to when I completed the rollback to the previous working version and realised that that didn&amp;rsquo;t fix the site.  There had been migrations, so even though the code was back in the working state, the database was changed.  There was no longer a &lt;code&gt;karma_points&lt;/code&gt; field on the user table, and I couldn&amp;rsquo;t roll back the database without the migrations that were in the latest version of master.&lt;/p&gt;

&lt;p&gt;Looking at that now, what I could/should have done is rollback the migrations before taking the code base back.  In principle that would have allowed us to get the site back into the working order it was before the deploy.  As it was, I now faced needing to roll the code forward again, roll back the migrations and then take the code back again, and all that while important parts of the site would be non-functional.  As this was all running through my cortex, I managed to get the error message associated with the individual profile pages in the general heroku logs.  This was it:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Started GET "/users/tattsy" for 122.175.241.121 at 2016-09-29 15:05:48 +0000
2016-09-29T15:05:48.174796+00:00 app[web.1]: Processing by UsersController#show as HTML
2016-09-29T15:05:48.256332+00:00 app[web.1]:   Rendered users/profile/_summary.html.erb (10.2ms)
2016-09-29T15:05:48.174869+00:00 app[web.1]:   Parameters: {"id"=&amp;gt;"tattsy"}
2016-09-29T15:05:48.314400+00:00 app[web.1]:   Rendered users/profile/_detail.html.erb (57.5ms)
2016-09-29T15:05:48.314624+00:00 app[web.1]:   Rendered users/show.html.erb within layouts/user_profile_layout (69.6ms)
2016-09-29T15:05:48.314861+00:00 app[web.1]: undefined method `hangouts_attended_with_more_than_one_participant' for nil:NilClass
2016-09-29T15:05:48.314863+00:00 app[web.1]: /app/app/views/users/profile/_detail.html.erb:65:in `_app_views_users_profile__detail_html_erb__30276934721546551_69862305882580'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hangouts_attended_with_more_than_one_participant&lt;/code&gt; was being called on a nil.  We&amp;rsquo;d set up that method on the user class to delegate to the single Karma object associated with the User.  The implication whas that Karma object was nil.  The issue was the same as the problem with the karma update that rake task was encountering.  In this case a fix for one would likely be a fix for the other, but in my mind it was critical to confirm that.  If the 500 error on the profile pages had been caused by something else we would have been fixing the wrong thing in terms of bringing the site back to functionality as fast as possible.&lt;/p&gt;

&lt;p&gt;Now of course if I had taken the site straight back to fully operational status by rolling back the migrations before the code we could have been looking at both issues at our leisure.  However the site was still exhibiting failures in key places and we understood the problem and had a chance to just fix it and complete the production deploy.  We jumped into the production console and ran a procedure to create default Karma objects for all the users:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;→ heroku run rails c -r production
Running rails c on ⬢ websiteone-production... up, run.1677
Loading production environment (Rails 4.2.6)
irb(main):001:0&amp;gt; User.all.each { |u| u.karma = Karma.new ; u.save! }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This removed the nil association from all the users, and the individual profile pages started working again.  If they hadn&amp;rsquo;t (i.e. we had mis-analyzed) I would have rolled back the database and then the code, hopefully getting the site stable in its old state and then done further analysis.  However our quick fix had worked and confirmed our hypothesis about the problem.  Still the ordering on the users page was out of whack and everyone had zero Karma.  This was easy to fix now that every user object had a non-nil karma object associated.  We took the heart of the karma update rake task and ran it direct:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;irb(main):002:0&amp;gt;   User.all.each do |usr|
irb(main):003:1*     KarmaCalculator.new(usr).perform
irb(main):004:1&amp;gt;     usr.karma.save!
irb(main):005:1&amp;gt;   end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it ran we could see individual Karma totals being restored.  We were getting out of the woods, but how could this have happened?  We had all sorts of acceptance tests that displayed the individual profile pages.  How could they all be passing, but deploying that code lead to an error on production?&lt;/p&gt;

&lt;p&gt;Going over things slowly and carefully it&amp;rsquo;s clear that there are many things that could have prevented this problem from occurring.  Let&amp;rsquo;s look first at why our acceptance tests didn&amp;rsquo;t fail.  Acceptance tests like the following look at individual profile pages:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following users exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt; 
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;alice@btinternet.co.uk&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Having user profile page
    &lt;span class="nf"&gt;When&lt;/span&gt; I click on the avatar for &lt;span class="s"&gt;"Alice"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should be on the &lt;span class="s"&gt;"user profile"&lt;/span&gt; page for &lt;span class="s"&gt;"Alice"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should see the avatar for &lt;span class="s"&gt;"Alice"&lt;/span&gt; at 250 px
    &lt;span class="nf"&gt;And&lt;/span&gt; I should see &lt;span class="s"&gt;"Alice Jones"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We would expect a 500 error caused by a failure in the view to be caught here.  However if we look at how the user is created we see that it uses FactoryGirl.  &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Given&lt;/span&gt; &lt;span class="sr"&gt;/^the following users exist$/&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;seems&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="no"&gt;Cucumber&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;factories&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="no"&gt;RSpecs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hmmm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="no"&gt;Let&lt;/span&gt;&lt;span class="s1"&gt;'s look at that factory:

```rb
FactoryGirl.define do
  factory :user, aliases: [:whodunnit] do
    transient do
      gplus '&lt;/span&gt;&lt;span class="n"&gt;youtube_id_1&lt;/span&gt;&lt;span class="s1"&gt;'
    end

    first_name { Faker::Name.first_name }
    last_name { Faker::Name.last_name }
    email { Faker::Internet.email }
    password '&lt;/span&gt;&lt;span class="mi"&gt;12345678&lt;/span&gt;&lt;span class="s1"&gt;'
    password_confirmation { password }
    display_profile true
    slug { "#{first_name} #{last_name}".parameterize }
    bio { Faker::Lorem.sentence }
    skill_list { Faker::Lorem.words(4) }
    karma { Karma.new }

    after(:create) do |user, evaluator|
      create(:authentication, provider: '&lt;/span&gt;&lt;span class="n"&gt;gplus&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uid: &lt;/span&gt;&lt;span class="n"&gt;evaluator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gplus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aha, it seems that our acceptance tests are not as end to end as we might like.  A default Karma is being created.  Michael and I added that &lt;code&gt;karma { Karma.new }&lt;/code&gt; line for the RSpecs, not realising that we&amp;rsquo;d be impacting the Cucumber acceptance tests.  In LocalSupport we&amp;rsquo;d always avoided factory girl in Cucumber.  Of course one can equally counter that we should have been investigating the steps more thoroughly to anticipate this connection.  &lt;/p&gt;

&lt;p&gt;Anyway, so hopefully it&amp;rsquo;s clear why all the acceptance tests passed, and we can wail and gnash our teeth about the use of factories in the acceptances test, but we could have encountered this error well before production if we&amp;rsquo;d looked at the individual profile pages, or run the rake update karma task, on our local machines, develop, or staging.  That that didn&amp;rsquo;t happen is an oversight, but also a reflection of our trust in the acceptance tests.&lt;/p&gt;

&lt;p&gt;Another thing that might have helped would have been completing the full refactoring of the Karma first, although who knows, we might just have pushed out a bigger code change and had more trouble getting to the bottom of things when the proverbial hit the fan.  Postmortems aside we had the remaining problem that a newly created user would not have a Karma object.  We got off a quick PR with the following RSpec that wrapped the issue:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'creating user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'should not be possible to save a user with nil Karma'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s1"&gt;'doh@doh.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s1"&gt;'12345678'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'should not override existing karma'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s1"&gt;'doh@doh.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s1"&gt;'12345678'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the associated fix in the User class:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;
  &lt;span class="n"&gt;after_save&lt;/span&gt; &lt;span class="ss"&gt;:build_karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;if: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Raoul deployed that quickly, but I noticed that we were still getting some errors from the karma update rake task which looked like they were related to ill-formed participant data.  That wasn&amp;rsquo;t catastrophic, but the karma update rake task would need upgrading to allow it to avoid getting derailed by those errors; at least until we completed the full upgrade of the hangout telemetry making separate models for participants and so forth.  Although that looks like we might face a tricky migration of the legacy data.&lt;/p&gt;

&lt;p&gt;Ironically we had been working on the profile pages during the week and they had been working fine, but we&amp;rsquo;d been jumping back and forth between different branches.  The addition of the premium upgrade button had worked fine, but that had been isolated from any Karma changes until it got merged to develop.  It makes me wonder if we shouldn&amp;rsquo;t prefer some kind of continuous deployment structure where we deploy to production more frequently rather than grouping things in bunches.  Or should we see yesterday&amp;rsquo;s problem as an indictment of the &amp;ldquo;drive-by&amp;rdquo; coding style, where we try to make the smallest fixes possible, and avoid building on top of things until they are merged to develop?&lt;/p&gt;

&lt;p&gt;I still hold out hope for the &amp;ldquo;drive-by&amp;rdquo; style in moderation.  We are interleaving it with domain entity development.  If anything, yesterday&amp;rsquo;s production fail points to the need for slightly more rigorous manual checks on local, develop and staging servers during our development and deploy process.  In my experience programming proceeds like this.  There is a period with fewer problems and increasing confidence and you tend to take bigger and bigger steps and move faster and faster, and then eventually you are brought up short, and that forces you to move more slowly again.  The critical thing is to learn as much as you can when the mistakes happen; and remember that pride often comes before a fall :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sraE18A_BZ8"&gt;Pair Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GAXcM9HHGyc"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ducking and Diving</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/29/ducking-and-diving/"/>
    <id>http://blog.url.com/2016/09/29/ducking-and-diving/</id>
    <published>2016-09-29T01:00:00+01:00</published>
    <updated>2016-09-29T20:57:14+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So having partially recovered from the cold I was able to pair program again today.  Interleaving work on the Karma calculation and the premium memberships, we now had an outstanding PR for premium upgrade buttons, so we ducked back to the Karma work of the previous week where we had got tangled up in all sorts of trouble with legacy tests, factories and objects.  The ardour of frustration had cooled.  I was not now in such a hurry to &amp;ldquo;solve&amp;rdquo; the problem.  I think that really helped.  We&amp;rsquo;d broken up the follow on refactorings into two tickets; one to get the karma total out of the user table, and the other to transfer all the rest of the intermediate calculations into the Karma model itself.&lt;/p&gt;

&lt;p&gt;We started on removing karma from the user table.  The approach here was just to create the migration and see what errors we flushed out:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoveKarmaFromUserTable&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;remove_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:integer&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was torn about this sort of hacky approach, versus the other ticket which would see us refactoring away the KarmaCalculation service.  Still that bigger refactoring had more to go wrong, so it made sense to take the simpler step first.  Well maybe it wouldn&amp;rsquo;t be simpler, but we needed to flush out any unknowns before we went on to the bigger refactoring.  It also felt good to be removing something from the bloated user table.&lt;/p&gt;

&lt;p&gt;So we proceeded with the migration and flushed out the following 16 failures in the specs:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;users/index.html.erb renders User name link with href
users/index.html.erb should display a list of users
users/index.html.erb display user status there should be 4 green dots
users/index.html.erb display user status display green dot for online use...
users/index.html.erb display user status do not display green dot for off...
users/index.html.erb display user status displays the user's status with ...
users/index.html.erb advanced filtering should display an advanced filter...
users/index.html.erb advanced filtering timezone select is populated with...
users/index.html.erb advanced filtering projects select is populated with...
users/index.html.erb renders the users count in the sentence above shows ...
users/index.html.erb renders the users count in the sentence above has va...
UsersController#index should assign the results of the search to @users
KarmaCalculator for new members should assign 0 karma points to members w...
KarmaCalculator for existing members for old members should assign karma ...
KarmaCalculator for existing members for members attending hangouts gives...
layouts/application.html.erb should return 200 for all link visits
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which were all variations on the expected error message of:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;column users.karma_points does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We started by fixing up the Karma controller so that it switched its references from &lt;code&gt;user.karma_points&lt;/code&gt; to &lt;code&gt;user.karma.karma&lt;/code&gt;.  That latter looked silly so we switched it to &lt;code&gt;user.karma.total&lt;/code&gt; with another migration:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RenameKarmaKarmaToTotal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;rename_column&lt;/span&gt; &lt;span class="ss"&gt;:karmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:total&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reaching through from one object into another like &lt;code&gt;user.karma.total&lt;/code&gt; is a Demeter violation.   We shouldn&amp;rsquo;t know or assume too much about the objects we are collaborating with, but we knew our next ticket was going to refactor away the KarmaCalculation service, so we didn&amp;rsquo;t want to get pulled in to fixing that immediately.  After getting the KarmaCalculation specs to pass we had a few views to update to use &lt;code&gt;user.karma.total&lt;/code&gt; instead of &lt;code&gt;user.karma_points&lt;/code&gt; and they were soon passing.  The user controller needed a slightly more complex change from:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;per&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allow_to_display&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;karma_points: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;per&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:titles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allow_to_display&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'karmas.total DESC'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to cope with the fact that we were now ordering the main user view based on a field in another table.  That done, all the specs were passing, and we ran the cukes to see if any of the features were broken. Before we did that I had half a mind to start deleting the view specs that were failing, and even the controller specs.  I&amp;rsquo;ve lost any motivation to write view and controller specs that effectively unit test parts of the view and controller in isolation.  It feels like the features and integration tests will check that logic, and that &amp;ldquo;unit&amp;rdquo; tests of controllers and views encourage logic to appear in those areas when all complex stuff should be being pushed into models, services, gems and remote services where possible.  That&amp;rsquo;s what we&amp;rsquo;ve done with some success in our work on ProjectScope.&lt;/p&gt;

&lt;p&gt;However, the fixes for the specs had been relatively simple, and the fear of deleting something that might have use in the future (dangerous paranoia?) kept me from hacking and slashing.  The idea of more extensive unit tests of controllers and views is that they can find you problems faster than the slow running acceptance tests.  Ironically our acceptance tests don&amp;rsquo;t take much longer to run than our specs, and anyway for all this to work you need to trust that your specs are testing the right things.  In fact we did get a failure in the cukes, which was related to the way we were setting up our default user objects - there was no Karma object associated with them by default, so calling &lt;code&gt;user.karma.total&lt;/code&gt; was failing with no method &lt;code&gt;total&lt;/code&gt; on nil object.  Our Demeter violation was biting us.&lt;/p&gt;

&lt;p&gt;Now we could have been less confident and fixed this with &lt;code&gt;user.karma.try(:total)&lt;/code&gt; or even the new ampersand dot syntax &lt;code&gt;user.karma&amp;amp;.total&lt;/code&gt;, but given that we were already uncomfortable with the Demeter violation, we went another, perhaps more confident, route.  We TDD&amp;rsquo;d a new method on the User object:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#karma_total'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns 0 when user initially created'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma_total&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'once associated karma object is created'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;karma: &lt;/span&gt;&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:karma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns non zero'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;karma_total&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Effectively we created the sort of method we had before, i.e. &lt;code&gt;karma_points&lt;/code&gt; but called it &lt;code&gt;karma_total&lt;/code&gt;, and the user object could now confidently return the Karma total under any circumstances:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;karma_total&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much more confident, and now everything was green.  For a long time I&amp;rsquo;ve been talking about how much I like Objective-C&amp;rsquo;s set up where calling a method on nil just results in nil.  The ampersand dot in Ruby promises that much, but now I&amp;rsquo;ve been infected by Avdi&amp;rsquo;s &amp;ldquo;confidence&amp;rdquo; meme.  I also just watched this talk by Peter Bhat Harkins, which was almost going to be called &amp;ldquo;kill nil&amp;rdquo;:&lt;/p&gt;

&lt;iframe style="display: block; margin: auto;" align="center" width="560" height="315" src="https://www.youtube.com/embed/tg3YjMqWNj0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;and I&amp;rsquo;m starting to see nil as evil.  Well at least something to address by avoiding passing it around rather than using &lt;code&gt;try&lt;/code&gt; or ampersand-dot which screws with our readability.  Anyhow we&amp;rsquo;d managed to follow a drive-by methodology, doing the minimum work necessary to get our pull request out.  We&amp;rsquo;d fixed the Demeter violation for &amp;ldquo;getting&amp;rdquo; Karma where it was breaking our feature tests, but we left the Demeter violation for &amp;ldquo;setting&amp;rdquo; Karma in the KarmaCalculation service, which we were planning to refactor in the next ticket.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d finished early so we got in some quick PRs to upgrade to Ruby 2.3.1, remove some old Vagrant scripts and started on a new ticket for improving hangout telemetry.  A reasonable afternoon&amp;rsquo;s work.  We&amp;rsquo;d ducked and dived and at the end of it I felt we&amp;rsquo;d taken a reasonable middle road down the profusion of coding and project heuristics that infest my mind.  Let&amp;rsquo;s see what tomorrow brings :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fPGJ5lon92M"&gt;Pairing Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r6pWaOVKyRM"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Fallow Day</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/28/fallow-day/"/>
    <id>http://blog.url.com/2016/09/28/fallow-day/</id>
    <published>2016-09-28T01:00:00+01:00</published>
    <updated>2016-10-01T13:47:44+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today was a fallow day.  I&amp;rsquo;d been knocked back with a fever, sore throat and tummy trouble from the latest virus doing the rounds at my kids &amp;ldquo;Virus Exchange Camps&amp;rdquo;, &amp;hellip; sorry, I mean schools.  I&amp;rsquo;ve no idea if anyone else talks about fallow days, but there&amp;rsquo;s this expression about leaving a field to go fallow.  In crop rotation you plant different crops in each field each year and then don&amp;rsquo;t plant anything every few years to avoid exhausting the soil.  I came up with the expression during my Ph.D. to mark those days when I didn&amp;rsquo;t seem to get anything productive done - usually because I was sick, or more commonly, slightly hung-over.&lt;/p&gt;

&lt;p&gt;So I had spent most of the morning asleep, and didn&amp;rsquo;t have the energy to pair, did a bit of admin work - catching up on a few long outstanding things - and later in the day I managed to spend a little time coding in node/express/mongo to see if I could get a little something set up that might form the basis of the async voting bot, or planning poker agent that we had been thinking about.  Let me explain, planning poker is this process of simultaneously voting on the complexity/difficulty of a task in a meeting.  So the task might be, add a new data report to the statistic page, and you might have 5 people and they would do like rock, paper, scissors with their fingers, except with numbers, e.g. 1, 2 or 3 and then the five people would all show their fingers at the same time and you&amp;rsquo;d get votes for say 1, 2, 2, 2, 3, and then you might ask the people voting against the majority why they thought that things were more or less complicated and then after some limited discussion you might revote or the outliers will agree to match the majority.&lt;/p&gt;

&lt;p&gt;The value generated from that voting can then be attached to a ticket associated with an issue, and then that gives someone who&amp;rsquo;s going to start on that task an idea of what they are taking on.  It also allows tools like Pivotal Tracker to help with estimating when a variety of tasks will be completed.  Another central part of the voting is that it exposes differences in assumptions between team members, and provides a structured way to get to the bottom of them relatively quickly.  We&amp;rsquo;ve been doing online synchronous voting in AgileVentures projects for a long time.  We tend to use a hangout to coordinate the meeting and then do the simultaneous voting in chat.  You can often see the traces of this in the different AgileVentures chat rooms on Slack, particularly since we realised that the Google Hangout chat didn&amp;rsquo;t persist.&lt;/p&gt;

&lt;p&gt;Scroll forward, there are some projects where it&amp;rsquo;s difficult to get people together at the same time, even in a remote hangout.  Also voting on a load of tasks, one after the other, can be somewhat tedious, so we&amp;rsquo;re now experimenting with asynchronous remote voting, and for the last two weeks I&amp;rsquo;ve been playing the part of a hypothetical chatbot for the LocalSupport and WebSiteOne projects where I post something like this in the relevant Slack channel:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel new async vote on "make doit mentions in map key be hyperlinks" https://www.pivotaltracker.com/story/show/122461371, discuss here, or in ticket and then DM me your vote of 1 2 or 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then I&amp;rsquo;ll get individual DMs from developers like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Vote for https://www.pivotaltracker.com/story/show/122461371:   1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or sometimes with a bit of explanation&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.pivotaltracker.com/n/projects/742821/stories/122461371 seems like a 2, because it requires a bit of front-end and a bit of back-end, which means testing on both those fronts too
i’m not sure who wants to do this story, but my coworker seems interested in pairing with me on it
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I guess the hyperlinks issue  for "do-it" is not your run of the mill "link_to" type. It will involve JS so if that s the case I say 3.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and there might be some discussion in the ticket itself, but as I get votes I&amp;rsquo;ll post into the Slack channel like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@here we have 2 votes for "make doit mentions in map key be hyperlinks" https://www.pivotaltracker.com/n/projects/742821/stories/122461371
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I might also prompt the channel if we don&amp;rsquo;t get any updates for a while:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel we have two votes on https://www.pivotaltracker.com/story/show/122461371, we need one more vote to move forward - discuss here, or in ticket and then DM me your vote of 1 2 or 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then once I have a sufficient number of votes (currently 3) I post the results to the channel:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@channel vote on https://www.pivotaltracker.com/n/projects/742821/stories/122461371 "make doit mentions in map key be hyperlinks" complete - @decareano 3, @johnnymo87 2, @marouen 1 - I'm just imagining that this is just a simple `link_to` or am I missing something - @johnnymo87 @decareano any thoughts on why this is more complex than a 1?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then we have a discussion in the Slack channel (or it could be in the ticket):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tansaku, did you read my comment in my vote? I had the same thought as @marouen but in reverse. Anyway, if it's a link_to my vote is 1.
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@decareano thanks for your vote - we now have two votes of 1 for https://www.pivotaltracker.com/story/show/122461371 "make doit mentions in map key be hyperlinks" and a 2 from @johnnymo87 - @johnnymo87 happy to revise to 1 or is there some aspect of this we've missed?
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;oh, i thought that part of the UI was done in js. But I looked it up, and it’s not. I’ll revise to a 1, @tansaku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I set the estimate on the ticket and we start again:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;okay @here so that story is unanimous as a 1

@channel we have a new async vote on https://www.pivotaltracker.com/story/show/131062023 "Refactor Build marker service" - please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer :slightly_smiling_face:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that was kind of a trivial example, but actually that vote did expose some misconceptions about the ticket in question.  I think these async votes are quite good for those projects where the team members can&amp;rsquo;t make the synchronous hangouts.  There is a fair amount of logistical overhead for me running it (which could be automated into a bot) and also since I&amp;rsquo;m the &amp;ldquo;bot&amp;rdquo; it&amp;rsquo;s a bit unfair for me to vote.  If we had this all automated I could vote too, and things could proceed a little faster.  Although of course we have to consider the time it takes to automate, and whether the automating would throw the baby out with the bathwater.&lt;/p&gt;

&lt;p&gt;Others have already expressed concern that the asynchronous nature of the vote would remove the critical discussion portion that happens in the synchronous meetings.  It may be we are losing something, but by running this demo with me as bot, we certainly continue some level of discussion.  Another concern is that switching to a bot, people would not be as expressive to the bot as they are to me, as bot.  A sort of human-y thing.  One solution to that might be to dress the bot up as me, which is what we do for pinging hangout notifications where the bot takes on the logo of whoever starts the hangout.&lt;/p&gt;

&lt;p&gt;Unfortunately I think Slack still does not support bot DM-ing.  At least you can DM, but then all the responses go to the slack bot channel - you can&amp;rsquo;t quite continue a one on one conversation with a bot.  Anyway, the process has also allowed me to tweak the &amp;ldquo;interface&amp;rdquo;, in that chats with developers have raised a few points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always include a link to the ticket in any post&lt;/li&gt;
&lt;li&gt;Always include the title of the ticket in any post&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s helpful to include instructions for newcomers like: &amp;ldquo;please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I&amp;rsquo;ve validated that the functionality is getting some use.   So with all that in mind I started looking at test driving a Node/Express app.  I&amp;rsquo;m pretty sure I could write something faster in Ruby/Sinatra, but there&amp;rsquo;s also this idea that we need to diversify the apps we&amp;rsquo;re using in AgileVentures to appeal to a wider range of developers.  Also after our AgileBot experiences, I&amp;rsquo;m keen to see if stripping away Hubot and CoffeeScript, whether a plain Node/Express app will be more manageable.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve TDD&amp;rsquo;d Node/Express before, but it&amp;rsquo;s been a year or so, and I want to be up with the best practices, so I was having a look around for tutorials and things.  I found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://devcenter.heroku.com/articles/mean-apps-restful-api&lt;/li&gt;
&lt;li&gt;https://semaphoreci.com/community/tutorials/a-tdd-approach-to-building-a-todo-api-using-node-js-and-mongodb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now interestingly the Heroku one was appealing because getting something up onto a stable endpoint is critical, but it wasn&amp;rsquo;t TDDd, so I went for the latter, which I ultimately got working, but was a bit disappointing, because it wasn&amp;rsquo;t actually TDD.  It had tests, yes, but the functionality was not test driven.  I notice now that SemaphoreCI is paying $200 a pop for people to write tutorials &amp;hellip; In the author&amp;rsquo;s favour, they did link to the complete code at https://github.com/rajzshkr/todoapi, which is what allowed me to get things working.  The tutorial itself was flawed on the following points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;different code from the working example&lt;/li&gt;
&lt;li&gt;tests introduced after the code they were testing, i.e. not TDD&lt;/li&gt;
&lt;li&gt;bits of code in tutorial not associated with particular files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of working through the tutorial I did get mongodb installed and running, discovered some &lt;a href="https://expressjs.com/en/guide/debugging.html"&gt;express debugging tricks&lt;/a&gt;, and spent most of my time working out that the Postman Chrome plugin that I was using to test the POST endpoint needed to provide a raw post body to be handled by this app; form-data and x-www-form-urlencoded options just showing up as a blank body.  Frustratingly that last item burned the time I might have used deploying to Heroku.  So by the end I was looking at a more delineated app structure than I had previously seen with express, involving models from Mongoose (MongoDB Schema module), and controllers and a router, all in separate files.  Ironically I don&amp;rsquo;t know how widespread that particular layout is, although if I know the node ecosystem, there may not be any accepted standard yet.&lt;/p&gt;

&lt;p&gt;The tutorial itself didn&amp;rsquo;t actually provide any end to end tests, only unit tests.  The repo showed a controller test and an end to end test (they called it integration) using the supertest module.  I found some other blogposts on that and on an alternate testing module called hippie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://www.joyent.com/blog/risingstack-writing-testable-apis-the-basics&lt;/li&gt;
&lt;li&gt;http://developers.redhat.com/blog/2016/03/15/test-driven-development-for-building-apis-in-node-js-and-express/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was reflecting that perhaps that&amp;rsquo;s where I should have started with a slack bot, and I found a tutorial on that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but we&amp;rsquo;re over our integration limits for our AV slack, and I started to think that rather than worrying about the technical details, I should get the engine for the bot working, independent of any of the interfaces (InsideOut again), and so I finished up with writing down some stories about the system, which you already understand because the first part of this blog lays them out, but just in case you&amp;rsquo;re interested, here were my summary notes from the day&amp;rsquo;s hacking:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;planning poker bot&lt;/p&gt;

&lt;p&gt;/bot vote &lt;ticket url&gt; # optional ticket url&lt;/p&gt;

&lt;p&gt;&amp;ndash;&amp;gt; announces - we have async vote on ticket url (first from repo if not specified) &amp;ldquo;title&amp;rdquo;, please DM me 1 (simple), 2 (medium) or 3 (hard) - discussion in ticket or here as you prefer :slightly&lt;em&gt;smiling&lt;/em&gt;face:&lt;/p&gt;

&lt;p&gt;then needs to be able to receive inputs from people - slack DMs? or expose web interface (could do react there?) and then post back to slack &amp;hellip;&lt;/p&gt;

&lt;p&gt;whole thing could be non-slack to start with to reduce complexity?&lt;/p&gt;

&lt;p&gt;people vote on tickets&lt;/p&gt;

&lt;p&gt;so we have an AsyncVote, which consists of a ticket with a title and url, and then there are a number of votes, which have a value, and come from an individual and might have an explanation, and when the number of votes reaches a set value (e.g. 3) then the full results are revealed, and the ticket value is set if there is agreement, or we prompt more discussion &amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I&amp;rsquo;ve come round to thinking should I just TDD something in node that will operate on the command line, and then build some different interfaces on top of it?  I&amp;rsquo;d love to have time to do both a node/express and a ruby/sinatra version to show the complete parallels and/or lack of them between the two &amp;hellip; let&amp;rsquo;s see when I have another fallow day :-)&lt;/p&gt;

&lt;p&gt;Related Code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tansaku/planning_poker_bot"&gt;https://github.com/tansaku/planning_poker_bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Dodging a Bullet</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/27/dodging-a-bullet/"/>
    <id>http://blog.url.com/2016/09/27/dodging-a-bullet/</id>
    <published>2016-09-27T01:00:00+01:00</published>
    <updated>2016-09-29T09:29:58+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So Monday was the day to see if our new domain model components would ease the process of delivering a new feature. As warm up I did a quick refactoring requested by Raoul on our Karma calculation changes.  There was the possibility of re-using some cucumber steps.  We&amp;rsquo;d submitted the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run rake task "([^"]*)"$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;    
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for calculating karma points$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"karma_calculator"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and Raoul was suggesting re-using the the first step.  Looking it over I actually modified it to the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for calculating karma points$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"karma_calculator"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^I run the rake task for fetching github commits$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vg"&gt;$rake&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"fetch_github_commits"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the idea that the high level cucumber scenarios should be as readable English as possible, preferring &lt;code&gt;When I run the rake task for calculating karma points&lt;/code&gt; to &lt;code&gt;When I run the rake task for &amp;quot;karma_calculator&amp;quot;&lt;/code&gt;.  Trivial?  Maybe.  I&amp;rsquo;m conflicted.  These are related to cucumber stories we have in our dev-ops section which I&amp;rsquo;m hoping provides some testable documentation of the operational aspect of the application that&amp;rsquo;s used by app admins rather than end users.  I&amp;rsquo;m also going with not re-using step-definitions within step-definitions.  Two more heuristics there to add to the list.&lt;/p&gt;

&lt;p&gt;I mention this warm up partly because I feel like there&amp;rsquo;s clean up for the Cucumber stories we wrote on Monday.  As it happens, Raoul approved that above change and merged the new Karma calculation PR in, making it possible that we could get started on refactoring work there.  But anyhow, here, ultimately, are the Cucumber scenarios that defined our Monday&amp;rsquo;s work:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User is on free tier and looking at own page
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User is on free tier and looking at other persons profile page
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I visit Alice's profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User upgrades to premium from free tier
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am logged in
    &lt;span class="nf"&gt;And&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Premium Member"&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; I am on my profile page
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should not see &lt;span class="s"&gt;"Basic Member"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I should not see &lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We didn&amp;rsquo;t get to these all at once.  We&amp;rsquo;d put the fruits of our InsideOut work aside (the new domain elements Subscription and PaymentSource) and reverted to OutsideIn.  This was the set of experiences we wanted for the end user, in association with the &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1261"&gt;ticket&lt;/a&gt; we were working on. We&amp;rsquo;d actually started with two scenarios, one about upgrade to premium and the other about upgrade to premium plus, and in my mind had been the idea that we would ultimately make both types of upgrade work using our new domain entities.&lt;/p&gt;

&lt;p&gt;However that was actually scope creep off the ticket, and in fact there was a chunk of work specific to the ticket (upgrade from basic to premium) that could be implemented in the existing system without any reference to the new domain entities, so we got that done.  It was mainly a change to the view to add a report about the user&amp;rsquo;s current membership status, and an upgrade button:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if current_user &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; current_user == presenter.user %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= current_user.membership_type %&amp;gt; Member&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% unless current_user.membership_type == 'Premium' %&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charges_path(plan: 'premium') do %&amp;gt;
                  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
                          &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
                          &lt;span class="na"&gt;data-description=&lt;/span&gt;&lt;span class="s"&gt;"A month's subscription"&lt;/span&gt;
                          &lt;span class="na"&gt;data-amount=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt;
                          &lt;span class="na"&gt;data-currency=&lt;/span&gt;&lt;span class="s"&gt;"GBP"&lt;/span&gt;
                          &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt;
                          &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Premium Membership"&lt;/span&gt;
                          &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Upgrade to Premium"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

              &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m itching to pull this into a partial (&lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1306"&gt;refactoring ticket&lt;/a&gt;), and I also worry we&amp;rsquo;re not being confident enough with our logic - of which there is also too much in the view.  Devise&amp;rsquo;s &lt;code&gt;current_user&lt;/code&gt; method is maybe the source of our timidity, since if no one is logged in, it returns nil.  Perhaps it would be better if it returned an AnonymousUser object.  Michael started looking into how we might override it, but I demurred, writing an email to Stripe about our new approach of locking the data-locale to &amp;ldquo;en-US&amp;rdquo;.  All that was actually after we&amp;rsquo;d dropped to the RSpec level to create the necessary supporting operations for the view fragment above.  Let&amp;rsquo;s just take a look at them:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#membership_type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns membership type'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Basic'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'premium member'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

      &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;stripe_customer: &lt;/span&gt;&lt;span class="s2"&gt;"sdfdfds"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns premium'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'Premium'&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="n"&gt;membership_type&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Basic"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="s2"&gt;"Premium"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally a little addition to the charges controller, so that when users sign up for premium their customer id is stored in the user table:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeEmail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="ss"&gt;plan: &lt;/span&gt;&lt;span class="vi"&gt;@plan&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_charge_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upshot of which was that using only the existing aspects of the system the premium users would see their status on their profile page, and non-premium users would see the upgrade button.  It was all working without the aid of the new domain entities.  As I mentioned above, Michael and I had other concerns with our implementation, but with my eye on the clock I suggested we get this in as a pull request, and then use the new domain entities to support work on a subsequent &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1303"&gt;ticket of allowing premium users to upgrade to premium plus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had other conflicts dripping out of me, such as whether we should be testing Stripe differently (webmock?) and whether we should be making our scenarios more declarative.  I guess part of the challenge with our increasing list of heuristics for good coding and good project management is that it can feel like you are being pulled in multiple directions at once, and you can be forgiven for a kind of paranoia about which really is the most important issue to work on first.&lt;/p&gt;

&lt;p&gt;Submitting the PR for just the above code involved pulling out the commits for the new domain model entities.  One thing that was easy to prioritise for me was to put only the smallest set of necessary elements in the pull request.  I didn&amp;rsquo;t want Raoul&amp;rsquo;s to get distracted during his code review by having a set of un-used domain entities in the incoming code.  Michael found a &lt;a href="http://stackoverflow.com/a/1994491/316729"&gt;cool technique for cherry picking a set of commits&lt;/a&gt; and we got in a PR with just the code above, and moved the domain entities onto a new branch associated with the ticket for creating the premium plus upgrade button.  Will we fall foul of premature refactoring?  Or did we just dodge a bullet?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty clear to me that the current stripe_customer field on user can&amp;rsquo;t support information about different membership plans.  Hopefully our InsideOut work will bear fruit in the next session!  Would it be too much to hope that we&amp;rsquo;ll have dodged one bullet and be ready to unleash some of our own? :-)&lt;/p&gt;

&lt;p&gt;Related Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UprAXzePQmo"&gt;Pairing on the above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JPvkCffsHOo"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
