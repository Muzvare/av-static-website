<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-12-16T00:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Mobbing and Face 2 Face</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/16/mobbing-f2f/"/>
    <id>http://blog.url.com/2016/12/16/mobbing-f2f/</id>
    <published>2016-12-16T00:00:00+00:00</published>
    <updated>2016-12-22T12:42:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Thursday was taken at quite a rush.  I moved the Premium Mob programming session forward half an hour so I could attend my twin boys&amp;rsquo; carol concert.  We got deeper into Avdi Grimm&amp;rsquo;s Confident Ruby, where the patterns were starting to combine to create code like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Graphics&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Conversions&lt;/span&gt;
    &lt;span class="kp"&gt;module_function&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:to_point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_point&lt;/span&gt;  
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:to_ary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_ary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Cannot convert &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to Point"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="no"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_point&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt; 
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="no"&gt;Pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_ary&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Flag&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;flag_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@flag_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag_color&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_point&lt;/span&gt;
        &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="vi"&gt;@y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Graphics&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Graphics&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conversions&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"1:2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mobbers seemed pretty happy with the concepts of Idempotency, the splat argument (&lt;code&gt;*args&lt;/code&gt;) and the lambdas (&lt;code&gt;-&amp;gt;(arg)&lt;/code&gt;) in the case statements.  The big discussion was about the use of Structs vs Classes, and Matt was able to use the shared C9 workspace to good effect to show me the alternatives he was thinking about.  I&amp;rsquo;m not sure that we&amp;rsquo;re yet truly mobbing, but I think the others are gaining in confidence and we&amp;rsquo;ll get there.  Mobbing completed, it was time for a carol service, and I was hardly back from that before it was time for the Kent Beck scrum.  I had managed to review a few LocalSupport pull requests, prioritising input for the Premium members who&amp;rsquo;d submitted code or questions.&lt;/p&gt;

&lt;p&gt;Ed had booked me for a Premium F2F session immediately after the Kent Beck and we dived into user stories and cucumber to drive the creation of a new EventManager project in Rails 5.   Within the hour we got everything set up and had our first feature/scenario failing at the point where it would need ActionCable working in order to pass:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Joining the Event
  As a busy AV member
  So that I can work out if I want to join an event
  I'd like to see who is present in the event, updated in real time

  As a new member
  So that I can join the event on time
  I would like to have a real time view of whether the hangout is live

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; an event exists

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; see event status
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit the page for an event
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"event not live"&lt;/span&gt;
    &lt;span class="nf"&gt;When&lt;/span&gt; the event goes live
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"event live"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was pretty satsifying, and I was riding high on possible nibbles from a few prospective AgileVentures sponsors.  In terms of financial stability we&amp;rsquo;re about half way there.  If I can land another sponsor and double the number of Premium members it will be a very happy 2017 indeed.  My dream is a sustainable framework for open education for all, where we&amp;rsquo;re all learning through the process of trying to make the world a better place.   The mob sessions are private at the moment, but I get permission from the F2F and Plus members to make their sessions available in the project channels to help the open source projects we work on, and of course all the resulting code is open.  We will need to throw the right sort of licenses in there.  Is it too crazy a dream that we could all be learning and growing without fear?  All benefiting from each other&amp;rsquo;s courage to share the learning experience and process with each other?  And splitting our objective of personal growth with that of helping others?  Call me a dreamer, but I&amp;rsquo;m not the only one &amp;hellip; :-)&lt;/p&gt;

&lt;p&gt;Anyhow, I&amp;rsquo;m going to take a two week break from blogging now, like I did over the summer so I can calm down a bit and catch up with admin, coding and polishing and distributing some of the older blogs.  Hope you all have a very cool yule and I&amp;rsquo;ll look forward to seeing you all in the New Year! :-)&lt;/p&gt;

&lt;h3&gt;Related Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lrw0R8YbxXU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LkagGRnOorI"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;F2F pairing on Rails 5?  Navigate to the #event_manager channel on AgileVentures slack to catch the link before we lose the slack history :-)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>To Pair or Not to Pair</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/15/to-pair-or-not-to-pair/"/>
    <id>http://blog.url.com/2016/12/15/to-pair-or-not-to-pair/</id>
    <published>2016-12-15T00:00:00+00:00</published>
    <updated>2016-12-20T21:06:56+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My objective on Wednesday was to make further progress on the Paypal integration.  Things getting in the way of that included blogging, sending out emails, scrums, coordination sessions, and needing to pick the kids up from school at short notice.  Bit of scrappy day, but now that I&amp;rsquo;m running Premium Plus pairing sessions on Sundays, I need to be able to help my wife out in a fix during the week.&lt;/p&gt;

&lt;p&gt;I did manage to complete my process of sending emails one by one manually to every AgileVentures member.  There were 2920 of them before I was on the Ruby Rogues podcast, and that&amp;rsquo;s more than a free-tier mailchimp account can handle.  I resolved to grit my teeth and email each person individually to tell them about how our new Premium plans are taking us on the road to financial stability and my commitment to blogging about the process.  I did semi-automate the process as I&amp;rsquo;ve blogged about before, using a script that takes an email template and lanches a Thunderbird editor, filling in email, subject, first name etc.  I then review the email visually, adding personal notes, potentially even changing it completely depending on my relationship with the individual.&lt;/p&gt;

&lt;p&gt;It takes me about 20 minutes each day to send 100 emails.  So I guestimate that I&amp;rsquo;ve burned about 10 hours in the process.  I&amp;rsquo;m sending the emails directly from my personal account so I end up with the message in my sent folder, so I can easily refer back to whoever I&amp;rsquo;ve sent to, and responses from AV members come straight back to me.  I&amp;rsquo;ve had 50 or so productive email conversations from these emails that have gone out, 2 unsubscribe requests, and at least 10 people sign up as premium members; so overall I&amp;rsquo;d say it&amp;rsquo;s probably been worth it.  That said I&amp;rsquo;m glad to finish it and create more time for coding.  Having completed the run, I used the new User deactiviation functionality to delete the two users who requested to unsubscribe, and then I took the entire set of remaining users and invited them to Slack to ensure that everyone had got an invite, because there had been periods where the invitation system was offline.  The slack client slowed under the strain of processing nearly 3000 invites, but to its credit it all worked, and it looks like 150 or so folks who&amp;rsquo;d never been invited got invitations finally. Yay!&lt;/p&gt;

&lt;p&gt;As the new greeter bot welcomed them into Slack, I did a coordination session with Matt and Michael where we helped Matt sort out Redeemify Heroku issues using Heroku fork, and sorted node weirdness as Michael applied some fixes to the botmock framework.  We had a bit of a review of the WSO board, but I didn&amp;rsquo;t make any progress on the PayPal side.  In my lunch break I did manage to complete chapter 5 of the code samples in the new RSpec book that I&amp;rsquo;m reviewing.  Maybe I should ask the guys at Pragmatic Programmers if they&amp;rsquo;re interested in a book on &amp;ldquo;Agile Software Project Management with Volunteer Contributions&amp;rdquo;, or maybe it should be &amp;ldquo;Open Source Agile Software Project Management&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;So then I was dragged away from the computer to pick up my twin boys.  I managed to get back in time for the Kent Beck scrum, where it was great to see Susanna reporting in on the SHF project.  I told Michael and Matt that I really had to focus on the PayPal integration in the final programming hour of my day, and that I was going to be moving fast and so there wouldn&amp;rsquo;t be much room for participative pair programming.  Matt went off to experiment with the drie free tier and Michael joined me in the hangout.  I managed to write out a list of all the stuff that needed doing (in approximate priority and dependency order), filling Michael in to where Matt and I had got to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] add sad path for paypal&lt;/li&gt;
&lt;li&gt;[ ] sponsor via paypal&lt;/li&gt;
&lt;li&gt;[ ] have generic support for plans&lt;/li&gt;
&lt;li&gt;[ ] make Paypal work for all plans&lt;/li&gt;
&lt;li&gt;[ ] refactoring our domain model to store plan entities and represent everything properly and consistently&lt;/li&gt;
&lt;li&gt;[ ] allowing users to upgrade themselves through the WSO interface&lt;/li&gt;
&lt;li&gt;[ ] displaying all the plan options and upgrades effectively&lt;/li&gt;
&lt;li&gt;[ ] refactoring card details update to different controller&lt;/li&gt;
&lt;li&gt;[ ] move SubscriptionsController#upgrade to SubscriptionsController#update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the background I was being distracted by all the new people coming into Slack, but I managed to add a sad path for PayPal and get that PR in, but not much else.  Michael and I ended up having a detailed conversation about the relative merits of him and I pairing.  It was an opporutnity to say some things I&amp;rsquo;d been thinking recently like, how when we used to pair on the LocalSupport project a couple of years back (when I was teaching at HPU) it had been lots of fun.  More recently we seemed to be more in conflict and more irritated with each other.  It&amp;rsquo;s entirely possible that it&amp;rsquo;s me that&amp;rsquo;s changed.  I&amp;rsquo;m watching savings that could go on my children&amp;rsquo;s future University education being gradually wittled down as I try to get AgileVentures to financial stability.  I am not necessarily coming from the most relaxed place at the moment.  Unlike when we used to pair on LocalSupport and I had a stable income from HPU and the whole thing was a learning project, I really want to move fast to the point where the code in WSO is bringing home the bacon.&lt;/p&gt;

&lt;p&gt;I mean, I&amp;rsquo;m skeptical about the value of a University education for my kids (maybe I should send them to a bootcamp?), but I&amp;rsquo;ve got a lot on the line here.  It&amp;rsquo;s a strange setup in some ways with both Michael and I being volunteers.  If we were both salaried employees at a company I&amp;rsquo;d see ensuring that we were pairing with a certain frequency was critical.  We&amp;rsquo;ve had frank and open discussions before.  I have three monitors at home which means I can easily be looking at documentation while Michael drives on code, but he has a single laptop, so if I&amp;rsquo;m driving he only sees my screen, and if I flip back and forth between code and terminal and browser too fast, it can be very difficult for him to follow what I&amp;rsquo;m doing, particularly with hangout lag.  We&amp;rsquo;ve talked about Michael getting another monitor, but we are of course very resource constrained.  In a company context I&amp;rsquo;d have ordered him an additional monitor several weeks back.  I can get frustrated when Michael is driving in that he&amp;rsquo;s not using keyboard shortcuts, or not laying out his screen so that he can see tests, app code and terminal output at the same time, and I often feel like it&amp;rsquo;s a struggle to get him to change his approach.  I think we&amp;rsquo;ve both adjusted and compromised our styles over the process of working together, but my fear is that we&amp;rsquo;re not pairing as productively as we could at the moment.&lt;/p&gt;

&lt;p&gt;Also in a company of any size I&amp;rsquo;d be pushing towards heavy pair rotation so we were both learning and growing from our interaction with multiple others.  I really do believe in the benefits of pairing for spreading knowledge across a team, for providing additional perspectives, and for quickly leveling up junior developers.  That doesn&amp;rsquo;t mean that every pairing session is productive, and it doesn&amp;rsquo;t mean that every pairing match is right for the task at hand.  Michael was then very reasonably asking what I wanted him to do?  And my response was that I wasn&amp;rsquo;t asking him to do anything.  He&amp;rsquo;d already committed several weeks back to try to be more patient, and I committed yesterday to try to be less sensitive, but neither of us can magically change our personalities or situations.  I wasn&amp;rsquo;t sure if I had a coherent point, but was glad we were able to have the discussion so that I could tell Michael how I was feeling.  I said that the key thing was that I thought there would be times in the coming weeks where I didn&amp;rsquo;t have the mental space for a long debate about the relative merits of one approach over another, and where I would need to move fast and so drive in more of a solo mode.&lt;/p&gt;

&lt;p&gt;Is that me shooting myself in the foot?  Maybe the solution is an alternative like rotating more frequently, say every 10 minutes?  What I feel at the moment is that I&amp;rsquo;ve got a pretty clear idea of what needs to get done and I can do it fast, and sometimes I feel like I&amp;rsquo;m fighting to get Michael to understand my point of view, and he&amp;rsquo;s getting irritated and angry with me in the process and I end up feeling quite unpleasant and don&amp;rsquo;t look forward to our next session.  Conversely Michael was saying yesterday that I don&amp;rsquo;t give ground easily enough.  Clearly in any relationship there&amp;rsquo;s always room for both sides to make concessions.  Relationships and pair programming are all about making compromises. &lt;/p&gt;

&lt;p&gt;It feels like there are two extremes of pairing.  There&amp;rsquo;s coding with a partner where you&amp;rsquo;re totally focused on the learning, and there&amp;rsquo;s coding where you&amp;rsquo;re totally focused on making progress.  In the Premium Plus and F2F sessions I can feel like I can be totally focused on the learning and if we get some progress that&amp;rsquo;s great, but I&amp;rsquo;m totally relaxed about it.  Outside of those sessions, and at the moment, I feel like the progress on WSO has to take priority, particularly when I&amp;rsquo;m burning £1000&amp;rsquo;s a month in this undertaking.  AgileVentures started as a utopian free pairing framework, and maybe the introduction of Premium pairing is spoiling that. Or maybe we&amp;rsquo;re growing up?  Or maybe it&amp;rsquo;s just like life generally is; just messy.&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9cBaF5WWTg4"&gt;&amp;ldquo;Marting Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ky49eCl_7EA"&gt;Coordination Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VVaAeLjwPZc"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1hL-aACQquY"&gt;Sam Driving on WSO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Removing Custom Routes</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/14/removing-custom-routes/"/>
    <id>http://blog.url.com/2016/12/14/removing-custom-routes/</id>
    <published>2016-12-14T00:00:00+00:00</published>
    <updated>2016-12-20T20:58:29+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In a day with little time for coding on WebsiteOne I think I made a bit of a breakthrough in terms of removing custom routes on Rails controllers.  Time got sucked away in the usual admin, reviewing pull requests, scrums and having Michael update me on the great work he and Arreche had done getting the Yada Cucumber setup working for AsyncVoter.  Interesting discussion there about whether we should switch tech stack and, if we don&amp;rsquo;t, how we handle the rather raw test and mock architecture.  Also, should I be focusing more on infrastructure for the projects?  I&amp;rsquo;m still convinced I&amp;rsquo;ve got to prioritise getting AgileVentures into the black, and right now that means sorting out our payment frameworks.&lt;/p&gt;

&lt;p&gt;The previous day Matt and I had spiked the PayPal redirection to our site after a successful payment, and using that base I was able to fill in the rest of the cucumber steps that Michael and I had sketched out the week previously:&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Subscribe Self to Premium
  As a developer
  So that I can get recurring professsional development support and code review
  I would like to take out an AV Premium Subscription

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;Given&lt;/span&gt; the following plans exist
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;premium&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by card
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; I click &lt;span class="s"&gt;"Subscribe"&lt;/span&gt; within the card_section
    &lt;span class="nf"&gt;When&lt;/span&gt; I fill in appropriate card details for premium
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt;
    &lt;span class="nf"&gt;And&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email

  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Pay by PayPal
    &lt;span class="nf"&gt;Given&lt;/span&gt; I visit &lt;span class="s"&gt;"subscriptions/new"&lt;/span&gt;
    &lt;span class="nf"&gt;Then&lt;/span&gt; I should see a paypal form within the paypal_section
    &lt;span class="nf"&gt;When&lt;/span&gt; Paypal updates our endpoint
    &lt;span class="nf"&gt;Then&lt;/span&gt; the user should receive a &lt;span class="s"&gt;"Welcome to AgileVentures Premium"&lt;/span&gt; email
    &lt;span class="nf"&gt;And&lt;/span&gt; I should see &lt;span class="s"&gt;"Thanks, you're now an AgileVentures Premium Member!"&lt;/span&gt; in last_response
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key new elements were in the PayPal section, where I introduced a step to simulate the process initiated by PayPal after a successful payment:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^Paypal updates our endpoint$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"CONTEXT"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"wtgSziM4C5x0SI-9CmKcv2vkSeTLK5P_g6HqzC__YTYkcqziFNcB84p79Ja"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"txn_type"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"subscr_signup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"subscr_id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"I-PEG1KSWM8TBU"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"last_name"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"buyer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"residence_country"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"GB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"mc_currency"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"GBP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"item_name"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Premium"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"business"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"sam-facilitator@agileventures.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"recurring"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"payer_status"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"verified"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"payer_email"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"sam-buyer@agileventures.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"first_name"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"receiver_email"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"sam-facilitator@agileventures.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"payer_id"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"9EG5X4H5DJJW4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"reattempt"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"item_number"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"not logged in"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"subscr_date"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"10:07:19 Dec 12, 2016 PST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"charset"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"windows-1252"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"period1"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"7 D"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"mc_amount1"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"0.00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"period3"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"1 M"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"mc_amount3"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"10.00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"auth"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"A31jSI5vY44zpPcQlAUk8WdibsJJT72rGx6ptiGPil6MG30OuCoFtHJ38.CJmmBQ.NNbZg.XEaWj298bVa5FZIw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"form_charset"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;subscriptions_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above I&amp;rsquo;d copied and pasted in the set of params I&amp;rsquo;d seen from a sandbox test of PayPal when I hooked it on the debugger locally.  I couldn&amp;rsquo;t use Capybara to simulate a POST request so I used a rack test method instead.  I also deleted the old custom PayPal endpoint; the one we&amp;rsquo;d used to validate that anyone would actually sign up by PayPal.  This custom endpoint had confused us when refactoring the Premium Rails controller, so it was good to see the back of it.  Our routes for subscriptions went from this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/paypal'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#paypal'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/upgrade'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#upgrade'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:put&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:subscriptions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="s1"&gt;'/subscriptions/upgrade'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'subscriptions#upgrade'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:via&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:put&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:subscriptions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The response from PayPal, simulated by &lt;code&gt;post subscriptions_path, body&lt;/code&gt;, was now going to hit the &lt;code&gt;create&lt;/code&gt; route generated by the &lt;code&gt;resources :subscriptions&lt;/code&gt; command.  The key thing here is trying to have the app be RESTful; to try and coordinate everything in terms of the basic CRUD actions on a &amp;ldquo;resource&amp;rdquo;.  Custom endpoints like the &lt;code&gt;paypal&lt;/code&gt; one I just removed and the &lt;code&gt;upgrade&lt;/code&gt; one that I want to remove next are all well and good for a quick fix, but they are technical debt, as was made clear recently.  It might seem more complicated in this case to have both Stripe and PayPal work through a single &lt;code&gt;subscription#create&lt;/code&gt; method, but it helps get our business entities in our domain model clear.  What&amp;rsquo;s happening here, independently of the financial mechanism that our members contribute through, is that our users are setting up a Subscription.  There are a set of common things we want to happen when a member starts a Subscription, so it makes sense for it to be done in a coherent way through the CRUD C (&amp;lsquo;Create&amp;rsquo;) on the SubscriptionsController.  The consistency of this is important for navigation of the codebase by future coders, including ourselves.&lt;/p&gt;

&lt;p&gt;Not that there wasn&amp;rsquo;t some short term pain to be had here in the form of taking the existing Stripe specific controller method and having it support both PayPal and Stripe.  To start with it looked like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_slug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:plan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@sponsored_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsored_user?&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;StripeError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_subscription_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I poked through it with the debugger, driving from the new cucumber step that simulated the completed PayPal payment.  It required quite a few changes, but eventually I got to:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detect_user&lt;/span&gt;
    &lt;span class="vi"&gt;@plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detect_plan&lt;/span&gt;
    &lt;span class="vi"&gt;@sponsored_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsored_user?&lt;/span&gt;

    &lt;span class="n"&gt;create_stripe_customer&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;paypal?&lt;/span&gt;

    &lt;span class="n"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_acknowledgement_email&lt;/span&gt;

  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;StripeError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_subscription_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was not ideal and ripe for extraction into a service object that could be tested separately.  However it was working despite the distractions of having to do a PostgreSQL db upgrade, and set up a custom mechanism for checking the contents of the page after the PayPal rack test post since Capybara could no longer see the output.  The method above didn&amp;rsquo;t look too bad, but I was now left with messy &lt;code&gt;if/else&lt;/code&gt; statements in private methods throughout the controller, e.g. &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;paypal?&lt;/span&gt;
      &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'payer_id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PayPal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plan_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plan_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could see a pattern here.  I could avoid all these checks for PayPal, with an adaptor or facade that wrapped the params something like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThirdPartyPaymentCompletionResults&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;paypal?&lt;/span&gt;
    &lt;span class="vi"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'item_number'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StripePaymentCompletionResults&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ThirdPartyPaymentCompletionResults&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaypalPaymentCompletionResults&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ThirdPartyPaymentCompletionResults&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'payer_id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although looking at the above sketch I can see that I want to put this in a module and maybe use a factory method to have an entity of the correct type created, e.g. &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ThirdPartyPayment&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;process_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;PayPal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;paypal?&lt;/span&gt;
      &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;paypal?&lt;/span&gt;
      &lt;span class="vi"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'item_number'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stripe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Result&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;intialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
      &lt;span class="vi"&gt;@stripe_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_stripe_customer&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="vi"&gt;@stripe_customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;payment_source&lt;/span&gt;
      &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Stripe&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Paypal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Result&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;intialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="vi"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'payer_id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;payment_source&lt;/span&gt;
      &lt;span class="no"&gt;PaymentSource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PayPal&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then the &lt;code&gt;update_user_to_premium&lt;/code&gt; method and others could collapse back to something like:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_to_premium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="no"&gt;UpgradeUserToPremium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payment_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plan_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that was a rough code sketch above - I&amp;rsquo;ll have to work out the kinks, but I can see how it might clean up the controller.  There are other domain entities in play here such as the set of PaymentSources that we already created and the UpgradeUserToPremium service.  It&amp;rsquo;s tempting to jump in and start refactoring away, but I heed Sandi Metz&amp;rsquo;s advice about looking ahead to what other refactorings are coming.  I plan to immediately follow this work with a series of tests to check that all the sad paths work, that we can have PayPal supported sponsorships, and support generic types of plans.  All these are going to put pressure on the controller and the domain model that I don&amp;rsquo;t necessarily understand as well as I like.  I don&amp;rsquo;t want to be caught burning a lot of time prematurely refactoring in one way only to discover that I need to fall back.&lt;/p&gt;

&lt;p&gt;This is a point of agony where I&amp;rsquo;m embarressed by the &lt;code&gt;if/else&lt;/code&gt; statements and I want to clean them up as quickly as possible, but I also want to deliver all the payment features as quickly as possible.  I&amp;rsquo;m carefully watching the level of technical debt &amp;hellip;  At least the routes got a little cleaner with these changes.  My belief in the the RESTful CRUD manipulation of resources has re-doubled and I&amp;rsquo;m looking to a future vista where we have a robust domain model with entities like Subscriptions and Plans and PaymentSource matches the needs of our charity enterprise, and our technology is in the service of our process rather than the other way round :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t1A_hI7-X0c"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W3_ISEYsTUA"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ky49eCl_7EA"&gt;Solo on WebSiteOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Cross-Pairing</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/13/cross-pairing/"/>
    <id>http://blog.url.com/2016/12/13/cross-pairing/</id>
    <published>2016-12-13T00:00:00+00:00</published>
    <updated>2016-12-19T21:42:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Over the weekend, in conflict with my general rule about working on Saturdays and Sundays, I lead a couple of &amp;ldquo;Bob Martin&amp;rdquo; scrums.  My standards about not working at the weekend for health and sanity have been chipped away at by me leading a Mentive class on Saturday evenings and doing Premium Plus pairing sessions on Sundays.  A few AsyncVoter folks have availability at the weekend but had been having trouble coordinating.  We moved the weekend scrums from 10am to 2pm but it still wasn&amp;rsquo;t quite clicking.  2pm on Saturday and Sunday is when I&amp;rsquo;d usually nap to allow me to recover from the rigors of the week.  And the rigors of the weekend!  As soccer coach for Harrow St. Marys under-eights I run a training session every Saturday morning from 10:30am to noon.  I need to get to the local park at 9:45am to get everything set up.  No drinking or late Friday nights - you really don&amp;rsquo;t want to be coaching twenty kids with a hangover, or even on a slight sleep deficit.  Post lunch I need to do team selection for the Sunday morning league game, and then get my eldest son to guitar practise before a run to the supermarket and making supper.  &lt;/p&gt;

&lt;p&gt;Pushing myself to run weekend scrums is not without a cost, but I really want AgileVentures to survive and to thrive.  In some ways starting a weekend scrum is a stop gap for interface, training and documentation deficiencies on the part of the AgileVentures community and software.  Having run countless online scrums with hangouts I can pretty much ensure that the scrum starts on time, that the appropriate channels are pinged etc.  For other developers focusing on getting their bit of code done this can sometimes not happen, e.g. the scrum doesn&amp;rsquo;t start, or there&amp;rsquo;s a technical problem or what have you.  Despite enthusiasm during the week for my running of the weekend scrums, no one from the AsyncVoter project showed up.  Life happens, there are things to do, but it will probably take a few weekends of me regularly running the scrums before people &amp;ldquo;trust&amp;rdquo; that I&amp;rsquo;ll be there.  I&amp;rsquo;m a strong believer in doing things repeatedly at the same time to get people into the habit :-)&lt;/p&gt;

&lt;p&gt;Still Michael was there, and on Saturday we had Arbaz from Pakistan who admitted to being very nervous about joining a scrum for his MOOC assignment, but said it was awesome when we voted together on a LocalSupport story, and he submitted several pull requests over the weekend.  On Sunday it was just Michael and myself, but it gave me the opportunity to suggest to Michael that we do some &amp;ldquo;cross-pairing&amp;rdquo; on Monday.  I&amp;rsquo;d been concerned on Thursday and Friday that we&amp;rsquo;d ended up in triples with Michael and I stepping on each others toes trying to help people.  We wanted to make progress on both AsyncVoter and WebSiteOne fronts and I felt like we might move faster if we split our forces and created separate hangouts, pairing with others where possible.  Michael said this might work with sufficient support and organisation.&lt;/p&gt;

&lt;p&gt;We tried this out Monday and I think it went quite well.  I ended up pairing with Matt on the PayPal integration, and Michael paired with Arreche on the AsyncVoter slack bot testing framework.   Matt was largely watching me work on PayPal as it was all related to the AgileVentures paypal account which only I had access to.  Although we created a PayPal sandbox account which in principle I could give other team-members access to.  It took a couple of solid hours either side of lunch to get a custom PayPal form (we had to drop the hosted button) to get a variable passed back at the end of the transaction that would allow us to know which user had signed up to Premium using PayPal.  However the return to the AgileVentures site at the end of the PayPal transaction was not automatic.  The user had to press a rather in-obtrusive button and that seemed unreliable to me.&lt;/p&gt;

&lt;p&gt;Michael broke from pairing with Arreche and dropped in to our sessions to hear the issue and came up with a StackOverflow hit about a setting for PayPal that would make the redirection automatic.  I&amp;rsquo;d ended up napping after lunch (witness lack of naps on the weekend) so our hangout was broken over the &amp;ldquo;Kent Beck&amp;rdquo; scrum, although I ran it in a different browser to keep both going.  Then a sponsor meeting cropped up, we (me and the sponsor) had confused the times, so we had to break anyway.  Michael went back to pairing with Arreche.  I finished up the PayPal round trip, getting the automatic return set up (not without drowning in the PayPal interfaces), and helping Matt debug issues with starting hangouts and slack pinging.  He needed to enable Hangouts at http://youtube.com/my&lt;em&gt;live&lt;/em&gt;events and I had either broken the Slack pings when I disabled hubot (or our Slack token had expired).  Michael called me into his hangout with Arreche to help them on a block with using the Cucumber Yada JS framework with BotMock.  I noticed they were pairing in the broadcast finished WebSiteOne hangout.  I tried to encourage Michael to start a new AsyncVoter hangout and take it live, but he said he was focusing on this problem.  I thought that was ironic because I&amp;rsquo;d just interrupted my work on the PayPal problem to come over and help him.&lt;/p&gt;

&lt;p&gt;I talked through some of the related issues I&amp;rsquo;d encountered using BotMock in the integration tests which may or may not have helped, but it seemed to give them a lead.  I totally understand about wanting to be task focused.  I notice that a significant number of folks don&amp;rsquo;t start the broadcasts in their AV hangouts.  I guess I&amp;rsquo;ve always got part of my mind on the bigger picture that I want the AgileVentures video library to be increasing, that we&amp;rsquo;re always providing raw material for others to watch and review and potentially learn.  I also want pairing sessions to be announced in the relevant channels so that folks can see the activity and potentially join so we can build.  I don&amp;rsquo;t expect everyone else to understand or believe in those higher goals.  However when you are using the free aspects of a system it&amp;rsquo;s nice to consider how others benefit.  It&amp;rsquo;s the same mentality as open source.  Others have made something available for you to freely use, so it&amp;rsquo;s good to think about contributing your improvements or insights back to the community.&lt;/p&gt;

&lt;p&gt;I started back to my PayPal work and told Michael that I&amp;rsquo;d be happy to interrupt it and drop back in again if he started a fresh AsyncVoter hangout.  At the end of the day Michael and Arreche had gotten something working and I had the PayPal round trip validated and pushed into GitHub.  Michael was saying how their solution was kind of hard coded and my PayPal spike would need testing and refactoring.  Overnight though it seems that Arreche made more progress, and I&amp;rsquo;m looking forward to more days of cross-pairing and making progress on multiple fronts at the same time :-)&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/HvjP8OnJelg"&gt;&amp;ldquo;Bob Martin&amp;rdquo; Saturday Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NSZ0my-DWmQ"&gt;&amp;ldquo;Bob Martin&amp;rdquo; Sunday Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/44lvtYeIPDU"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gCAzF2s2uYs"&gt;Pairing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GK0qPZnYi84"&gt;&amp;ldquo;Kent Beck&amp;rdquo; Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VunzjidNLrk"&gt;Pairing on WSO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Semi-Automated Bots, or Augmented Humans?</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/12/semi-automated-bots/"/>
    <id>http://blog.url.com/2016/12/12/semi-automated-bots/</id>
    <published>2016-12-12T00:00:00+00:00</published>
    <updated>2016-12-19T21:34:05+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Friday included a lot of meetings, pull request review, and bug fixing.  I didn&amp;rsquo;t get much fresh coding down, which was somewhat frustrating, but I did have a bit of a breakthrough on the greeter bot side, with this code:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Botkit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'botkit'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Botkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slackbot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ASYNC_VOTER_SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;startRTM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Welcome and great to have you with us! Please do introduce yourself in #new_members (if you haven't already), and if you have any general technical thoughts/issues/questions please ask in #techtalk - #random is for everything else :slightly_smiling_face:"&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"\n\n\nsee https://github.com/AgileVentures/AgileVentures/blob/master/JOINING_A_PROJECT.md for more on joining a project"&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'team_join'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple script using botkit to detect anyone joining a Slack instance.  I had been burning time, and falling behind on, greeting people individually as they joined the AgileVentures Slack instance.  I think people really appreciate individual greetings when they join a community, and it&amp;rsquo;s really helpful to point them to some documentation etc.  It can be a bit impersonal coming from a bot.  I&amp;rsquo;ve joined some other Slack communities where a bot greets me and immediately apologises about being a bot. &lt;/p&gt;

&lt;p&gt;The interesting thing we&amp;rsquo;ve found is that if you set the BOT_TOKEN to be the Slack general API token (rather than a custom bot token), then it appears to interact as the admin of the Slack instance.  At least that&amp;rsquo;s my working hypothesis.  Now you could say I&amp;rsquo;m being a bit dishonest with people having a bot doing the greeting, but the message looks like it is directly from me.  However the beauty of the above script is that it opens a dialogue in a DM between myself and the new member on Slack.  So when the new member responds to me, thanking me for the introduction, I get the message and can respond in the DM to have a conversation.   I call this a semi-automated bot.  A bot is doing part of the work, but then I am assisting with the really hard AI-complete aspects.  I do the same with emails to the community, automating part of the work of assembling an email template in Thunderbird, but then visually reviewing the email before it goes out, adjusting it to use the correct first name or abbreviation, and add elements to the template that are specific to my interaction with that AgileVentures member.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hoping that people will ultimately see this as ingenious rather than deceptive.   I want to augment myself so that I can maintain conversations with as many people as possible, not so that we can make a profit for some group of shareholders, but so that we can help more people with their professional development and more deserving causes around the world with their IT and non-profit process challenges.  Over the weekend the bot greeted three new folks while I was spending time with my family and I got the new members&amp;rsquo; follow up DMs on my phone and was able to respond to their questions about AgileVentures individually.  It feels like a good development.  The next thing will be to host this bot on an Amazon instance so it can be always up, and perhaps have it monitor for channel join events as well, so it (or rather I) can greet people coming into project channels with a welcome and a pointer to documentation for getting set up with the project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be tempted to see if I can gradually add more augmentation to myself on Slack so that that bot can start taking over parts of my conversation, but I&amp;rsquo;ll do that very slowly and steadily.  In the first instance it seems to me that the bot is much, much better than me at detecting Slack events, and so that&amp;rsquo;s where I should focus to begin with.  Particularly because Slack doesn&amp;rsquo;t alert me to channel and team join events and I tend only to notice the little italics telling me about a change some time after it actually happened.&lt;/p&gt;

&lt;p&gt;In summary I think this approach where I adjust the behaviour of my own Slack instance is different from the semi-automated approach I&amp;rsquo;ve espoused in the past.  Semi-automation is a better term for when something that is clearly a bot, is prompted to act by a human, such as we have for starting and finishing votes in the AsyncVoter bot.  There&amp;rsquo;s nothing new under the sun, and I&amp;rsquo;m sure I&amp;rsquo;ll find others who&amp;rsquo;ve done this bot augmentation before, but I start to see what I&amp;rsquo;ve got here in the greeter-bot as a form of conversation augmentation.  I&amp;rsquo;m pretty excited about augmenting myself further :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making Progress (for the Greater Good)</title>
    <link rel="alternate" href="http://blog.url.com/2016/12/09/making-progress/"/>
    <id>http://blog.url.com/2016/12/09/making-progress/</id>
    <published>2016-12-09T00:00:00+00:00</published>
    <updated>2016-12-13T21:47:34+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So I went over time for yesterday&amp;rsquo;s blogging.  I&amp;rsquo;d tried to cap it at 20 minutes, but I got into a fair bit of detail about the options for testing/mocking the Twitter API before getting on to the meat of the matter I was trying to focus on; Agile DevOps.  I guess there are two kinds of blogs, those with a succinct focus on a particular topic and those that are a mixed bag.  The process of profiling my days in blogs recently have probably tipped me more towards the latter, with the blog being a reflection of all the things I did on the previous day.  I&amp;rsquo;m acutely aware that the length, lack of focus, lack of images and high code content probably make my blogs less readable for many.  I am writing these things partly for others to read, but also partly just to get my thoughts straight, and stop them from being lost in an ever dissappearing slack history.&lt;/p&gt;

&lt;p&gt;Maybe writing one really focused blog a week would have more impact in terms of creating content that drew people into AgileVentures, that got across key concepts about Agile Development and Software Engineering.  However I&amp;rsquo;m also testing myself.  Can I document my process every day for a year?  Are people&amp;rsquo;s diaries not meant for publication?  I committed to doing a year of this and I like to keep my commitments.  Maybe after that year I&amp;rsquo;ll switch to doing one blog a week, still writing every morning and revising the following day, but doing at least five revisions where I delete stuff and increase focus. Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;Despite running over on the previous day&amp;rsquo;s blog, I got a fair bit of admin work done, although it was clear that the Zapier automation wasn&amp;rsquo;t working as expected.  The attempt to get it to post as non-bot had failed, so I&amp;rsquo;ve set it up for a simpler bot post today, although it&amp;rsquo;s clear that it can&amp;rsquo;t easily post the link to the precise blog file - the closest it can get to that is the pull request URL.  I&amp;rsquo;m also not sure how much I&amp;rsquo;ll get charged &amp;hellip; It&amp;rsquo;s just one thing in my list of &amp;ldquo;automate to create time&amp;rdquo; that I generated from profiling my days a week or so back:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Automation

&lt;ul&gt;
&lt;li&gt;[ ] try to fix up lower 3rd thing &amp;ndash;&amp;gt; no response from github repo post &amp;hellip;&lt;/li&gt;
&lt;li&gt;[ ] automate more of blogging TRYing Zapier&lt;/li&gt;
&lt;li&gt;[ ] automate greeters&lt;/li&gt;
&lt;li&gt;[ ] automate project management (slackbot)&lt;/li&gt;
&lt;li&gt;[ ] automate twitter connections&lt;/li&gt;
&lt;li&gt;[x] automatically resize blog images for fixed width&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s a lot outstanding.  At least the css image settings in the blog meant I wasn&amp;rsquo;t having to resize images I put in the blog.  Getting my hangout lower third banner fixed seems like we&amp;rsquo;d have to create our own hangout tool box and release it as a hangout plugin, assuming we can even get some working source code.  That doesn&amp;rsquo;t seems appealing since we&amp;rsquo;re unclear about the future of Google&amp;rsquo;s support for hangout plugins.   That said, sponsors keep commenting positively on my lower third banner when I have it on the hangouts, and I kind of feel naked without it :-)&lt;/p&gt;

&lt;p&gt;The Slack is hotting up and there are lots of people to greet, so need to automate that.  At the moment I&amp;rsquo;m just doing in snatches of time between other things. Most of the day was taken up with pull request reviews and our third premium mob programming session.  We&amp;rsquo;re getting deeper into Avdi Grimm&amp;rsquo;s Confident Ruby and the Premium Mob members are starting to get more confident about typing out code in the shared C9 space, although it&amp;rsquo;s still early days.  I&amp;rsquo;ve assigned &amp;ldquo;homeworks&amp;rdquo; for each member to develop their own domain models that use techniques from the sessions.&lt;/p&gt;

&lt;p&gt;We had pull requests from several premium members on LocalSupport and WebSiteOne, as well as from some MOOC students.  Off the back of the &amp;ldquo;Martin Fowler&amp;rdquo; scrum we reviewed a pull request relating to search engine optimization (SEO).  It seemed a little convoluted and we fixed it up with the Rails &lt;code&gt;prepend_before_action&lt;/code&gt; method, and then the PR author jumped in to a later LocalSupport session that Michael and I ran to review the other PRs.  That was a great example of AgileVentures working as I imagined.  The MOOC student hadn&amp;rsquo;t been in the original scrum, but had seen our comments on the PR and I&amp;rsquo;d posted a link to the video of the scrum.  I don&amp;rsquo;t know if they had watched it, but they saw the LocalSupport pairing session link ping into the #localsupport channel when I started that, and we were able to have a nice connect up and resolve some other outstanding issues on the pull request.  If I&amp;rsquo;d just started a private session with Michael, or if our AgileBot hadn&amp;rsquo;t worked the student would not have so easily been able to drop in to chat.&lt;/p&gt;

&lt;p&gt;This makes me think we really want to get the slack channel settings on the AgileBot sorted so that every project channel gets notifications of appropriate pairing sessions.  Michael and I discussed that in an overview session on WebSiteOne, and we could automate most of the thing with calls to the slack API to get project managers to select their project channel from a dropdown when setting up a project, or just ensure that the project slugs on WSO exactly matched the channel names on Slack.  That&amp;rsquo;d be another epic and I deemed further PayPal integration to be the thing we should focus on first.  All the project support goes into the free tier, and while we want project managers and teams to have the best support possible, I&amp;rsquo;m going to be no use to them next year if I can&amp;rsquo;t get us on a stable financial footing.&lt;/p&gt;

&lt;p&gt;Before we&amp;rsquo;d got on to WSO, Michael and I had spent some time bashing out a refactoring of another PR that was addressing complexity issues flagged by Code Climate on LocalSupport.  We maybe spent too much time wrestling out the code together, but I was pretty pleased with the solution we came up with.  We worked out that the complexity was due to a combination of nested and non-nested routes in the Volunteer Opportunities controller:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:volunteer_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;on: :collection&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:organisations&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:volunteer_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This had lead to code like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_owner?&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;current_user_has_organisation?&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;friendly_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;current_user_has_organisation?&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;VolunteerOp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I know that maybe we should be using the pundit or cancan gems to manage roles and persmissions, but we staying focused on the refactoring. The proposed alternate had ended up creating overlap between two &lt;code&gt;before_action&lt;/code&gt;s, which we unravelled with a set of method names that tried to connect up with the reasons for the split:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_owner?&lt;/span&gt;
  &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;can_edit?&lt;/span&gt; &lt;span class="n"&gt;org_independent_of_route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_independent_of_route&lt;/span&gt;
  &lt;span class="n"&gt;organisation_set_for_nested_route?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;organisation_for_simple_route&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_set_for_nested_route?&lt;/span&gt;
  &lt;span class="vi"&gt;@organisation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_for_simple_route&lt;/span&gt;
  &lt;span class="no"&gt;VolunteerOp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;organisation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;organisation_for_nested_route&lt;/span&gt;
  &lt;span class="no"&gt;Organisation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;friendly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:organisation_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_organisation&lt;/span&gt;
  &lt;span class="vi"&gt;@organisation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_organisation_for_nested_route&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least the next folks in might have a fighting chance of seeing the relation to the routes up front.  Although maybe they&amp;rsquo;ll tear their hair out in the multiple steps of redirection in the code.  Probably the better thing in the long term will be to unwind the routes.  We could remove the nesting if we insisted that all the other controller methods moved into the nesting (i.e. :edit, :show, :update, :destroy), but that would be a bigger refactoring for another time.&lt;/p&gt;

&lt;p&gt;Anar who&amp;rsquo;d been working on this PR dropped in to our planning session and was able to participate in a manual vote on the further paypal integration, and in the background I used the Async slack bot to run three other votes in sequence in LocalSupport, WebsiteOne and AsyncVoter itself.  Gotta get multi-channel parallel voting enabled!  But again that&amp;rsquo;s free tier &amp;hellip; hmm although maybe we should be offering extras like that as part of premium project support plans?&lt;/p&gt;

&lt;p&gt;In summary&amp;ndash;if there can be a summary for a mixed bag blog like this&amp;ndash;it feels like there&amp;rsquo;s progress. The whole concept of Premium members paying for priority code reviews on pull requests is that there&amp;rsquo;s huge learning value from that process, and the quicker you get the PR review the more valuable it potentially is.  Also, our mentors&amp;rsquo; time is a limited resource.  Probably the individual features and bug-fixes could be delivered faster if our most experienced mentors just worked on the code themselves rather than reviewing submissions from less experienced developers.  However the hope, or the gamble, is that the slow-down on delivery can be compensated for by the Premium payments that allow the whole enterprise to sustain itself, and that the projects move forward and deliver value through the process.  Also that once people are paying/sponsoring/donating to something, that they become more invested in it, and we can ride the win-win cyle up to a scale where more and more people are compensated for their time, and they are all working on worthwhile projects for the greater good!&lt;/p&gt;

&lt;h3&gt;Related Videos:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PjpUk3fBBDs"&gt;&amp;ldquo;Martin Fowler&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-PeG-5Egd2E"&gt;Pull Request Reviews on LocalSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=m4uOCp6ZfyE"&gt;&amp;ldquo;Kent Beck&amp;rdquo; scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kpk5yNiQox8"&gt;WebsiteOne project planning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
