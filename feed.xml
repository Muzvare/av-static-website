<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-12T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>People Are Strange, I Mean Me</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/12/people-are-strange-i-mean-me/"/>
    <id>http://blog.url.com/2016/09/12/people-are-strange-i-mean-me/</id>
    <published>2016-09-12T01:00:00+01:00</published>
    <updated>2016-09-12T21:35:30+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Okay, so I feel like a bit of a social klutz.  Often there are ideas that seem really important and well-formed in my head, and then I say them and it comes out as a mess.  Also, I think I&amp;rsquo;m not so good about reading the mood-music of the social group around me.  I mean, I get by &amp;hellip;  One to one conversations I think I don&amp;rsquo;t do too badly at.  Case in point regarding bigger groups, this Sunday I was at a football match for my 11 year old.  I know the coach and assistant coach well, and before I started coaching the team for the seven year olds (which my younger twins are in), I was sort of an assistant-assistant coach.  I would referee the matches, help out.  I&amp;rsquo;ve been quite involved.  The coach asked me to video the match on the Sunday, which I did.  So there was the half time team talk and the post-match team talk.  At the end of the half-time team talk I asked to add something about strategy.  What was so clear in my head didn&amp;rsquo;t come out so clearly.  No big deal, but then in the final team talk after the coach had finished reviewing the match with the boys, he asked if the assistant coach or I had anything to say.  The assistant coach made a few points, and I was preparing a simple point in my mind, however when the assistant coach finished the coach said something to the effect of &amp;ldquo;Right, great work everyone, round of applause for the boys&amp;rdquo;, basically a finish up thing.&lt;/p&gt;

&lt;p&gt;What I should have done looking back at it was think like &amp;ldquo;it&amp;rsquo;s hot, people want to get on, the coach is wrapping up and my point&amp;rsquo;s not that important, and just left it&amp;rdquo;, but like so often I don&amp;rsquo;t seem to be able to let these things go.  So I kind of talked over the end of the applause to make a point about communication amongst the team; which is of course doubly ironic, because while I was making the point about the need for effective communication amongst the team players, I was failing to read the communicative situation I was in, where I think it would be much better to have gone with the flow, i.e. to just say nothing.  I felt stupid after, but of course that&amp;rsquo;s no big deal.  I&amp;rsquo;m probably the only one who will remember, and the worst that will be is that a few parents/coaches/players might be affected subtly in a negative direction towards me, although I think I&amp;rsquo;ve been making these communication mistakes all my life, so it&amp;rsquo;s probably more a case of &amp;ldquo;That&amp;rsquo;s just Sam&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;rsquo;m being too hard on myself, but I do feel a big turnaround in my thoughts recently.  I always thought it was of paramount importance to speak the truth and communicate your thoughts, and that was what made me a good communicator.  What I&amp;rsquo;ve realised recently is that often what we think is the &amp;ldquo;truth&amp;rdquo; at one moment is really just a &amp;ldquo;perspective&amp;rdquo; and quite often the value gained from communicating it can be undone by a poor choice of timing.  I&amp;rsquo;m starting to see how important it is to be reading the mood of the others and adjusting one&amp;rsquo;s verbal output as a function of that.  I&amp;rsquo;ve blogged before about the concepts of &amp;ldquo;overloading&amp;rdquo; and &amp;ldquo;blocking&amp;rdquo;.  Overloading is what I commonly do when I give people too much information and under-estimate their level of discomfort.  Blocking is something else that I can easily slip into when someone says something that doesn&amp;rsquo;t match my mental model of reality.  Rather than focusing on connecting with what the other person is feeling, or what they are trying to communicate, I go into academic debate mode trying to compare their statements logically with my model of reality.&lt;/p&gt;

&lt;p&gt;Of course, it all depends.  I guess I need to add &amp;ldquo;timing&amp;rdquo; to the list of &amp;ldquo;blocking&amp;rdquo; and &amp;ldquo;overloading&amp;rdquo;.  Sometimes a block might be appropriate - it&amp;rsquo;s all about relative costs, and how certain you feel about things at the time; but to summarise, I think I tend to block people at the wrong times, I tend to overload them at the wrong times, and hey, I&amp;rsquo;m working on it. :-) This being human thing didn&amp;rsquo;t come with a manual.  I was mercilessly bullied in school and cocooned myself in television programs and computer games from age 13 to 17.  I&amp;rsquo;m still working through that.  It&amp;rsquo;s no excuse for being a irritating person, but I&amp;rsquo;m working on trying to make myself a more pleasant person to interact with. &lt;/p&gt;

&lt;p&gt;The funny thing is that I then also baulk at saying some things that I think are really important because I&amp;rsquo;m worried about upsetting someone, or that they&amp;rsquo;ll respond angrily.   The ironic thing is that I think I often upset people saying things that I hadn&amp;rsquo;t particularly thought through, or that it just hadn&amp;rsquo;t occurred to me would be controversial.  Conversely, when I think something might be inflammatory I beat around the bush, have trouble getting to it, and go into waffle mode.  That&amp;rsquo;s something else I&amp;rsquo;m working on.  I am finding the Non-Violent Communication (NVC) model quite helpful in that regard, which goes something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell the person an observation e.g. &amp;ldquo;I notice you seem to be raising your voice&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tell the person your feeling e.g. &amp;ldquo;That makes me feel scared&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tell them your need e.g. &amp;ldquo;I need to feel safe in my work environment&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Make a request e.g. &amp;ldquo;I was hoping the you might be able to talk to me a little more quietly&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Continue the conversation from there, perhaps coming to a compromise, and listening out for needs and feelings that the other person is expressing, reflecting that back to them where appropriate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whether it&amp;rsquo;s genetic or the way I grew up, but it seems I&amp;rsquo;m not sensitive enough to social cues from others, and too sensitive to internal fears, maybe?  It&amp;rsquo;s a complicated tuning process.  If I do actually manage to turn up my social sensitivity too much I would probably revert to the state of my 16 year old self, where I was a total wall-flower and would never speak in front of a group.  Famously, the prize winning physicist Richard Feynman published a book called &amp;ldquo;What Do You Care What Other People Think?&amp;rdquo;, which I read when I was 17.  At 17 I seemed to lose all inhibitions and became somewhat of an exhibitionist, being totally happy to speak in front of groups, the bigger the better.  I got involved in amateur dramatics and was happily oblivious to the many people who probably thought I was a total idiot.  What do I care what other people think?  Well ultimately I don&amp;rsquo;t, really, but I don&amp;rsquo;t want to irritate them unnecessarily.  I&amp;rsquo;d also like to collaborate with them on cool projects, and I&amp;rsquo;d really prefer not to upset them.&lt;/p&gt;

&lt;p&gt;While there&amp;rsquo;s plenty for me to improve, I don&amp;rsquo;t think it&amp;rsquo;s entirely about me.  The other thing I notice is that most people seem pretty reluctant to share how they feel.  Maybe perfectly sensibly people will not say &amp;ldquo;you&amp;rsquo;re irritating me&amp;rdquo; or &amp;ldquo;stop that&amp;rdquo;.  They&amp;rsquo;ll just let you carry on and then avoid you in the future.  This is not to criticise others, per se.  I mean it&amp;rsquo;s not that everyone has a responsibility to be able to pinpoint why they are irritated with something you&amp;rsquo;ve done and provide feedback in a format you can digest; particularly if you&amp;rsquo;re someone who will react by contesting their point.  People are trying to live their lives, fight their own battles, improve themselves.  Everyone&amp;rsquo;s on their own journey, and while we always have great insight into our own pain and struggle, we really don&amp;rsquo;t know what it&amp;rsquo;s like for others.  Why should they make any exceptions for our poor behaviour?&lt;/p&gt;

&lt;p&gt;Anyhow, I can&amp;rsquo;t control other people&amp;rsquo;s reactions to me.  I have trouble enough controlling my own behaviour, or at least trouble breaking the habits of a lifetime.  So the real responsibility has to lie with me to get my sensitivity to social cues set correctly.  Of course the other problem I have is with putting too much pressure on myself to get things right.  Trying too hard to adjust myself may well be counter-productive. :-) Anyway, let&amp;rsquo;s wrap this self-diagnosis up with a little more on what I was planning to write about, which is the strangeness of people.  I think it&amp;rsquo;s this thing where people tend to not say what they are thinking and just not show up. I can illustrate with a story from when I was 13 and had just started high school.  I and some others were learning the trumpet.  The vivacious music teacher was very keen for us to be in the school orchestra.  &lt;/p&gt;

&lt;p&gt;I think that we had no interest in being in the school orchestra.  It meant additional practise and playing in a big group. That wasn&amp;rsquo;t our idea of fun.  I remember getting grief from the music teacher because I told her straight that I didn&amp;rsquo;t want to be in the orchestra.  My &amp;ldquo;friends&amp;rdquo; at the time didn&amp;rsquo;t confront the music teacher. They just didn&amp;rsquo;t show up for orchestra practise.  I always remember that I thought that was back to front.  I was being honest and straightforward, while others were just ducking out and got a much easier ride as a result. However maybe they were smarter than me; sensibly avoiding confrontation.  I see this all over the place; people preferring to just not show up, or not do, with no explanation, rather than providing an honest assertion that they don&amp;rsquo;t want to do something, or that they can&amp;rsquo;t make it.  Maybe this is just some part of the missing &amp;ldquo;how to be human manual&amp;rdquo; that my peers were discovering by interacting with each other between the ages of 13 and 17 when I was wrapped up in 8 bit computer games, game shows, sitcoms and TV dramas.  Who knows? :-) It&amp;rsquo;s complicated, this life stuff.  I do like the NVC framework though - I really think that has helped me address some tough issues when I&amp;rsquo;ve realised that something is highly contentious; or at least I&amp;rsquo;m nervous about saying it.  I&amp;rsquo;ll just keep working on my framework for being an effective social human being.  Three things in the list now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Blocking&lt;/li&gt;
&lt;li&gt;Overloading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll keep tinkering with it till I get something that works. :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Patience</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/09/patience/"/>
    <id>http://blog.url.com/2016/09/09/patience/</id>
    <published>2016-09-09T01:00:00+01:00</published>
    <updated>2016-09-09T21:52:34+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Following on from yesterday&amp;rsquo;s &lt;a href="http://nonprofits.agileventures.org/2016/09/08/where-to-change/"&gt;post&lt;/a&gt; on working with the node stack in AgileBot, Michael had overnight addressed two of my concerns.  He&amp;rsquo;d upgraded from jasmine-node to jasmine-npm, which was allowing our tests to fail in the correct way, i.e. not with catastrophic failures involving no output whatsoever; and he&amp;rsquo;d got the source maps working so that the stack traces were giving us the correct line numbers in the CoffeeScript source files, which involved creating the following line in spec/helpers/helper.js:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coffee-script/register'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also required adding this jasmine.json file in spec/support:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"spec_dir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"spec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"spec_files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"**/*[sS]pec.coffee"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"helpers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"helpers/**/*.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"stopSpecOnExpectationFailure"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So two of my four concerns from the &lt;a href="http://nonprofits.agileventures.org/2016/09/08/where-to-change/"&gt;previous blog post&lt;/a&gt; were addressed.  Great work Michael!  After Michael took me through all the changes, we could have easily dived into further refactoring, but I tried to step back and take some notes on our options.  Here&amp;rsquo;s what I wrote down at the time:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* refactoring the test harness
  - split into separate files
  - pull output logic from mock into test to hard code ??
  - could look at test coverage to discover untested paths OR work them out
  - sepia for recording and playback

VCR --&amp;gt; Sepia --&amp;gt; Yakbak https://github.com/flickr/yakbak
Web mock --&amp;gt; Nock

Sinon vs TestDouble
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A little googling showed there was a more recent (than Sepia) node VCR-like node module called yakbak, but since we had nock working I said let&amp;rsquo;s leave that.  Michael also mentioned harmonising the production and staging environments, since at the moment the staging server was hacked to post Slack alerts to a different channel, in order to run manual end-to-end without spamming the community. So simply merging the work we were doing would break the production instance.  All this work on creating a testing harness had been motivated by our desire to push the hard coded channel mappings into some sort of config package, i.e. to be able to do that refactoring in safety.  So in a fit of &amp;ldquo;what is this all for&amp;rdquo; I just started googling different node config approaches (after noting that process.env.NODE&lt;em&gt;ENV allowed us to get something similar to RACK&lt;/em&gt;ENV in terms of specifying &amp;lsquo;prodcution&amp;rsquo;, &amp;#39;development&amp;rsquo; or &amp;#39;test&amp;rsquo;).  I found a few config options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dotenv&lt;/li&gt;
&lt;li&gt;nconf&lt;/li&gt;
&lt;li&gt;node-config&lt;/li&gt;
&lt;li&gt;roll our own&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;node-config looked slightly more active so we slapped that in, but I was half way through setting it up and baulked at converting our existing CoffeeScript into JSON.  We threw it out and hand-rolled the following:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CHANNELS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GITTER_ROOMS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./../config/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LIVE_ENV&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'.coffee'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used our own LIVE_ENV var because actually what we wanted was a switch to move from one endpoint to another, and with this switch we now load &lt;code&gt;config/production.coffee&lt;/code&gt; vs &lt;code&gt;config/staging.coffee&lt;/code&gt; depending on whether we want to hit the main slack instance or not.  We got this working in fairly short order, and so we were tempted to try and knock off a couple of quick refactorings.  Splitting the tests over two files, and pulling a little hard coded logic out of the mock and into the tests themselves.&lt;/p&gt;

&lt;p&gt;Here we hit another wall.   Just splitting the tests over two files introduced a very strange problem:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tansaku@Samuels-MBP:~/Documents/GitHub/AgileVentures/agile-bot (27_refactor_test_harness)]$ 
→ npm test

&amp;gt; agile-bot@1.0.0 test /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot
&amp;gt; jasmine ENABLE_ROLLBAR=false GITTER_API_TOKEN=101010

Started
......._http_client.js:55
    throw new Error('Protocol "' + protocol + '" not supported. ' +
    ^

Error: Protocol "http:" not supported. Expected "https:"
  at new ClientRequest (_http_client.js:55:11)
  at RequestOverrider.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:251:24)
  at OverriddenClientRequest.RequestOverrider.req.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:159:7)
  at Request.end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:1397:14)
  at end (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:554:16)
  at Immediate.&amp;lt;anonymous&amp;gt; (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:581:7)
  at runCallback (timers.js:574:20)
  at tryOnImmediate (timers.js:554:5)
  at processImmediate [as _immediateCallback] (timers.js:533:5)

npm ERR! Test failed.  See above for more details.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running all the tests in a single file did not lead to this issue.  Googling the error provided little help, and we were hunting for the source of the issue by commenting out different sections of the code; back to C debugging style.  Again it&amp;rsquo;s entirely possible that our model of the system was just not sufficiently evolved to make sense of this.  None of our mocks or requests had any &amp;ldquo;http&amp;rdquo; requests, it was all &amp;ldquo;https&amp;rdquo;, so the error above didn&amp;rsquo;t make much sense, and the stack trace didn&amp;rsquo;t relate to any of our code.  I was suspecting it was a timing issue, and throwing up my hands in frustration, I was like, let&amp;rsquo;s just get this out with the tests in a single file.  I want to get some noticeable improvement into production.  We had at least got the variable config working.&lt;/p&gt;

&lt;p&gt;Michael and I decided to split.  He was keen to hunt this bug down, I was anxious to deploy something.  We talked about the tension between wanting to learn a new stack and wanting to deliver features to clients.  We did a &amp;ldquo;side by side&amp;rdquo; session for a while, where Michael hunted on that bug, and I tried to deploy where we were up to staging.  I think we just ended up distracting each other. I got caught in another silly bug where I failed to read the stack trace properly:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tansaku@Samuels-MBP:~/Documents/GitHub/AgileVentures/agile-bot (staging)]$ 
→ npm test

&amp;gt; agile-bot@1.0.0 test /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot
&amp;gt; jasmine ENABLE_ROLLBAR=false GITTER_API_TOKEN=101010

Started
.......undefined:1
undefined
^

SyntaxError: Unexpected token u in JSON at position 0
  at Object.parse (native)
  at Request._callback (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/scripts/av-hangouts-notifications.coffee:33:22)
  at self.callback (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:187:22)
  at emitOne (events.js:96:13)
  at Request.emit (events.js:188:7)
  at Request.onRequestError (/Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/request/request.js:813:8)
  at emitOne (events.js:96:13)
  at OverriddenClientRequest.emit (events.js:188:7)
  at /Users/tansaku/Documents/GitHub/AgileVentures/agile-bot/node_modules/nock/lib/request_overrider.js:206:11
  at _combinedTickCallback (internal/process/next_tick.js:67:7)
  at process._tickCallback (internal/process/next_tick.js:98:9)

npm ERR! Test failed.  See above for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was trying to follow up by making all the channel IDs in the staging config point to testing channels and changing one of them generated the above error.  In my frustration I totally missed the fact that this JSON error was not related to the config file per se.  Remember that we rolled our own config and we were pulling in coffee files, not JSON.  I spun my wheels for 20 minutes thinking I had some bad character in the config file, before realising that the tests were hard coded to the particular Gitter channel ID I was trying to change in config.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;d calmly read the stack trace I&amp;rsquo;d have seen the failure was actually at a different point in our code i.e. &lt;code&gt;av-hangouts-notifications.coffee:33&lt;/code&gt; which is the last line in the following:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;send_gitter_message_avoid_repeats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt; &lt;span class="s"&gt;"https://api.gitter.im/v1/rooms/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;GITTER_ROOMS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'saasbook/AV102'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/chatMessages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;bearer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GITTER_API_TOKEN&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think what was happening was that changing the config meant that our test was stubbing the wrong end point and so our test was really trying to hit Gitter and getting back some data it couldn&amp;rsquo;t parse.  Looking at the line in question we can see it is about parsing JSON so the unexpected token makes some sense.  Easy mistake, but my frustration at an unfamiliar stack and my worries about delivering visible changes to the community were not helping me make progress.  I&amp;rsquo;d got used to ignoring the stack traces earlier since they had not been something we could follow.  A great back to basics lesson for me.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also an important question about how we&amp;rsquo;re working.  Would Michael and I have made faster progress if we&amp;rsquo;d engaged on both problems together and one of us had given ground about which to work on first?  Over night Michael&amp;rsquo;s made progress on the multi-file issue and also on getting more sophisticated debugging to work which sounds like a wonderful step forward.  Michael has more coding time available to him.  I have lots of administrative and family commitments.  We need to keep working on the best approach to making progress.  I feel we have a good dialogue about our work modes.  Let&amp;rsquo;s see how we can improve next week.  I&amp;rsquo;m definitely inspired my Michael&amp;rsquo;s tenacity to want to get to the point where we can work efficiently in the node tech stack.  We&amp;rsquo;ve made a lot of progress.  Although even with a small legacy app I feel like we are balancing on a lot of brittleness.  Could we write something cleaner in the latest version of express?  Will I break down and create something in Sinatra?&lt;/p&gt;

&lt;p&gt;Oh and I forgot to mention, the agile-bot on staging was thrashing, dumping huge data dumps from slack onto the log.  I had to shut it down.  We&amp;rsquo;ve upgraded the whole stack of the agile-bot without checking that this set up will work in the deployment environment!  More back to basics &amp;hellip; I suspect I will need all my patience :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Where to Change?</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/08/where-to-change/"/>
    <id>http://blog.url.com/2016/09/08/where-to-change/</id>
    <published>2016-09-08T01:00:00+01:00</published>
    <updated>2016-09-08T21:23:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Trying to improve the test harness on the agile-bot yesterday was rather frustrating.  AgileBot is written in CoffeeScript and runs in the Hubot framework, which runs in Node.  It was originally spiked with no tests as a way of providing a service that would send notifications to Slack about hangouts for scrums and pairing sessions.  We made one adjustment to the spike a few months back to have it handle incoming information about the project that the hangout was associated with, so that certain projects could be re-directed to different messaging systems; the critical one being pushing MOOC pairing sessions to the MOOC Gitter chat.&lt;/p&gt;

&lt;p&gt;So we got away with making that change, but we&amp;rsquo;d like to make other improvements, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allowing the user to start the hangout from slack&lt;/li&gt;
&lt;li&gt;Make it so that hangouts related to projects are reliably posted to those project rooms&lt;/li&gt;
&lt;li&gt;Improve the formatting on the messages particularly hyperlinks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So following the example of the HangoutConnection app which used Jasmine tests, a few months back we added jasmine-node tests, and we now have some integration tests.  They are however somewhat brittle.  The other week Michael and I spent an hour or two trying to work out why the tests ran on his machine and not mine.  We were both on OSX, me on a slightly newer version.  It was interesting to investigate all the dependency management (nvm, node, npm etc.).  We spent some time getting on the same version of npm, node, and sorting all the other dependencies. Still my tests would just not run, no error message, nothing.  Somewhat frustratingly it all ultimately seemed to just start working when I used the auto-reformat feature on RubyMine that re-indents things.  CoffeeScript is sensitive to indenting, so perhaps there was some stray tab character, or mis-indented component that caused my machine to hiccough, but not Michael&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Maybe it is just because of my experience in Ruby, and relative lack of it in Node, but this seems to be a consistent experience for me in Node.  It reminds me of PHP in the early days.  Things would not work, and then suddenly they would just start working for reasons that were not completely clear.  Perhaps it&amp;rsquo;s rose-tinted glasses, but I don&amp;rsquo;t think I ever experienced that in Ruby unless I was going multi-threaded.  I&amp;rsquo;m totally open to the idea that the problem is that I haven&amp;rsquo;t conceptually mastered some aspect of Node.  I&amp;rsquo;m very comfortable with JavaScript on the client side, and I feel pretty confident with it there.  CoffeeScript and Node are two steps away from my comfort zone.&lt;/p&gt;

&lt;p&gt;Michael and I came back to the test harness yesterday and I spent a little time trying to understand the tests that Michael had written in my absence.  I started doing a little refactoring because there was a method called mockSoAndSo and it was both mocking a network connection and then executing the actual network request.  We&amp;rsquo;d got set up with hand-rolled mocks as we had in the HangoutConnection tests.  In order to avoid a complete Hubot acceptance test we were passing in a Hubot &amp;ldquo;mock&amp;rdquo; that our CoffeeScript file would process an generate a routing table that connected URL paths with functions.  &lt;/p&gt;

&lt;p&gt;Then to test we would run the function associated with a URL path, stubbing out the network calls to the 3rd party APIs of Slack and Gitter using the nock library.  In my mind it is the node equivalent of WebMock.  We had previously tried to get more realistic tests of the full network stack (for the slack/gitter calls) by using &lt;a href="https://github.com/linkedin/sepia"&gt;Sepia&lt;/a&gt; which seems to be the Node equivalent of VCR.  We got some recording and playback working, but it didn&amp;rsquo;t seem to have the VCR functions that we expected, which was failing when unexpected network connections were made, so we went with nock, which involves more work in terms of precisely specifying what you expect, but does complain when something unexpected happens.  The caveat there seems to be it will ignore extra key/value pairs in a post body, but if the key/values that are in the specified set then we&amp;rsquo;ll get an error.&lt;/p&gt;

&lt;p&gt;The process of putting all this in place originally had been a somewhat laborious one.  It felt a bit like C programming with segmentation faults, but without the benefit of a stack dump to analyse.  Basically we had to insert console.logs to see how far the program was getting, and then ultimately identifying that the problem was the rollbar automated notification system, which if called in test mode just led to a complete crash.&lt;/p&gt;

&lt;p&gt;Trying to refactor the tests yesterday I got caught out badly changing the wrong function, as there are two different mocks in the same file - one for posting hangouts, and another for posting video links.  That was frustrating.  There&amp;rsquo;s this trade off in all programming between having everything you are working on in the same file, so you can see all the relevant things at once, and that file getting too big, so you have to start jumping back and forth.  One mental note from yesterday, reduce those file sizes. &lt;/p&gt;

&lt;p&gt;Even with that slip out of way, and the tests refactored somewhat to make it clear that the mocking was separated from the network call, with code like this:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;describe&lt;/span&gt; &lt;span class="s"&gt;'hangouts-notify for scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;beforeEach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;slack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mockSlackHangoutNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'C0TLAE1MH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'localsupport'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Scrum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'localsupport'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I tried breaking the tests to check that they would fail in the right way, the test suite just crashed, no output, no nothing.  Now I&amp;rsquo;m sure this at least partly comes down to my incorrect mental model of how things are working.  In order to handle JavaScript&amp;rsquo;s single threaded nature we have to pass this &lt;code&gt;done&lt;/code&gt; object through to the makeRequest function so that we can set a timeout like so:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;host_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'jon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;host_avatar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'jon.jpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;routes_functions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'/hubot/hangouts-notify'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ensures that our request has a chance of hitting the HTTP stack, before we check in the test that nock has received the right kind of HTTP request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;coffee script
    it &amp;#39;should post hangout link to general channel&amp;#39;, (done)-&amp;gt;
      expect(@slack.isDone()).toBe(true, &amp;#39;expected HTTP endpoint was not hit&amp;#39;)
      done()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It took a fair amount of fiddling to get this all working, and it doesn&amp;rsquo;t fill me with confidence that we&amp;rsquo;re on the right track to something maintainable.  The point of having a test suite is so that we can refactor the underlying code with confidence, but if we don&amp;rsquo;t trust the tests &amp;hellip;?  So what should we do differently?  Michael says that jasmine-node is kind of old, and that he thought we&amp;rsquo;d identified a better alternative.  The &lt;a href="https://github.com/mhevery/jasmine-node"&gt;JasmineNode repo&lt;/a&gt; hasn&amp;rsquo;t been updated in a couple of years.  The &lt;a href="https://devchat.tv/js-jabber/226-jsj-test-doubles-with-justin-searls"&gt;JavaScript Jabber podcast&lt;/a&gt; that I listened to this morning was talking about a new &lt;a href="https://github.com/testdouble/testdouble.js"&gt;test double framework for JavaScript&lt;/a&gt; as an alternative to &lt;a href="https://github.com/sinonjs/sinon"&gt;Sinon&lt;/a&gt; and they were talking about a lot of the same issues that Michael and I were running into.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m tempted to want to change more.  I&amp;rsquo;m frustrated that the stack-traces we do get can&amp;rsquo;t be used to pinpoint the lines that things are going wrong on, because we are being given the line numbers for the Javascript that the CoffeeScript is being compiled into.  We tried getting CoffeeScript source maps set up and failed.  Maybe that would work with a little more effort, but one of the most frustrating things for me is that the logical functionality of the agile-bot is so simple, I feel like I could re-create it in a couple of hours in Ruby/Sinatra, without all the unknowns.&lt;/p&gt;

&lt;p&gt;It could even be pulled directly into the WebsiteOne codebase where we already reach out to the slack API to send email invites.  Of course that would be increasing the mass of code in our Rails monolith, and there&amp;rsquo;s an argument for maintaining our limited micro services architecture with a separate service for this logic.  There&amp;rsquo;s also perhaps an argument for having it in another language than Ruby in order to make our microservices architecture interesting and appealing to different OS developers.  The system was designed in Hubot initially as an experiment with the idea that we might be using other interesting functionality from Hubot.  That hasn&amp;rsquo;t happened, and although the different tech stack of the agile-bot has been an interesting diversion, it&amp;rsquo;s frustrating that I just want to be able to make some simple tweaks to our notification system to improve the day to day experience of AV users, and instead I&amp;rsquo;m tinkering around with JavaScript testing.&lt;/p&gt;

&lt;p&gt;A quick googling gives me the &lt;a href="https://github.com/jasmine/jasmine-npm"&gt;updated Jasmine version for node&lt;/a&gt;, and so the route of just changing one thing at a time would be to upgrade the tests to this.  I guess I have to consider that the underlying AgileBot code works, and has worked reliably for some time, and that&amp;rsquo;s got to count for something.  Further steps would be trying out Mocha/Chai - for which &lt;a href="https://www.codementor.io/javascript/tutorial/javascript-testing-framework-comparison-jasmine-vs-mocha"&gt;I found a good overview of the differences&lt;/a&gt;.  Another step would be to move away from CoffeeScript to JavaScript, or even to remove the Hubot framework and build the thing in pure node/express.  And the biggest step would be to another stack, which could be back to familiar Ruby territory or even off to new horizons like Elixir or Go.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m pairing with Michael it probably makes most sense to start with that single step to JasmineNPM.  Although if I have a spare couple of hours it might not hurt to see if I really can spike an alternate Ruby/Sinatra micro service as fast as I think I can :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Eliminate, Automate, Delegate</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/06/eliminate-automate-delegate/"/>
    <id>http://blog.url.com/2016/09/06/eliminate-automate-delegate/</id>
    <published>2016-09-06T01:00:00+01:00</published>
    <updated>2016-09-08T21:20:37+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ruby Rogues is a stream of interesting ideas.  One I heard recently was a mention of the importance of &amp;ldquo;Eliminate, Automate, Delegate&amp;rdquo;.  Everything you&amp;rsquo;re doing, check does it need to be done? Could it be done automatically, or could I get someone else to do it?  The idea is to not waste time on things that could be done more efficiently, and spend as much time on those things that only you can do, which presumably is the stuff that you&amp;rsquo;re really good at, is enjoyable, delivers value etc.  I&amp;rsquo;m not sure who first came up with this idea, but there are a few blogs with variations on the theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://roryvaden.com/blog/eliminate-automate-and-delegate/"&gt;Rory Vaden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theviewinside.me/eliminate-simplify-automate-delegate-the-four-steps-to-freedom/"&gt;Marc Winn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a quick google generates a set of related posts on how to interpret or get the best out of this kind of approach.  To add my own spin on this, the dangers of automating are that it can sometimes take longer to automate a task that it takes to get it done, and if that tasks ends up being a one off, or infrequently repeated, then the value of automation drops.  Similarly with delegating, sometimes the process of getting another person, or people, to understand the task that you want done takes longer than doing it yourself, and again if it&amp;rsquo;s a one off that communication overhead can squash the value from the delegation.&lt;/p&gt;

&lt;p&gt;It thus makes eminent sense to eliminate, or indeed simplify, tasks before trying to go the route of automation or delegation.  Then there&amp;rsquo;s the question of which to do first.  I think that partly depends on whether you are a people person or shall we say a &amp;lsquo;computer&amp;rsquo; person :-)  Of course all this presumes that we&amp;rsquo;ve bought into this whole narrative of achieving goals efficiently.  The process of attempting to automate or delegate something that doesn&amp;rsquo;t reap dividends is potentially a great learning experience, and isn&amp;rsquo;t the pinnacle of mindfulness to just appreciate all these experiences for the process they are, rather than worrying about the end result?&lt;/p&gt;

&lt;p&gt;Since we&amp;rsquo;re unlikely to resolve that question convincingly in this blog, let me tell you about an automation process I went through yesterday that I feel quite pleased at having done.  One of my tasks as editor of the &amp;ldquo;Engineering Software as a Service&amp;rdquo; textbook is to manage the incoming requests from instructors around the world for evaluation copies of the textbook.  This is a fairly normal part of the academic-publishing relationship.  Publishing houses generally make free copies of their textbooks available to instructors at established educational institutions as a &amp;ldquo;loss-leader&amp;rdquo;.  The hope of the publishing companies is that instructors will adopt their textbooks on the basis of the evaluation copy, and then students will purchase the textbook.&lt;/p&gt;

&lt;p&gt;Armando Fox and Dave Patterson decided to cut out the middleman and publish their &amp;ldquo;Engineering Software as a Service&amp;rdquo; textbook by self-publishing it through StrawberryCanyon, the enterprise they set up to deliver the textbook far more cheaply and efficiently than through a traditional publishing company.  Standard software engineering textbooks often run to a couple of hundred dollars, while the kindle version of ESaaS is just $10 (and comes with $10 of AWS credit to boot).  Long story short, there is no big publishing house infrastructure behind the ESaaS textbook.  Armando used to do the evaluation copy distribution and delegated that to me as part of my role of editor and community manager.&lt;/p&gt;

&lt;p&gt;So currently we have requests for evaluation copies come in through a google form, which puts requests in a google spreadsheet that I have access to.  The process of distributing an evaluation copy involves the following steps for me:&lt;/p&gt;

&lt;p&gt;1) check that the evaluation request is from a legitimate educational institution
2) generate a watermarked mobi format version of the textbook for that instructor
3) send the appropriate instructor an email with a link to where they can download their copy of the textbook
4) add the instructor to the textbook mailing list&lt;/p&gt;

&lt;p&gt;Now of course I&amp;rsquo;d love to delegate this, but I don&amp;rsquo;t think there is anyone else particularly incentivised to take on the task.  Armando incentivised me with a small percentage of the textbook profits.  It&amp;rsquo;s not much since as I mentioned above the textbook is designed to be affordable, but every little helps.  As Armando has pointed out repeatedly he&amp;rsquo;s not in this for the money, but for trying to revolutionise the education of software engineering, something which also inspires me.  Eliminate the task? well not without giving up on that goal :-) Simplify the task?  Well we could just make the textbook available for free download, but then there&amp;rsquo;d not be any incentive for people to pay the $10 a copy that provides the funds to pay for professional indexing of the textbook, translation into other languages etc.  The sales of the textbook generate very small amounts of profits after Amazon&amp;rsquo;s cut and that&amp;rsquo;s all re-invested in trying to improve the offering.&lt;/p&gt;

&lt;p&gt;Some books seems to operate a free HTML, pay for PDF model that perhaps we should consider, but there&amp;rsquo;s also an aspect of fitting into the existing instructional model.  Instructors expect to get a free textbook that their students then pay for &amp;hellip; although that sounds less convincing as I type it out.  However, part of what instructors are &amp;ldquo;buying&amp;rdquo; into when they select a textbook is that their students purchasing power will be directed back into the improvement of the textbook and so on.&lt;/p&gt;

&lt;p&gt;So, automation.  Steps 2, 3 and 4 seem promising in terms of automation.  I had automated steps 2 and 3 in the past when we used to distribute gift copies via Amazon.  I used RSpec/Capybara/Selenium to automate the process of stepping through the Amazon interface to send out a gift copy of the textbook.  That &lt;a href="https://github.com/saasbook/SPOC/blob/master/spec/send_textbook_spec.rb"&gt;code&lt;/a&gt;, was difficult to maintain as the Amazon web interface shifted, and ultimately had to be discarded when we decided to drop distribution of sample copies through Amazon (since it cost us $3 each time), and switch to generating watermarked copies from the command line.  Getting that to work on my system reliably was quite a struggle in itself.  The mobi generation process is run by Latex, takes a while, and for quite some time seemed to require 2 or 3 runs with me needing to hit return several times.&lt;/p&gt;

&lt;p&gt;More recently I have the mobi generation process stabilised and I had almost sort of automated the process of constructing the command to generate the mobi and move the file to dropbox, using formulas in google spreadsheets.  You could ask, why didn&amp;rsquo;t you just create a script straight off the bat?  Lack of emotional energy?  The fact that the data was already in google spreadsheets.  That the process itself was unstable and prone to change.  However yesterday I got to that threshold of thinking the process had stabilised.  I&amp;rsquo;d been using the spreadsheet formulas fairly regularly to set up the necessary commands to generate the textbooks.  I&amp;rsquo;d been using templates in the Thunderbird mail client to make the process of sending out emails easier, but doing it was still error-prone and time consuming; and I had found I could generate a compose window in Thunderbird from &lt;a href="http://kb.mozillazine.org/Command_line_arguments_(Thunderbird)"&gt;command line options&lt;/a&gt;, so rather than going through the manual process again I wrote the following script in Ruby:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;MAKE_MOBI_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'make mobi WATERMARK="'&lt;/span&gt;
&lt;span class="no"&gt;MOBI_ESCAPE_CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'\\\\\\\\\\\\\\\\'&lt;/span&gt;
&lt;span class="no"&gt;MAKE_MOBI_SUFFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'" ; mv saasbook.mobi ~/Dropbox/Public/saasbook_prof_'&lt;/span&gt;
&lt;span class="no"&gt;MOBI_FILE_EXTENSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'.mobi'&lt;/span&gt;

&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="no"&gt;FIRSTNAME_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_mobis&lt;/span&gt;
  &lt;span class="n"&gt;requestors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"requests.ssv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;col_sep: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;skip_lines: &lt;/span&gt;&lt;span class="s1"&gt;';'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/Users/tansaku/Documents/GitHub/armandofox/saasbook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;requestors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;firstname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;FIRSTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;MAKE_MOBI_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MOBI_ESCAPE_CHARS&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MAKE_MOBI_SUFFIX&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="si"&gt;}#{&lt;/span&gt;&lt;span class="no"&gt;MOBI_FILE_EXTENSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is ugly smelly code, and you should have seen it before I cleaned it up a bit.  I even started writing bits of it in the RSpec files I was using to kick it off before migrating it out into a Ruby file.  Bad practice?  Perhaps, but I wanted to quickly determine if I could get things I wanted working, and I know that checking that the mobi file is generated with the correct watermark is something I&amp;rsquo;m unlikely to be able to automate.  The bottom line is that I need to be able to open that file in Kindle software and see the right things.  Automating that would burn way too much time, for something that I can check manually, not every time perhaps but frequently enough to ensure things are working.&lt;/p&gt;

&lt;p&gt;I can just copy and paste the necessary data from the google spreadsheet into a local file (&amp;ldquo;requests.ssv&amp;rdquo;) and pasting from Google into my sublime editor generates space separated values, so I used an ssv file abbreviation.  So that allowed me to generate a load of personalised evaluation copies of the the textbook in batch; already quite a big saving. There&amp;rsquo;s so much room for refactoring - I could make classes etc., but I didn&amp;rsquo;t want to dive into that, I wanted to see if I could semi-automate the emailing process:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;THUNDERBIRD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/Applications/Thunderbird.app/Contents/MacOS/thunderbird'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_textbook_email&lt;/span&gt;
  &lt;span class="n"&gt;preselectid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'id2'&lt;/span&gt;
  &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Engineering Software as a Service Community Welcome!'&lt;/span&gt;
  &lt;span class="n"&gt;attachment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/Users/tansaku/Documents/Documents/AgileVentures/LocalSupport/WelcomeLetter.docx.pdf'&lt;/span&gt;

  &lt;span class="n"&gt;requestors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"requests.ssv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;col_sep: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;skip_lines: &lt;/span&gt;&lt;span class="s1"&gt;';'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="n"&gt;requestors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LASTNAME_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;LANGUAGE_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;EMAIL_INDEX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Español'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'email_spanish.erb'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'email.erb'&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;DROPBOX_LINK&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/saasbook_prof_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mobi"&lt;/span&gt;
    &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;lastname: &lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;link: &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ERB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%Q{"to='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',preselectid='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;preselectid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',bcc='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;bcc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',subject='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',body='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;',attachment='&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;'"}&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;THUNDERBIRD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -compose &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
    &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was pretty pleased with the above code, not in stylistic terms, but as a spike, a proof of concept that I could bring up a Thunderbird compose window with the correct text, to the correct person, and from the correct email account, and with an attachment.  Ultimately it all worked.  The process is not quite perfect as I &lt;a href="http://forums.mozillazine.org/viewtopic.php?f=39&amp;amp;t=3022463&amp;amp;e=0"&gt;posted to mozillazine&lt;/a&gt;, since there is an extra newline at the start of the email, and running in batch I have to click &amp;#39;send&amp;rsquo; on the compose window and then ⌘Q to quit the Thunderbird instance, before the next compose window will come up.  This is because there can only be one running Thunderbird instance at a time, so I also have to quit Thunderbird before I run the batch script.&lt;/p&gt;

&lt;p&gt;Still, I can live with those issues - a visual check of the email in the compose window before sending it is actually quite good for quality control.  I can now take a set of requests for evaluation copies of the textbook, run one command to generate the watermarked copies - grab a cuppa (UK slang &amp;ldquo;cup of tea&amp;rdquo;) while that runs, and when it finishes I can run another command that will pop up the emails I need to send and they will have the correct outgoing email address and link for downloading (as well as a couple of other minor variations based on the original request).  I can now check each and do a little dance of:&lt;/p&gt;

&lt;p&gt;a) check email
b) hit send
c) hit ⌘Q once the send has completed
d) repeat&lt;/p&gt;

&lt;p&gt;Whereas it might have previously taken me 10 minutes to get through pasting together the necessary emails for sending out 10 emails, I can now do that in about a minute, with an increase in reliability.  Writing the code took about two hours in total with me testing each of the processes manually, and I could have got yesterdays evaluation copies out in say 20 minutes if I hadn&amp;rsquo;t bothered with the automation.&lt;/p&gt;

&lt;p&gt;Over the course of a few months I should get that time back (assuming we don&amp;rsquo;t massively change the process again), and I had a lot more fun coding than I would have done operating things manually.  I also have some code to share, which can be progressively cleaned up and maybe support other things like getting the instructors on the google mailing list - hmmm captchas &amp;hellip; Anyway, I think the thing to ask yourself is, do you want to be an automaton?  A people person?  A developer?  I&amp;rsquo;m still working on the necessary people skills to delegate and more importantly inspire.  In the meantime I&amp;rsquo;ll choose being a developer over an automaton any day. I enjoy that process much more :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More Sandboxing</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/02/more-sandboxing/"/>
    <id>http://blog.url.com/2016/09/02/more-sandboxing/</id>
    <published>2016-09-02T01:00:00+01:00</published>
    <updated>2016-09-02T20:34:03+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So, following up on yesterday&amp;rsquo;s &lt;a href="http://nonprofits.agileventures.org/2016/09/01/how-much-sandboxing/"&gt;post on sandboxing&lt;/a&gt; acceptance tests of Stripe&amp;rsquo;s credit card functionality in Rails, Michael and I did another pairing session.  In a couple of hours we had the tests passing, and the basic card update functionality in place, but not without a little jiggery-pokery with the way that the PuffingBilly gem stores its HTTP cache files.  The point of departure was that having added an extra Cucumber scenario for the card update operation, a related scenario about signing up for premium plus failing with the common refrain of:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You cannot use a Stripe token more than once: tok_18CsXM... (Stripe::InvalidRequestError)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I am not 100% certain, but I had strong suspicions that this was because the Billy cache is shared between different scenarios, and so a token that gets used in one scenario gets re-used in another.  As I described in some detail yesterday, Stripe interactions involve network connections to the Stripe servers from the users browser via Ajax, and from our server side.  VCR caches and plays back http connections that our server makes, but does nothing for the Ajax requests made by the headless browser as part of our Cucumber/Capybara/Poltergeist/PhantomJS acceptance test.  &lt;/p&gt;

&lt;p&gt;I found the &lt;a href="https://github.com/oesmith/puffing-billy/issues/152"&gt;billy github issue&lt;/a&gt; where I had been asking about functionality to support different caches for different scenarios, and saw ronwsmith&amp;rsquo;s suggestion about changing the cache_path in a before block.  VCR does this automatically, and I guess we could get this into Billy by default with a PR, but in the first instance we created the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@javascript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;feature_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;
    &lt;span class="n"&gt;scenario_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"features/support/fixtures/req_cache/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;feature_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
    &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"features/support/fixtures/req_cache/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;feature_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;scenario_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This took several passes and a bit of poking around in the Billy code to reveal that we had to make the directories incrementally, but with this in place we had separate http caches set up for each scenario.  Although this means checking in some cache files repeatedly it ensures our tests are independent, and this allowed all of our charge related scenarios to pass both individually and in batch.  We still hadn&amp;rsquo;t finished the scenario to test all the way through to changing the customers card.  Pushing on there we still got the same error in a single scenario when we tried to have more than one interaction with the Stripe server.  I&amp;rsquo;m not 100% sure we have the ideal setup, but we have a big load of Billy config to ignore the URL params on many Stripe related requests like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_request_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignore_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'https://api.stripe.com/v1/tokens'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://q.stripe.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://js.stripe.com/v2/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/api/outer/manhattan'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/api/account/lookup'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_gb-TXHkb1MWMa7xOQfCZf1DFA.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_us-tZLon0RoQY0knbOURjQ.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_gb-LkmkoD88BacHIqnX4OXm6w.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/BFV9gQSjIO6MQNzvbBr9GA.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'http://checkout.stripe.com/v3/BFV9gQSjIO6MQNzvbBr9GA.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;persist_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'features/support/fixtures/req_cache/'&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;non_successful_cache_disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our VCR it set up to ignore all parameters on requests:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hook_into&lt;/span&gt; &lt;span class="ss"&gt;:webmock&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cassette_library_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'features/support/fixtures/cassettes'&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignore_localhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_cassette_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:match_requests_on&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="ss"&gt;:method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;request_matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uri_without_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:prev_imp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I did open a &lt;a href="https://github.com/oesmith/puffing-billy/issues/147"&gt;ticket&lt;/a&gt; to request a similar feature on Billy.&lt;/p&gt;

&lt;p&gt;Anyhow, getting the Billy cache to work with Stripe seems particularly tricky.  Without many of the ignore params specifications in the Billy config each new run of the tests will generate new entries in the Billy cache, because they are requesting a resource over the network with different ids in the URL params.  The tokens and ids from these requests then generate new requests that VCR caches, and so we have a cache leak situation.  Without the right set of ignore_params in Billy we are still hitting the network every time, and there are confusing extra files lying around which other developers don&amp;rsquo;t know what to do with.  To check in?  To delete?  Note also that some of the Stripe requests have hash ids in the URL themselves, so we have to create the test, run once, check the URL from the cache and then add that specific config.  Also there are other requests that Stripe JS makes based on the locale of the developer.  Locking this stuff down is really helped by the fact that Michael is based in the US and I&amp;rsquo;m in the UK, so we can push the code back and forth quickly.  That fact really helped us address some of the tricky timezone issues we&amp;rsquo;ve had in AgileVentures WebSiteOne.&lt;/p&gt;

&lt;p&gt;So if you look carefully you can see the individual locale requests that we&amp;rsquo;re adding to the Billy config to ensure that developers in en&lt;em&gt;gb and en&lt;/em&gt;us don&amp;rsquo;t experience cache leaks.  For developers in other locales we&amp;rsquo;ll have to add extra elements to the Billy config, or get that &lt;a href="https://github.com/oesmith/puffing-billy/issues/147"&gt;general param ignore functionality&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I could go in there and start removing elements from the Billy config to see if we really need all those different ignores, but having spent the best part of two hours on it yesterday, that&amp;rsquo;s not very appealing.  It&amp;rsquo;s a slow process of running a series of acceptance tests, checking to see if there are new files generated, investigating the contents of those files, adjusting the config, deleting all the cache files in two places, and then re-running the acceptance tests.  Maybe some of that could be automated if we linked the two caches somehow (same naming conventions?).  And is anybody doing this besides us?  It&amp;rsquo;s not rocket science, but it is fiddly.&lt;/p&gt;

&lt;p&gt;The time we spent on caching could have been spent on a few of the other things that I&amp;rsquo;d love to have in place, such as getting all our AV logos for Stripe sorted, linking the card update into the UI flow (although that probably should wait till we&amp;rsquo;ve done a live test on production), refactoring out a separate Stripe customer table (since the User table is now a bit bloated), migrating the Stripe customer data from a separate store, and so on.&lt;/p&gt;

&lt;p&gt;Stripe customer support is pretty solid actually.  They&amp;rsquo;d previously given helpful advice that even our test (vs live) tokens should probably not be checked into version control, which we&amp;rsquo;ve tried to avoid, although I have a feeling that Billy doesn&amp;rsquo;t have the VCR-like ability to &lt;a href="https://github.com/oesmith/puffing-billy/issues/143"&gt;strip sensitive tokens from the http caches&lt;/a&gt;.  We were also wondering if it was okay to store stripe Customer ids in our database directly, or if we should be encrypting them like we do with passwords.  Stripe support emailed back to say that they should be in a secure database, but wouldn&amp;rsquo;t usually need more security than usernames and emails, which is one less thing to worry about. Thanks Stripe!&lt;/p&gt;

&lt;p&gt;I think the key thing I now need to ask Stripe is what there thoughts are on fully sandboxed acceptance tests.  It&amp;rsquo;s pleasing that we&amp;rsquo;ve managed to get a green test suite with no cache leaks (fully sandboxed) but I&amp;rsquo;m not sure how much it buys us.  We have a strong set of regression tests so if there is some change in our codebase that breaks these tests we&amp;rsquo;ll know about it pretty fast; but the real acid test is whether the customer can do what they want on our site, and we won&amp;rsquo;t know that for sure when a customer tried to update their card details for real.   Will all of our work testing really pay off?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How Much Sandboxing?</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/01/how-much-sandboxing/"/>
    <id>http://blog.url.com/2016/09/01/how-much-sandboxing/</id>
    <published>2016-09-01T01:00:00+01:00</published>
    <updated>2016-09-01T21:10:33+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Michael and I were pairing on a new feature for the AgileVentures Stripe integration.  As the number of premium members paying recurring subscriptions via credit card is increasing we come to issues such as wanting to edit credit card details.  Stripe has a handy recipe for allowing users to update their card details:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stripe.com/docs/recipes/updating-customer-cards"&gt;https://stripe.com/docs/recipes/updating-customer-cards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently passing expiry dates (and even changing card numbers?) are already &lt;a href="https://stripe.com/blog/smarter-saved-cards"&gt;handled automatically&lt;/a&gt; by Stripe, which is good to know, but users may want to switch to a different card.  Unfortunately for us the recipe for the Stripe card update feature is in PHP.   We managed to figure things out referring to it for reference and to a handy &lt;a href="http://stackoverflow.com/a/28548367/316729"&gt;Stack Overflow post&lt;/a&gt;.  The load bearing part of the code is this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;stripe_customer_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;card: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidRequestError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt; &lt;span class="s2"&gt;"Stripe error while updating card info: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took us a little while to get clear on how this all worked.  The &lt;code&gt;Stripe::Customer&lt;/code&gt; entity is provided by the Stripe gem and allows our rails server to make a request to the Stripe server to retrieve details about a customer.  The tricky thing is that the update operation can only happen on our server after we&amp;rsquo;ve served a form to the user&amp;rsquo;s browser that will make an ajax request to the Stripe servers directly from the users computer.  That form is generated using the following template:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charge_path(@current_user.name), method: :put do %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
  &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
  &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Agile Ventures"&lt;/span&gt;
  &lt;span class="na"&gt;data-panel-label=&lt;/span&gt;&lt;span class="s"&gt;"Update Card Details"&lt;/span&gt;
  &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Update Card Details"&lt;/span&gt;
  &lt;span class="na"&gt;data-allow-remember-me=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
  &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a user wants to edit their card details we serve this to their browser.  The user&amp;rsquo;s browser loads Stripe&amp;rsquo;s checkout.js library and uses the base details we provide to generate a popup form like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Stripe pop up form" src="https://www.dropbox.com/s/ja4rsvbra17t8qk/Screenshot%202016-09-01%2008.49.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The user puts their updated details into the form, and when they hit submit that data is sent encrypted to the Stripe servers. We never see it directly on our server, which is clearly good from a security standpoint.  So the Stripe JS library is enabling a direct communication between the user&amp;rsquo;s computer and Stripe.  Once Stripe has processed the data it generates a token and redirects the user&amp;rsquo;s browser back to our server, appending that token to the URL.  That&amp;rsquo;s the point at which the update method above gets called.  We store the Stripe customer id in our user database and can use that to retrieve customer details from the Stripe server on our rails server.  Confused? :-)&lt;/p&gt;

&lt;p&gt;Given that additional information we can move on to understand the rest of the update method.  We now call &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;card: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;params[:stripeToken]&lt;/code&gt; is the token that Stripe generated on its servers after it received the new card details from the user.  It&amp;rsquo;s essentially a &amp;ldquo;session&amp;rdquo; that has the card details associated so we can use it to instantiate a card object that represents the customer&amp;rsquo;s new card.  Calling save on it might seem like we are storing something in our local database, but we&amp;rsquo;re not.  We&amp;rsquo;re generating another request to the Stripe servers that this card should be remembered by Stripe and then we&amp;rsquo;re setting it as the default card for the customer and then calling save on customer generates another network request to Stripe to ensure that the new card is used in future.&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s a lot of networking going on there behind the scenes.  Stripe helpfully provides test tokens and a test Stripe endpoint for testing purposes.  For our automated tests we assume that it&amp;rsquo;s not good practice to keep hitting the Stripe endpoints so we use the &lt;a href="https://github.com/vcr/vcr"&gt;VCR gem&lt;/a&gt; to record all the interactions between our rails server and Stripe.  Of course it&amp;rsquo;s not just the Rails server that&amp;rsquo;s communicating with Stripe.  It&amp;rsquo;s also the user&amp;rsquo;s browser via Ajax calls, so to properly sandbox everything in our acceptance tests we use the &lt;a href="https://github.com/oesmith/puffing-billy"&gt;puffing billy gem&lt;/a&gt;, which acts like VCR but on our headless browser (phantomjs) instead of on our server.&lt;/p&gt;

&lt;p&gt;Getting these sandboxing gems all set up to work with the Stripe interactions is not trivial, and requires a fair amount of playing with configuration.  This is because Stripe won&amp;rsquo;t allow the same token to be used twice, and naturally it is very sensitive to attempts to hack it, so if the environment is slightly off what it expects then it will refuse to operate.  We&amp;rsquo;d previously got the full sandboxed acceptance tests working for our premium and premium plus subscription sign up processes.  Adding this new functionality (which isn&amp;rsquo;t completed yet) is causing me to think through this whole set up again.&lt;/p&gt;

&lt;p&gt;We had to start tweaking the config again to get the new tests to pass, and where we are up to currently some of the old tests are now failing.  Maybe that will be an easy fix today and maybe not, but I wonder to what extent other organisations are writing fully sandboxed acceptance tests of this kind of functionality?  The guideline I&amp;rsquo;ve been following is that to be a good net citizen you shouldn&amp;rsquo;t allow your acceptance tests to make network calls to third party sites, as that puts unnecessary load on other people&amp;rsquo;s servers, and introduces a dependency and latency into your tests.  But have I been overly-zealous here?  Companies like Google and Stripe expect their services to come under heavy load.  Perhaps they won&amp;rsquo;t even notice the extra load from our test runs? Note: we sandbox our Google Maps interactions in the LocalSupport project.&lt;/p&gt;

&lt;p&gt;Avoiding external dependencies and network latency in our test suites sounds good, but if the majority of us have fast internet connections all the time, and those remote services are up close to 24/7 is that really such a big deal?  I guess it all depends on just how hard it is to maintain the acceptance test suites.  One big downside with sandboxing is that if the 3rd party endpoints change then we can have the situation where all our tests pass but the app is broken.  VCR and PuffingBilly at least make it simple to reset in that situation.  Both gems record network interactions to static files and then play them back to simulate the situation of being connected to the network.  Those recordings go out of date, but you can delete them and re-record, then check in the new files and you are bang up to date.  Much faster than having to re-stub individual network calls with something like webmock, but then perhaps our acceptance tests shouldn&amp;rsquo;t try to be so high fidelity, or perhaps we should rely more on unit tests?&lt;/p&gt;

&lt;p&gt;PuffingBilly is newer than VCR and it doesn&amp;rsquo;t yet have some of the features that I rely on in VCR such as grouping network recording files in directories named after the test that generated them, and config to clean sensitive data out of the recordings.  I imagine those will come - I&amp;rsquo;ve opened some tickets that I&amp;rsquo;ll check again now, but I really wonder how the majority of others are doing things?  I guess I&amp;rsquo;ll ask Stripe what their testing recommendations are, but the thing I think I&amp;rsquo;ve really learnt over the last few years is that you should be cautious taking a guideline to the limits.  Pursuing 100% test coverage, or 100% test driven, or perfect adherence to style guidelines often generates more friction than anything else.  I love the idea of fully sandboxed acceptance testing, but is it really practical as a real world system grows and has to cope with an increasing number of corner cases?&lt;/p&gt;
</content>
  </entry>
</feed>
